{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"lab1/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket ip = \"127.0.0.1\" port = 9090 buffer = 1024 serverMessage = \"Hello, client\" bytesToSend = str.encode(serverMessage) UDPSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM) UDPSocket.bind((ip, port)) print(\" === server is running ===\") while True: message, address = UDPSocket.recvfrom(buffer) if not message: break message = message.decode(\"utf-8\") clientMessage = \"Message from Client: {}\".format(message) print(clientMessage) UDPSocket.sendto(bytesToSend, address) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket clientMessage = \"Hello, Server\" bytesToSend = str.encode(clientMessage) serverAdress = (\"127.0.0.1\", 9090) buffer = 1024 UDPSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM) UDPSocket.sendto(bytesToSend, serverAdress) serverMessage = UDPSocket.recvfrom(buffer) serverMessage = serverMessage[0].decode(\"utf-8\") serverMessage = \"Message from Server: {}\".format(serverMessage) print(serverMessage) \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab1/task1/#no1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab1/task1/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"lab1/task1/#_2","text":"import socket ip = \"127.0.0.1\" port = 9090 buffer = 1024 serverMessage = \"Hello, client\" bytesToSend = str.encode(serverMessage) UDPSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM) UDPSocket.bind((ip, port)) print(\" === server is running ===\") while True: message, address = UDPSocket.recvfrom(buffer) if not message: break message = message.decode(\"utf-8\") clientMessage = \"Message from Client: {}\".format(message) print(clientMessage) UDPSocket.sendto(bytesToSend, address)","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task1/#_3","text":"import socket clientMessage = \"Hello, Server\" bytesToSend = str.encode(clientMessage) serverAdress = (\"127.0.0.1\", 9090) buffer = 1024 UDPSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM) UDPSocket.sendto(bytesToSend, serverAdress) serverMessage = UDPSocket.recvfrom(buffer) serverMessage = serverMessage[0].decode(\"utf-8\") serverMessage = \"Message from Server: {}\".format(serverMessage) print(serverMessage)","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task1/#_4","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"lab1/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: d. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket ip = \"127.0.0.1\" port = 9090 buffer = 1024 TCPSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) TCPSocket.bind((ip, port)) TCPSocket.listen(1) print(\" === server is running ===\\n\") def parallelogramArea(h, a): area = a * h return area while True: connection, adrress = TCPSocket.accept() try: print(\"Connected to client IP: {}\".format(adrress)) while True: data = connection.recv(buffer) if not data: break data = data.decode(\"utf-8\") print(\"Received data: {}\".format(data)) if data == \"stop\": break array = list(map(int, data.split())) answer = parallelogramArea(array[0], array[1]) print(\"Send data: {}\".format(answer)) answer = str.encode(str(answer)) connection.send(answer) finally: print(\"\\n=== stopping the server ===\") connection.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket serverAdress = (\"127.0.0.1\", 9090) buffer = 1024 TCPSocket = socket.create_connection(serverAdress) try: data = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u044b\u0441\u043e\u0442\u0443 \u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430:\") data = str.encode(data) TCPSocket.sendall(data) data = TCPSocket.recv(buffer) data = data.decode(\"utf-8\") print(\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: {}\".format(data)) finally: print(\"Closing socket\") TCPSocket.close() \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab1/task2/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: d. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab1/task2/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"lab1/task2/#_2","text":"import socket ip = \"127.0.0.1\" port = 9090 buffer = 1024 TCPSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) TCPSocket.bind((ip, port)) TCPSocket.listen(1) print(\" === server is running ===\\n\") def parallelogramArea(h, a): area = a * h return area while True: connection, adrress = TCPSocket.accept() try: print(\"Connected to client IP: {}\".format(adrress)) while True: data = connection.recv(buffer) if not data: break data = data.decode(\"utf-8\") print(\"Received data: {}\".format(data)) if data == \"stop\": break array = list(map(int, data.split())) answer = parallelogramArea(array[0], array[1]) print(\"Send data: {}\".format(answer)) answer = str.encode(str(answer)) connection.send(answer) finally: print(\"\\n=== stopping the server ===\") connection.close() break","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task2/#_3","text":"import socket serverAdress = (\"127.0.0.1\", 9090) buffer = 1024 TCPSocket = socket.create_connection(serverAdress) try: data = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u044b\u0441\u043e\u0442\u0443 \u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430:\") data = str.encode(data) TCPSocket.sendall(data) data = TCPSocket.recv(buffer) data = data.decode(\"utf-8\") print(\"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430: {}\".format(data)) finally: print(\"Closing socket\") TCPSocket.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task2/#_4","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"lab1/task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket class Server: def __init__(self, host, port): self._host = host self._port = port def createSocket(self): serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serverSocket.bind((self._host, self._port)) serverSocket.listen(1) while True: connection, adrress = serverSocket.accept() try: print(\"=== Connected to client ===\\n\") self.sendResponse(connection) if connection: connection.close() except Exception as ex: print(\"=== Client connection failed ===\\n\", ex) finally: serverSocket.close() print(\"=== Socket close ===\") def sendResponse(self, connection): file = connection.makefile('wb') #\u0421\u0442\u0430\u0442\u0443\u0441 status = f'HTTP/1.1 200 OK\\r\\n' file.write(status.encode('iso-8859-1')) #\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 header = f'Content-Type: text/html\\r\\n' file.write(header.encode('iso-8859-1'))\\ #\u041f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 file.write(b'\\r\\n') #html-\u043a\u043e\u0434 htmlFile = open(\"index.html\", 'r') for string in htmlFile: file.write(string.encode('iso-8859-1')) file.flush() file.close() if __name__ == \"__main__\": host, port = \"127.0.0.1\", 9090 server = Server(host, port) try: server.createSocket() except: pass \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket serverAdress = (\"127.0.0.1\", 9090) buffer = 8192 TCPSocket = socket.create_connection(serverAdress) print(\"=== connected to the server ===\\n\") try: data = TCPSocket.recv(buffer) data = data.decode(\"utf-8\") print(data) finally: print(\"\\n=== Closing socket ===\") TCPSocket.close() \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab1/task3/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab1/task3/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"lab1/task3/#_2","text":"import socket class Server: def __init__(self, host, port): self._host = host self._port = port def createSocket(self): serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serverSocket.bind((self._host, self._port)) serverSocket.listen(1) while True: connection, adrress = serverSocket.accept() try: print(\"=== Connected to client ===\\n\") self.sendResponse(connection) if connection: connection.close() except Exception as ex: print(\"=== Client connection failed ===\\n\", ex) finally: serverSocket.close() print(\"=== Socket close ===\") def sendResponse(self, connection): file = connection.makefile('wb') #\u0421\u0442\u0430\u0442\u0443\u0441 status = f'HTTP/1.1 200 OK\\r\\n' file.write(status.encode('iso-8859-1')) #\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 header = f'Content-Type: text/html\\r\\n' file.write(header.encode('iso-8859-1'))\\ #\u041f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 file.write(b'\\r\\n') #html-\u043a\u043e\u0434 htmlFile = open(\"index.html\", 'r') for string in htmlFile: file.write(string.encode('iso-8859-1')) file.flush() file.close() if __name__ == \"__main__\": host, port = \"127.0.0.1\", 9090 server = Server(host, port) try: server.createSocket() except: pass","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task3/#_3","text":"import socket serverAdress = (\"127.0.0.1\", 9090) buffer = 8192 TCPSocket = socket.create_connection(serverAdress) print(\"=== connected to the server ===\\n\") try: data = TCPSocket.recv(buffer) data = data.decode(\"utf-8\") print(data) finally: print(\"\\n=== Closing socket ===\") TCPSocket.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task3/#_4","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"lab1/task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket from threading import Thread class Server: def __init__(self, host, port, name): self._host = host self._port = port self._name = name self.addresses = set() self.clients = set() self.serverSocket = 0 def createSocket(self): self.serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: self.serverSocket.bind((self._host, self._port)) self.serverSocket.listen() while True: connection, addrress = self.serverSocket.accept() self.clients.add(connection) self.addresses.add(addrress) print(f\"Client {addrress} connected\") thread = Thread(target = self.takeConnections, args = (connection, )) thread.daemon = True thread.start() finally: self.serverSocket.close() print(\"=== Socket close ===\") def takeConnections(self, clientConnection: socket.socket): while True: try: message = clientConnection.recv(1024).decode() except Exception as ex: print(f\"Error when try read message: {ex}\") self.clients.remove(clientConnection) for client in self.clients: client.send(message.encode()) if __name__ == \"__main__\": host, port = \"127.0.0.1\", 9090 name = \"test.local\" server = Server(host, port, name) try: server.createSocket() except: pass \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket from threading import Thread from datetime import datetime import random serverAdress = (\"127.0.0.1\", 9090) buffer = 1024 name = random.choice(('Alex', 'Petya', 'Vasya', 'Timur', 'Ivan', 'Katya ')) TCPSocket = socket.socket() TCPSocket.connect(serverAdress) print(\"=== connected to the server ===\\n\") def takeMessages(socket: socket.socket): while True: message = socket.recv(buffer).decode() print(f\"\\n{message}\") try: thread = Thread(target = takeMessages, args = (TCPSocket, )) thread.daemon = True thread.start() while True: sendedMessage = input() if sendedMessage == \"quit()\": break timeOfMessage = datetime.now().strftime('%H:%M') sendedMessage = f\"[{timeOfMessage}] {name}: {sendedMessage}\" TCPSocket.send(sendedMessage.encode()) finally: print(\"\\n=== Closing socket ===\") TCPSocket.close() \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043f\u043e\u0434\u043b\u043a\u044e\u0447\u0435\u043d\u0438\u0435 3-\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430/\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab1/task4/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab1/task4/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"lab1/task4/#_2","text":"import socket from threading import Thread class Server: def __init__(self, host, port, name): self._host = host self._port = port self._name = name self.addresses = set() self.clients = set() self.serverSocket = 0 def createSocket(self): self.serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: self.serverSocket.bind((self._host, self._port)) self.serverSocket.listen() while True: connection, addrress = self.serverSocket.accept() self.clients.add(connection) self.addresses.add(addrress) print(f\"Client {addrress} connected\") thread = Thread(target = self.takeConnections, args = (connection, )) thread.daemon = True thread.start() finally: self.serverSocket.close() print(\"=== Socket close ===\") def takeConnections(self, clientConnection: socket.socket): while True: try: message = clientConnection.recv(1024).decode() except Exception as ex: print(f\"Error when try read message: {ex}\") self.clients.remove(clientConnection) for client in self.clients: client.send(message.encode()) if __name__ == \"__main__\": host, port = \"127.0.0.1\", 9090 name = \"test.local\" server = Server(host, port, name) try: server.createSocket() except: pass","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task4/#_3","text":"import socket from threading import Thread from datetime import datetime import random serverAdress = (\"127.0.0.1\", 9090) buffer = 1024 name = random.choice(('Alex', 'Petya', 'Vasya', 'Timur', 'Ivan', 'Katya ')) TCPSocket = socket.socket() TCPSocket.connect(serverAdress) print(\"=== connected to the server ===\\n\") def takeMessages(socket: socket.socket): while True: message = socket.recv(buffer).decode() print(f\"\\n{message}\") try: thread = Thread(target = takeMessages, args = (TCPSocket, )) thread.daemon = True thread.start() while True: sendedMessage = input() if sendedMessage == \"quit()\": break timeOfMessage = datetime.now().strftime('%H:%M') sendedMessage = f\"[{timeOfMessage}] {name}: {sendedMessage}\" TCPSocket.send(sendedMessage.encode()) finally: print(\"\\n=== Closing socket ===\") TCPSocket.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task4/#_4","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043f\u043e\u0434\u043b\u043a\u044e\u0447\u0435\u043d\u0438\u0435 3-\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430/\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"lab1/task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c import socket from io import BufferedReader from urllib.parse import urlparse import urllib.parse as urlParse import json class Request: def __init__(self, method: str, target: str, version: str, headers: list[str], body: list[str], fileReader: BufferedReader): self.method = method self.target = target self.version = version self.headers = headers self.body = body self.fileReader = fileReader @property def getUrl(self) -> urlParse.ParseResult: return urlparse(self.target) @property def getPath(self): return self.getUrl.path class Response: def __init__(self, status: int, reason: str, headers = None, body = None): self.status = status self.reason = reason self.headers = headers self.body = body class HTTPServer: def __init__(self, host: str, port: int, name: str): self._host = host self._port = port self._name = name self._handlers = 0 self._disciplinesGrades: dict[str, list[int]] = {\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\": list('5')} self._maxBufferLen = 1024 * 64 def serverStart(self): ''' Start server \\n Create server socket and try to connect to client ''' serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serverSocket.bind((self._host, self._port)) serverSocket.listen(5) print(f\"=== Server [{self._name}] is running ===\") while True: try: (clientSocket, adrress) = serverSocket.accept() self.serveClient(clientSocket) except Exception as ex: print(\"=== Client connection failed ===\\n\", ex) except Exception as ex: print(f\"=== Error when starting the server [{self._name}] ===\") finally: serverSocket.close() print(f\"=== Server [{self._name}] stopped ===\") def serveClient(self, clientSocket: socket.socket): try: request = self.parseRequest(clientSocket) print(f\"Received request: {request.method}, target: {request.target}\") response = self.handleRequest(request) print(f\"Return response: {response.reason}, status: {response.status}\\n\") self.sendResponse(clientSocket, response) except ConnectionResetError as conEx: clientSocket = False except Exception as ex: print(f\"Failed receive request and return response\") if clientSocket: clientSocket.close() def parseRequest(self, clientSocket: socket.socket) -> Request: fileReader = clientSocket.makefile('rb') requestString = fileReader.readline(self._maxBufferLen + 1) if len(requestString) > self._maxBufferLen: raise Exception('Too long request') requestLine = str(requestString, 'iso-8859-1') requestLine = requestLine.rstrip('\\r\\n') partsOfRequest = requestLine.split() if len(partsOfRequest) != 3: raise Exception('Incorrect request line') method, target, version = partsOfRequest if version != \"HTTP/1.1\": raise Exception(\"Incorrect HTTP Version\") requestHeaders = self._parseRequestHeaders(fileReader) requestBody = self._parseRequestBody(fileReader, requestHeaders) return Request(method, target, version, requestHeaders, requestBody, fileReader) def _parseRequestHeaders(self, requestFileReader: BufferedReader) -> list[str]: headersList = [] while True: requestString = requestFileReader.readline(self._maxBufferLen + 1) if requestString in (b\"\\r\\n\", b\"\\n\", b\"\"): break headersList.append(requestString.decode(\"iso-8859-1\")) return headersList def _parseRequestBody(self, requestFileReader: BufferedReader, requestHeaders: list[str]) -> list[str]: length = 0 for header in reversed(requestHeaders): index = header.find('Content-Length: ') lastIndex = index + len('Content-Length: ') if index != -1: length = int(header[lastIndex : header.find('\\r')]) if length != 0: body = requestFileReader.read(length) return body def handleRequest(self, request: Request): if request.getPath == \"/disciplines\" and request.method == \"POST\": return self._handlePostDiscipline(request) if request.getPath == \"/disciplines\" and request.method == \"GET\": return self._handleGetDiscipline() raise Exception(\"Not found such response\") def _handlePostDiscipline(self, request: Request): postBody = json.loads(request.body) if not postBody[\"discipline\"] in self._disciplinesGrades: self._disciplinesGrades[postBody[\"discipline\"]] = [] self._disciplinesGrades[postBody[\"discipline\"]].append(postBody[\"grade\"]) responseBody = json.dumps({\"Post done\": True}).encode(\"utf-8\") headers = [ (\"Content-Type\", \"application/json; charset=utf-8\"), (\"Content-Length\", len(responseBody))] return Response(204, 'Created', headers, responseBody) def _handleGetDiscipline(self): requestBody = self._htmlTableGen() requestBody = requestBody.encode('utf-8') requestHeaders = [(\"Content-Type\", \"text/html; charset=utf-8\"), (\"Content-Length\", len(requestBody))] return Response(200, \"OK\", requestHeaders, requestBody) def _htmlMain(self, ctx: str) -> str: return f\"\"\"<!DOCTYPE html> <head> <style> table {{ background: CadetBlue }} td {{ background: SkyBlue }} </style> </head> <body> {ctx} </body> </html>\"\"\" def _htmlTableGen(self) -> str: tableRows = [] for discipline in self._disciplinesGrades: gradesString = ', '.join(list(map(str, list(self._disciplinesGrades[discipline])))) tableRows.append( f\"\"\" <tr> <td>{discipline}</td> <td>{gradesString}</td> </tr>\"\"\") tableHead = \"\"\" <thead> <tr> <th scope=\"col\">Discipline</th> <th scope=\"col\">Grades</th> </tr> </thead>\"\"\" tableRows = \"\\n\".join(tableRows) tableBody = f\"<tbody>{tableRows}</tbody>\" return self._htmlMain(f\"<table>{tableHead}\\n{tableBody}</table>\") def sendResponse(self, clientSocket: socket.socket, response: Response): fileWriter = clientSocket.makefile(\"wb\") status = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\" fileWriter.write(status.encode('iso-8859-1')) if response.headers: for key, value in response.headers: header = f\"{key}: {value}\\r\\n\" fileWriter.write(header.encode(\"iso-8859-1\")) fileWriter.write(b'\\r\\n') if response.body: fileWriter.write(response.body) if __name__ == \"__main__\": host, port = \"127.0.0.1\", 9090 name = \"lab5.local\" server = HTTPServer(host, port, name) try: server.serverStart() except: pass \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 GET, POST, \u0438 GET \u043f\u043e\u0441\u043b\u0435 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab1/task5/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab1/task5/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"lab1/task5/#_2","text":"import socket from io import BufferedReader from urllib.parse import urlparse import urllib.parse as urlParse import json class Request: def __init__(self, method: str, target: str, version: str, headers: list[str], body: list[str], fileReader: BufferedReader): self.method = method self.target = target self.version = version self.headers = headers self.body = body self.fileReader = fileReader @property def getUrl(self) -> urlParse.ParseResult: return urlparse(self.target) @property def getPath(self): return self.getUrl.path class Response: def __init__(self, status: int, reason: str, headers = None, body = None): self.status = status self.reason = reason self.headers = headers self.body = body class HTTPServer: def __init__(self, host: str, port: int, name: str): self._host = host self._port = port self._name = name self._handlers = 0 self._disciplinesGrades: dict[str, list[int]] = {\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\": list('5')} self._maxBufferLen = 1024 * 64 def serverStart(self): ''' Start server \\n Create server socket and try to connect to client ''' serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serverSocket.bind((self._host, self._port)) serverSocket.listen(5) print(f\"=== Server [{self._name}] is running ===\") while True: try: (clientSocket, adrress) = serverSocket.accept() self.serveClient(clientSocket) except Exception as ex: print(\"=== Client connection failed ===\\n\", ex) except Exception as ex: print(f\"=== Error when starting the server [{self._name}] ===\") finally: serverSocket.close() print(f\"=== Server [{self._name}] stopped ===\") def serveClient(self, clientSocket: socket.socket): try: request = self.parseRequest(clientSocket) print(f\"Received request: {request.method}, target: {request.target}\") response = self.handleRequest(request) print(f\"Return response: {response.reason}, status: {response.status}\\n\") self.sendResponse(clientSocket, response) except ConnectionResetError as conEx: clientSocket = False except Exception as ex: print(f\"Failed receive request and return response\") if clientSocket: clientSocket.close() def parseRequest(self, clientSocket: socket.socket) -> Request: fileReader = clientSocket.makefile('rb') requestString = fileReader.readline(self._maxBufferLen + 1) if len(requestString) > self._maxBufferLen: raise Exception('Too long request') requestLine = str(requestString, 'iso-8859-1') requestLine = requestLine.rstrip('\\r\\n') partsOfRequest = requestLine.split() if len(partsOfRequest) != 3: raise Exception('Incorrect request line') method, target, version = partsOfRequest if version != \"HTTP/1.1\": raise Exception(\"Incorrect HTTP Version\") requestHeaders = self._parseRequestHeaders(fileReader) requestBody = self._parseRequestBody(fileReader, requestHeaders) return Request(method, target, version, requestHeaders, requestBody, fileReader) def _parseRequestHeaders(self, requestFileReader: BufferedReader) -> list[str]: headersList = [] while True: requestString = requestFileReader.readline(self._maxBufferLen + 1) if requestString in (b\"\\r\\n\", b\"\\n\", b\"\"): break headersList.append(requestString.decode(\"iso-8859-1\")) return headersList def _parseRequestBody(self, requestFileReader: BufferedReader, requestHeaders: list[str]) -> list[str]: length = 0 for header in reversed(requestHeaders): index = header.find('Content-Length: ') lastIndex = index + len('Content-Length: ') if index != -1: length = int(header[lastIndex : header.find('\\r')]) if length != 0: body = requestFileReader.read(length) return body def handleRequest(self, request: Request): if request.getPath == \"/disciplines\" and request.method == \"POST\": return self._handlePostDiscipline(request) if request.getPath == \"/disciplines\" and request.method == \"GET\": return self._handleGetDiscipline() raise Exception(\"Not found such response\") def _handlePostDiscipline(self, request: Request): postBody = json.loads(request.body) if not postBody[\"discipline\"] in self._disciplinesGrades: self._disciplinesGrades[postBody[\"discipline\"]] = [] self._disciplinesGrades[postBody[\"discipline\"]].append(postBody[\"grade\"]) responseBody = json.dumps({\"Post done\": True}).encode(\"utf-8\") headers = [ (\"Content-Type\", \"application/json; charset=utf-8\"), (\"Content-Length\", len(responseBody))] return Response(204, 'Created', headers, responseBody) def _handleGetDiscipline(self): requestBody = self._htmlTableGen() requestBody = requestBody.encode('utf-8') requestHeaders = [(\"Content-Type\", \"text/html; charset=utf-8\"), (\"Content-Length\", len(requestBody))] return Response(200, \"OK\", requestHeaders, requestBody) def _htmlMain(self, ctx: str) -> str: return f\"\"\"<!DOCTYPE html> <head> <style> table {{ background: CadetBlue }} td {{ background: SkyBlue }} </style> </head> <body> {ctx} </body> </html>\"\"\" def _htmlTableGen(self) -> str: tableRows = [] for discipline in self._disciplinesGrades: gradesString = ', '.join(list(map(str, list(self._disciplinesGrades[discipline])))) tableRows.append( f\"\"\" <tr> <td>{discipline}</td> <td>{gradesString}</td> </tr>\"\"\") tableHead = \"\"\" <thead> <tr> <th scope=\"col\">Discipline</th> <th scope=\"col\">Grades</th> </tr> </thead>\"\"\" tableRows = \"\\n\".join(tableRows) tableBody = f\"<tbody>{tableRows}</tbody>\" return self._htmlMain(f\"<table>{tableHead}\\n{tableBody}</table>\") def sendResponse(self, clientSocket: socket.socket, response: Response): fileWriter = clientSocket.makefile(\"wb\") status = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\" fileWriter.write(status.encode('iso-8859-1')) if response.headers: for key, value in response.headers: header = f\"{key}: {value}\\r\\n\" fileWriter.write(header.encode(\"iso-8859-1\")) fileWriter.write(b'\\r\\n') if response.body: fileWriter.write(response.body) if __name__ == \"__main__\": host, port = \"127.0.0.1\", 9090 name = \"lab5.local\" server = HTTPServer(host, port, name) try: server.serverStart() except: pass","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/task5/#_3","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 GET, POST, \u0438 GET \u043f\u043e\u0441\u043b\u0435 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"lab2/Main/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0430\u0439\u0442\u0430 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0433\u043e\u043d\u043e\u043a \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0433\u043e\u043d\u043a\u0435 \u043e\u0442 \u043b\u0438\u0446\u0430 \u0437\u0430\u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043d\u0435\u0439 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0433\u043e\u043d\u043a\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u043d\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0435 (\u0438\u043b\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0435)","title":"Main"},{"location":"lab2/Main/#_1","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0430\u0439\u0442\u0430"},{"location":"lab2/Main/#_2","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab2/Main/#_3","text":"","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab2/Main/#_4","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0433\u043e\u043d\u043e\u043a"},{"location":"lab2/Main/#_5","text":"","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0433\u043e\u043d\u043a\u0435 \u043e\u0442 \u043b\u0438\u0446\u0430 \u0437\u0430\u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u043d\u0435\u0439 \u0433\u043e\u043d\u0449\u0438\u043a\u0430"},{"location":"lab2/Main/#_6","text":"","title":"\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0433\u043e\u043d\u043a\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u043d\u0435\u0439"},{"location":"lab2/Main/#_7","text":"","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"lab2/Main/#_8","text":"","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0435 (\u0438\u043b\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0435)"},{"location":"lab2/Model/","text":"\u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u21166 - \u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 User - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c username - \u043b\u043e\u0433\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password - \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f last_name - \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f first_name - \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f patronymic - \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f is_racer - \u043e\u0442\u043c\u0435\u0442\u043a\u0430, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u043c \u0433\u043e\u043d\u043e\u043a Racer - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u0433\u043e\u043d\u043a\u0438 / \u0433\u043e\u043d\u0449\u0438\u043a user_id - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 experience - \u043e\u043f\u044b\u0442 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0432 \u0433\u043e\u0434\u0430\u0445 drive_class - \u043a\u043b\u0430\u0441\u0441 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 team - \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 Team - \u043a\u043e\u043c\u0430\u043d\u0434\u0430 name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b car_description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0447\u0430\u0432\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0433\u043e\u043d\u043a\u0430\u0445 Race - \u0433\u043e\u043d\u043a\u0430 race_location - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u043a\u0438 winner_id - \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c \u0433\u043e\u043d\u043a\u0438 winner_score - \u043e\u0447\u043a\u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f users_id - \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 race_date - \u0434\u0430\u0442\u0430 \u0433\u043e\u043d\u043a\u0438 status - \u0441\u0442\u0430\u0442\u0443\u0441 \u0433\u043e\u043d\u043a\u0438 (\u043d\u0435 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c; \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c; \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0430\u0441\u044c; \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430) Statistic - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0433\u043e\u043d\u043e\u043a user_id - \u0433\u043e\u043d\u0449\u0438\u043a race_id - \u0433\u043e\u043d\u043a\u0430 loop - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u0443\u0433\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0433\u043e\u043d\u0449\u0438\u043a time - \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443 Comment - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0433\u043e\u043d\u043e\u043a main_text - \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f race_id - \u0433\u043e\u043d\u043a\u0430 race_date - \u0434\u0430\u0442\u0430 \u0433\u043e\u043d\u043a\u0438 type - \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f rate - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f commentator_id - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","title":"Model"},{"location":"lab2/Model/#_1","text":"","title":"\u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"lab2/Model/#no6-","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u21166 - \u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a"},{"location":"lab2/Model/#_2","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab2/Model/#user-","text":"username - \u043b\u043e\u0433\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password - \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f last_name - \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f first_name - \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f patronymic - \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f is_racer - \u043e\u0442\u043c\u0435\u0442\u043a\u0430, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u043c \u0433\u043e\u043d\u043e\u043a","title":"User - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c"},{"location":"lab2/Model/#racer-","text":"user_id - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 experience - \u043e\u043f\u044b\u0442 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0432 \u0433\u043e\u0434\u0430\u0445 drive_class - \u043a\u043b\u0430\u0441\u0441 \u0433\u043e\u043d\u0449\u0438\u043a\u0430 team - \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0433\u043e\u043d\u0449\u0438\u043a\u0430","title":"Racer - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u0433\u043e\u043d\u043a\u0438 / \u0433\u043e\u043d\u0449\u0438\u043a"},{"location":"lab2/Model/#team-","text":"name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b car_description - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0447\u0430\u0432\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0433\u043e\u043d\u043a\u0430\u0445","title":"Team - \u043a\u043e\u043c\u0430\u043d\u0434\u0430"},{"location":"lab2/Model/#race-","text":"race_location - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u043a\u0438 winner_id - \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c \u0433\u043e\u043d\u043a\u0438 winner_score - \u043e\u0447\u043a\u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f users_id - \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 race_date - \u0434\u0430\u0442\u0430 \u0433\u043e\u043d\u043a\u0438 status - \u0441\u0442\u0430\u0442\u0443\u0441 \u0433\u043e\u043d\u043a\u0438 (\u043d\u0435 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c; \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c; \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0430\u0441\u044c; \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430)","title":"Race - \u0433\u043e\u043d\u043a\u0430"},{"location":"lab2/Model/#statistic-","text":"user_id - \u0433\u043e\u043d\u0449\u0438\u043a race_id - \u0433\u043e\u043d\u043a\u0430 loop - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u0443\u0433\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0433\u043e\u043d\u0449\u0438\u043a time - \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443","title":"Statistic - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0433\u043e\u043d\u043e\u043a"},{"location":"lab2/Model/#comment-","text":"main_text - \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f race_id - \u0433\u043e\u043d\u043a\u0430 race_date - \u0434\u0430\u0442\u0430 \u0433\u043e\u043d\u043a\u0438 type - \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f rate - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f commentator_id - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c","title":"Comment - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0433\u043e\u043d\u043e\u043a"},{"location":"lab2/Model/#_3","text":"","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab2/Urls/","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u044b: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0435 / \u0433\u043e\u043d\u043a\u0430\u0445: path('users/<int:user_id>/', views.get_user), path('races/', views.get_races), \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043f\u0440. path('logout/', login_required(views.logout_user)), path('registration/', views.registration), path('racer_register/', login_required(views.racer_registration)), path('login/', views.sign_in), \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0435 path('races/<int:race_id>/', views.get_race), path('races/<int:race_id>/registerForRace', login_required(views.register_for_race)), path('races/<int:race_id>/unregisterForRace', login_required(views.unregister_for_race)), path('races/<int:race_id>/comment', login_required(views.commentCreate))","title":"Urls"},{"location":"lab2/Urls/#_1","text":"","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"lab2/Urls/#_2","text":"","title":"\u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u044b:"},{"location":"lab2/Urls/#_3","text":"path('users/<int:user_id>/', views.get_user), path('races/', views.get_races),","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0435 / \u0433\u043e\u043d\u043a\u0430\u0445:"},{"location":"lab2/Urls/#_4","text":"path('logout/', login_required(views.logout_user)), path('registration/', views.registration), path('racer_register/', login_required(views.racer_registration)), path('login/', views.sign_in),","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043f\u0440."},{"location":"lab2/Urls/#_5","text":"path('races/<int:race_id>/', views.get_race), path('races/<int:race_id>/registerForRace', login_required(views.register_for_race)), path('races/<int:race_id>/unregisterForRace', login_required(views.unregister_for_race)), path('races/<int:race_id>/comment', login_required(views.commentCreate))","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0435"},{"location":"lab2/Views/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f def registration(request): if request.method == 'POST': form = CreateUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/races') else: form = CreateUserForm() return render(request, 'registration.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0434 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u044b\u043c \u0432 \u0444\u043e\u0440\u043c\u0435 \u0434\u0430\u043d\u043d\u044b\u043c. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f def sign_in(request): if request.method == 'POST': form = LoginForm(request.POST) if form.is_valid(): cleaned_data = form.cleaned_data user = authenticate(request=request, username=cleaned_data['username'], password=cleaned_data['password']) if user is None: return HttpResponse('Invalid login') else: login(request, user) return redirect('/races') else: form = LoginForm() return render(request, 'login.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u044b\u043c \u0432 \u0444\u043e\u0440\u043c\u0435 \u0434\u0430\u043d\u043d\u044b\u043c. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 def get_user(request, user_id): try: user_object = User.objects.get(pk=user_id) except User.DoesNotExist: raise Http404(\"User does not exist\") if user_object.is_racer: racer_object = Racer.objects.get(user_id=user_id) isRacerBool = True isRacer = 'User is racer' racerInfo = f'Racer class: {racer_object.drive_class} | Racer experience: {racer_object.experience} years' racerDesc = f'{racer_object.description}' else: isRacerBool = False isRacer = 'User is not racer' racerInfo = '' racerDesc = f'' return render(request, 'userPage.html', {'user': user_object, 'racerInfo': racerInfo, 'racerDesc': racerDesc, 'isRacer': isRacer, 'isRacerBool': isRacerBool}) \u0412\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e id \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0433\u043e\u043d\u043e\u043a def get_races(request): races_object = Race.objects.all() winners = [] for race_object in races_object: if race_object.winner_id: winners.append(race_object.winner_id.team) else: winners.append('No winner') races_and_winners = dict(zip(races_object, winners)) return render(request, \"races.html\", {'dataset': races_and_winners}) \u0412\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u0433\u043e\u043d\u043a\u0430\u0445, \u0442\u0430\u043a \u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u0431\u043e\u0440\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0435 def get_race(request, race_id): winners = [] try: race_object = Race.objects.get(pk=race_id) if race_object.status == 'over': # winners_team = race_object.winner_id.team winners = list(Racer.objects.filter(team=race_object.winner_id.team)) racers_stats = list(Statistic.objects.filter(race_id=race_id)) comments_list = Comment.objects.filter(race_id=race_id) except User.DoesNotExist: raise Http404(\"Data does not exist\") try: user = User.objects.get(id=request.user.id) if request.user.is_authenticated and user.is_racer: racer_and_not_start = (user.is_racer and race_object.status == \"not started\") reg = (Statistic.objects.filter(user_id=Racer.objects.get(user_id=request.user)) & Statistic.objects.filter(race_id=race_id)) racer_and_not_start = (racer_and_not_start and not reg) else: racer_and_not_start = False except: racer_and_not_start = False try: user = User.objects.get(id=request.user.id) if request.user.is_authenticated and user.is_racer: racer_not_start_reg = (user.is_racer and race_object.status == \"not started\") reg = (Statistic.objects.filter(user_id=Racer.objects.get(user_id=request.user)) & Statistic.objects.filter(race_id=race_id)) racer_not_start_reg = (racer_not_start_reg and reg) else: racer_not_start_reg = False except: racer_not_start_reg = False return render(request, 'race.html', {'race': race_object, 'rns': racer_and_not_start, 'rnsr': racer_not_start_reg, 'racers': racers_stats, 'winners': winners, 'comments': comments_list}) \u0412\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0435 \u043f\u043e \u0435\u0435 id. \u0422\u0430\u043a \u0436\u0435, \u043d\u0430 \u044d\u0442\u043e\u0439 \u0444\u043e\u0440\u043c\u0435, \u0443\u0447\u0430\u0441\u0442\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043b\u0438 \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u0433\u043e\u043d\u043a\u0443. \u0418 \u0432\u0441\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u0430\u043a \u0433\u043e\u043d\u0449\u0438\u043a\u0430 def racer_registration(request): form = RacerReg(request.POST or None) if request.method == 'POST': # form = RacerReg(request.POST) if form.is_valid(): cleaned_data = form.cleaned_data racer = Racer( user_id=request.user, description=cleaned_data['description'], experience=cleaned_data['experience'], drive_class=cleaned_data['drive_class'], team=cleaned_data['team'] ) user = User.objects.get(pk=request.user.id) user.is_racer = True user.save() racer.save() return redirect(f'/users/{request.user.id}') return render(request, 'racerReg.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0434 \u043a\u0430\u043a \u0433\u043e\u043d\u0449\u0438\u043a\u0430. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443 def register_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() > 0: return redirect('/races') stats = Statistic.objects.create(user_id=racer, race_id=race_object) return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u043a\u0430\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443 def unregister_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() <= 0: return redirect('/races') stats.delete() return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443. \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 def commentCreate(request, race_id): form = CommentCreate(request.POST or None) if request.method == 'POST': if form.is_valid(): cleaned_data = form.cleaned_data race = Race.objects.get(pk=race_id) user = User.objects.get(pk=request.user.id) comment = Comment( main_text=cleaned_data['main_text'], race_id=race, race_date=race.race_date, type=cleaned_data['type'], rate=random.randint(1, 10), commentator_id=user ) comment.save() return redirect(f'/races/{race_id}') return render(request, 'comment.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043a \u0433\u043e\u043d\u043a\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0433\u043e\u043d\u043a\u0435 \u0432 \u0431\u0434.","title":"Views"},{"location":"lab2/Views/#_1","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab2/Views/#_2","text":"def registration(request): if request.method == 'POST': form = CreateUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/races') else: form = CreateUserForm() return render(request, 'registration.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0434 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u044b\u043c \u0432 \u0444\u043e\u0440\u043c\u0435 \u0434\u0430\u043d\u043d\u044b\u043c.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab2/Views/#_3","text":"def sign_in(request): if request.method == 'POST': form = LoginForm(request.POST) if form.is_valid(): cleaned_data = form.cleaned_data user = authenticate(request=request, username=cleaned_data['username'], password=cleaned_data['password']) if user is None: return HttpResponse('Invalid login') else: login(request, user) return redirect('/races') else: form = LoginForm() return render(request, 'login.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u044b\u043c \u0432 \u0444\u043e\u0440\u043c\u0435 \u0434\u0430\u043d\u043d\u044b\u043c.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab2/Views/#_4","text":"def get_user(request, user_id): try: user_object = User.objects.get(pk=user_id) except User.DoesNotExist: raise Http404(\"User does not exist\") if user_object.is_racer: racer_object = Racer.objects.get(user_id=user_id) isRacerBool = True isRacer = 'User is racer' racerInfo = f'Racer class: {racer_object.drive_class} | Racer experience: {racer_object.experience} years' racerDesc = f'{racer_object.description}' else: isRacerBool = False isRacer = 'User is not racer' racerInfo = '' racerDesc = f'' return render(request, 'userPage.html', {'user': user_object, 'racerInfo': racerInfo, 'racerDesc': racerDesc, 'isRacer': isRacer, 'isRacerBool': isRacerBool}) \u0412\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e id \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435"},{"location":"lab2/Views/#_5","text":"def get_races(request): races_object = Race.objects.all() winners = [] for race_object in races_object: if race_object.winner_id: winners.append(race_object.winner_id.team) else: winners.append('No winner') races_and_winners = dict(zip(races_object, winners)) return render(request, \"races.html\", {'dataset': races_and_winners}) \u0412\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u0433\u043e\u043d\u043a\u0430\u0445, \u0442\u0430\u043a \u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b\u0431\u043e\u0440\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0433\u043e\u043d\u043e\u043a"},{"location":"lab2/Views/#_6","text":"def get_race(request, race_id): winners = [] try: race_object = Race.objects.get(pk=race_id) if race_object.status == 'over': # winners_team = race_object.winner_id.team winners = list(Racer.objects.filter(team=race_object.winner_id.team)) racers_stats = list(Statistic.objects.filter(race_id=race_id)) comments_list = Comment.objects.filter(race_id=race_id) except User.DoesNotExist: raise Http404(\"Data does not exist\") try: user = User.objects.get(id=request.user.id) if request.user.is_authenticated and user.is_racer: racer_and_not_start = (user.is_racer and race_object.status == \"not started\") reg = (Statistic.objects.filter(user_id=Racer.objects.get(user_id=request.user)) & Statistic.objects.filter(race_id=race_id)) racer_and_not_start = (racer_and_not_start and not reg) else: racer_and_not_start = False except: racer_and_not_start = False try: user = User.objects.get(id=request.user.id) if request.user.is_authenticated and user.is_racer: racer_not_start_reg = (user.is_racer and race_object.status == \"not started\") reg = (Statistic.objects.filter(user_id=Racer.objects.get(user_id=request.user)) & Statistic.objects.filter(race_id=race_id)) racer_not_start_reg = (racer_not_start_reg and reg) else: racer_not_start_reg = False except: racer_not_start_reg = False return render(request, 'race.html', {'race': race_object, 'rns': racer_and_not_start, 'rnsr': racer_not_start_reg, 'racers': racers_stats, 'winners': winners, 'comments': comments_list}) \u0412\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0435 \u043f\u043e \u0435\u0435 id. \u0422\u0430\u043a \u0436\u0435, \u043d\u0430 \u044d\u0442\u043e\u0439 \u0444\u043e\u0440\u043c\u0435, \u0443\u0447\u0430\u0441\u0442\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043b\u0438 \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u0433\u043e\u043d\u043a\u0443. \u0418 \u0432\u0441\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0447\u0438\u0442\u0430\u0442\u044c \u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0435"},{"location":"lab2/Views/#_7","text":"def racer_registration(request): form = RacerReg(request.POST or None) if request.method == 'POST': # form = RacerReg(request.POST) if form.is_valid(): cleaned_data = form.cleaned_data racer = Racer( user_id=request.user, description=cleaned_data['description'], experience=cleaned_data['experience'], drive_class=cleaned_data['drive_class'], team=cleaned_data['team'] ) user = User.objects.get(pk=request.user.id) user.is_racer = True user.save() racer.save() return redirect(f'/users/{request.user.id}') return render(request, 'racerReg.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0434 \u043a\u0430\u043a \u0433\u043e\u043d\u0449\u0438\u043a\u0430.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u0430\u043a \u0433\u043e\u043d\u0449\u0438\u043a\u0430"},{"location":"lab2/Views/#_8","text":"def register_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() > 0: return redirect('/races') stats = Statistic.objects.create(user_id=racer, race_id=race_object) return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u043a\u0430\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443"},{"location":"lab2/Views/#_9","text":"def unregister_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() <= 0: return redirect('/races') stats.delete() return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443. \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443"},{"location":"lab2/Views/#_10","text":"def commentCreate(request, race_id): form = CommentCreate(request.POST or None) if request.method == 'POST': if form.is_valid(): cleaned_data = form.cleaned_data race = Race.objects.get(pk=race_id) user = User.objects.get(pk=request.user.id) comment = Comment( main_text=cleaned_data['main_text'], race_id=race, race_date=race.race_date, type=cleaned_data['type'], rate=random.randint(1, 10), commentator_id=user ) comment.save() return redirect(f'/races/{race_id}') return render(request, 'comment.html', {'form': form}) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043a \u0433\u043e\u043d\u043a\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0433\u043e\u043d\u043a\u0435 \u0432 \u0431\u0434.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432"},{"location":"lab3/Model/","text":"\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0412\u044b\u0431\u0440\u0430\u043d \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442: \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043a\u043b\u0430\u0434\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0438 \u043c\u0435\u0441\u0442\u0430\u0445 \u0435\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0432\u0435\u043d\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0439, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0438\u043d\u0432\u0435\u043d\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043e\u0431 \u044d\u0442\u043e\u0439 \u0438\u043d\u0432\u0435\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 User - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c username - \u043b\u043e\u0433\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password - \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_barcode - \u043b\u0438\u0447\u043d\u044b\u0439 \u0448\u0442\u0440\u0438\u0445\u043a\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f last_name - \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f first_name - \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f experience - \u043e\u043f\u044b\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f passport - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f Item - \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b (\u0442\u043e\u0432\u0430\u0440) item_barcode - \u0448\u0442\u0440\u0438\u0445\u043a\u043e\u0434 \u0442\u043e\u0432\u0430\u0440\u0430 name - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u0430 measurement_unit - \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 (\u043a\u0433; \u0448\u0442; \u043c\u043b) Warehouse - \u0441\u043a\u043b\u0430\u0434 name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u043b\u0430\u0434\u0430 Shipment - \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u043e\u0432\u0430\u0440\u0430 user_id - \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0439 \u0437\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0443 item_id - \u0442\u043e\u0432\u0430\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043e\u0442\u0433\u0440\u0443\u0436\u0435\u043d old_warehouse_id - \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043a\u043b\u0430\u0434 new_warehouse_id - \u0441\u043a\u043b\u0430\u0434 / \u043f\u0443\u043d\u043a\u0442 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f amount - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 datetime - \u0432\u0440\u0435\u043c\u044f \u0438 \u0434\u0430\u0442\u0430 Nomenclature - \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430 \u0442\u043e\u0432\u0430\u0440\u0430 item_id - \u0442\u043e\u0432\u0430\u0440 warehouse_id - \u0441\u043a\u043b\u0430\u0434 name - \u0434\u043e\u043f. \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 amount - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 Comment - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0433\u043e\u043d\u043e\u043a user_id - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c shipment_id - \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0430 label - \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a main_text - \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","title":"Model"},{"location":"lab3/Model/#_1","text":"","title":"\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/Model/#_2","text":"\u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0438 \u043c\u0435\u0441\u0442\u0430\u0445 \u0435\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0432\u0435\u043d\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0439, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0438\u043d\u0432\u0435\u043d\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043e\u0431 \u044d\u0442\u043e\u0439 \u0438\u043d\u0432\u0435\u0442\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043a\u043b\u0430\u0434\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439.","title":"\u0412\u044b\u0431\u0440\u0430\u043d \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442: \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043a\u043b\u0430\u0434\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432"},{"location":"lab3/Model/#_3","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/Model/#user-","text":"username - \u043b\u043e\u0433\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password - \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_barcode - \u043b\u0438\u0447\u043d\u044b\u0439 \u0448\u0442\u0440\u0438\u0445\u043a\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f last_name - \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f first_name - \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f experience - \u043e\u043f\u044b\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f passport - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"User - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c"},{"location":"lab3/Model/#item-","text":"item_barcode - \u0448\u0442\u0440\u0438\u0445\u043a\u043e\u0434 \u0442\u043e\u0432\u0430\u0440\u0430 name - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u0430 measurement_unit - \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 (\u043a\u0433; \u0448\u0442; \u043c\u043b)","title":"Item - \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b (\u0442\u043e\u0432\u0430\u0440)"},{"location":"lab3/Model/#warehouse-","text":"name - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u043b\u0430\u0434\u0430","title":"Warehouse - \u0441\u043a\u043b\u0430\u0434"},{"location":"lab3/Model/#shipment-","text":"user_id - \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0439 \u0437\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0443 item_id - \u0442\u043e\u0432\u0430\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043e\u0442\u0433\u0440\u0443\u0436\u0435\u043d old_warehouse_id - \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043a\u043b\u0430\u0434 new_warehouse_id - \u0441\u043a\u043b\u0430\u0434 / \u043f\u0443\u043d\u043a\u0442 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f amount - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 datetime - \u0432\u0440\u0435\u043c\u044f \u0438 \u0434\u0430\u0442\u0430","title":"Shipment - \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u043e\u0432\u0430\u0440\u0430"},{"location":"lab3/Model/#nomenclature-","text":"item_id - \u0442\u043e\u0432\u0430\u0440 warehouse_id - \u0441\u043a\u043b\u0430\u0434 name - \u0434\u043e\u043f. \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 amount - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435","title":"Nomenclature - \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430 \u0442\u043e\u0432\u0430\u0440\u0430"},{"location":"lab3/Model/#comment-","text":"user_id - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c shipment_id - \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0430 label - \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a main_text - \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","title":"Comment - \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0433\u043e\u043d\u043e\u043a"},{"location":"lab3/Model/#_4","text":"","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/Serializers/","text":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b: \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432: class ItemsSerializer(serializers.ModelSerializer): class Meta: model = Item fields = '__all__' \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432: class NotFullItemsSerializer(serializers.ModelSerializer): class Meta: model = Item fields = ['name', 'item_barcode', 'measurement_unit'] \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u043c\u0438 \u043d\u043e\u043c\u0435\u0440 \u0441\u043a\u043b\u0430\u0434\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e: class NomenclatureSerializer(serializers.ModelSerializer): class Meta: model = Nomenclature fields = ['warehouse_id', 'amount'] \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u0441\u043a\u043b\u0430\u0434\u0430: class WarehouseSerializer(serializers.ModelSerializer): class Meta: model = Warehouse fields = '__all__' \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438: class ShipmentSerializer(serializers.ModelSerializer): class Meta: model = Shipment fields = ['user_id', 'item_id', 'amount', 'old_warehouse_id', 'new_warehouse_id'] \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432: class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = '__all__' \u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b: \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u043e\u043c\u0435\u043d\u043b\u043a\u0430\u0442\u0443\u0440\u0435, \u0433\u0434\u0435 \u0432\u043c\u0435\u0441\u0442\u043e item_id \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0442\u043e\u0432\u0430\u0440\u0430: class WarehouseInventorySerializer(serializers.ModelSerializer): item_id = NotFullItemsSerializer() class Meta: model = Nomenclature fields = ['item_id', 'name', 'amount'] \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u043e\u043c\u0435\u043d\u043b\u043a\u0430\u0442\u0443\u0440\u0435, \u0433\u0434\u0435 \u0432\u043c\u0435\u0441\u0442\u043e item_id \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0442\u043e\u0432\u0430\u0440\u0430, \u0430 \u0432\u043c\u0435\u0441\u0442\u043e old_warehouse_id \u0438 new_warehouse_id \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043b\u043a\u0430\u0434\u0430: class ShipmentListSerializer(serializers.ModelSerializer): item_id = NotFullItemsSerializer() old_warehouse_id = WarehouseSerializer() new_warehouse_id = WarehouseSerializer() class Meta: model = Shipment fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"lab3/Serializers/#_1","text":"","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"lab3/Serializers/#_2","text":"","title":"\u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b:"},{"location":"lab3/Serializers/#_3","text":"class ItemsSerializer(serializers.ModelSerializer): class Meta: model = Item fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432:"},{"location":"lab3/Serializers/#_4","text":"class NotFullItemsSerializer(serializers.ModelSerializer): class Meta: model = Item fields = ['name', 'item_barcode', 'measurement_unit']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432:"},{"location":"lab3/Serializers/#_5","text":"class NomenclatureSerializer(serializers.ModelSerializer): class Meta: model = Nomenclature fields = ['warehouse_id', 'amount']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u043c\u0438 \u043d\u043e\u043c\u0435\u0440 \u0441\u043a\u043b\u0430\u0434\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e:"},{"location":"lab3/Serializers/#_6","text":"class WarehouseSerializer(serializers.ModelSerializer): class Meta: model = Warehouse fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u0441\u043a\u043b\u0430\u0434\u0430:"},{"location":"lab3/Serializers/#_7","text":"class ShipmentSerializer(serializers.ModelSerializer): class Meta: model = Shipment fields = ['user_id', 'item_id', 'amount', 'old_warehouse_id', 'new_warehouse_id']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438:"},{"location":"lab3/Serializers/#_8","text":"class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432:"},{"location":"lab3/Serializers/#_9","text":"","title":"\u0421\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b:"},{"location":"lab3/Serializers/#item_id","text":"class WarehouseInventorySerializer(serializers.ModelSerializer): item_id = NotFullItemsSerializer() class Meta: model = Nomenclature fields = ['item_id', 'name', 'amount']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u043e\u043c\u0435\u043d\u043b\u043a\u0430\u0442\u0443\u0440\u0435, \u0433\u0434\u0435 \u0432\u043c\u0435\u0441\u0442\u043e item_id \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0442\u043e\u0432\u0430\u0440\u0430:"},{"location":"lab3/Serializers/#item_id-old_warehouse_id-new_warehouse_id","text":"class ShipmentListSerializer(serializers.ModelSerializer): item_id = NotFullItemsSerializer() old_warehouse_id = WarehouseSerializer() new_warehouse_id = WarehouseSerializer() class Meta: model = Shipment fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u043e\u043c\u0435\u043d\u043b\u043a\u0430\u0442\u0443\u0440\u0435, \u0433\u0434\u0435 \u0432\u043c\u0435\u0441\u0442\u043e item_id \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0442\u043e\u0432\u0430\u0440\u0430, \u0430 \u0432\u043c\u0435\u0441\u0442\u043e old_warehouse_id \u0438 new_warehouse_id \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440 \u0441\u043b\u043a\u0430\u0434\u0430:"},{"location":"lab3/Urls/","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u044b: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u0440\u043e\u0434\u043c\u0435\u0442\u0430\u0445 / \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430: path('items/', ItemAPIView.as_view()), path('items/add/', ItemCreateAPIView.as_view()), path('items/<int:pk>/', ItemDetailAPIView.as_view()), \u041f\u043e\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0445 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043a\u043b\u0430\u0434\u0430: path('warehouses/', WarehousesListAPIView.as_view()), path('warehouses/<int:pk>/', WarehouseInventoryAPIView.as_view()), \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0430\u0445, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 path('shipments/', ShipmentsListAPIView.as_view()), path('shipments/<int:pk>', ShipmentDetailAPIView.as_view()), path('shipments/<int:pk>/comments', CommentsListAPIView.as_view()), path('shipments/create/warehouse/<int:pk>', ShipmentCreateAPIView.as_view()","title":"Urls"},{"location":"lab3/Urls/#_1","text":"","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"lab3/Urls/#_2","text":"","title":"\u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u044b:"},{"location":"lab3/Urls/#_3","text":"path('items/', ItemAPIView.as_view()), path('items/add/', ItemCreateAPIView.as_view()), path('items/<int:pk>/', ItemDetailAPIView.as_view()),","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u0440\u043e\u0434\u043c\u0435\u0442\u0430\u0445 / \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430:"},{"location":"lab3/Urls/#_4","text":"path('warehouses/', WarehousesListAPIView.as_view()), path('warehouses/<int:pk>/', WarehouseInventoryAPIView.as_view()),","title":"\u041f\u043e\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043a\u043b\u0430\u0434\u0430\u0445 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043a\u043b\u0430\u0434\u0430:"},{"location":"lab3/Urls/#_5","text":"path('shipments/', ShipmentsListAPIView.as_view()), path('shipments/<int:pk>', ShipmentDetailAPIView.as_view()), path('shipments/<int:pk>/comments', CommentsListAPIView.as_view()), path('shipments/create/warehouse/<int:pk>', ShipmentCreateAPIView.as_view()","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0430\u0445, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435"},{"location":"lab3/Views/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 class ItemAPIView(generics.ListAPIView): serializer_class = ItemsSerializer queryset = Item.objects.all() \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432. class ItemDetailAPIView(APIView): def get(self, request, pk): item = Item.objects.get(pk=pk) nomenclature = Nomenclature.objects.filter(item_id=item) item_serializer = ItemsSerializer(item) nomenclature_serializer = NomenclatureSerializer(nomenclature, many=True) return Response({\"Items\": item_serializer.data, 'Nomenclature': nomenclature_serializer.data}) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435. class ItemCreateAPIView(generics.ListCreateAPIView): serializer_class = ItemsSerializer queryset = Item.objects.all() \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043a\u043b\u0430\u0434\u043e\u0432 class WarehousesListAPIView(generics.ListAPIView): serializer_class = WarehouseSerializer queryset = Warehouse.objects.all() \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043a\u043b\u0430\u0434\u043e\u0432. class WarehouseInventoryAPIView(generics.ListAPIView): serializer_class = WarehouseInventorySerializer def get_queryset(self): warehouse_id = self.kwargs.get('pk', None) queryset = Nomenclature.objects.filter(warehouse_id=warehouse_id) return queryset \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0441\u043a\u043b\u0430\u0434\u0435. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 class ShipmentsListAPIView(generics.ListAPIView): serializer_class = ShipmentListSerializer queryset = Shipment.objects.all() \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043e\u0442\u0433\u0440\u0443\u0437\u043e\u043a. class ShipmentCreateAPIView(generics.ListCreateAPIView): serializer_class = ShipmentSerializer queryset = Shipment.objects.all() def get(self, request, pk): warehouse_nom = Nomenclature.objects.filter(warehouse_id=pk) warehouse = Warehouse.objects.get(pk=pk) nomenclature_serializer = WarehouseInventorySerializer(warehouse_nom, many=True) return Response((f\"{warehouse.name} items\", nomenclature_serializer.data)) def post(self, request, pk): data = request.data.copy() nomenclature = Nomenclature.objects.filter(warehouse_id=pk, item_id=int(data['item_id'])).first() if nomenclature is None: return Response(\"No such item in warehouse\") if float(data['amount']) > nomenclature.amount: return Response(\"Not enough items in stock\") if data['old_warehouse_id'] == data['new_warehouse_id']: return Response(\"You cannot move an item to the same warehouse\") data['datetime'] = datetime.now() shipment_serializer = ShipmentSerializer(data=data) if shipment_serializer.is_valid(raise_exception=True): shipment_serializer.save() old_nomenclature = nomenclature old_nomenclature.amount -= float(data['amount']) new_nomenclature = Nomenclature.objects.filter(warehouse_id=int(data['new_warehouse_id']), item_id=int(data['item_id'])).first() if new_nomenclature is None: new_nomenclature = Nomenclature( item_id=Item.objects.get(pk=int(data['item_id'])), warehouse_id=Warehouse.objects.get(pk=int(data['new_warehouse_id'])), name=\"\", amount=float(data['amount']) ) else: new_nomenclature.amount += float(data['amount']) old_nomenclature.save() new_nomenclature.save() return Response(shipment_serializer.data) return Response(shipment_serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u0414\u043b\u044f \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430. class ShipmentDetailAPIView(generics.RetrieveAPIView): queryset = Shipment.objects.all() serializer_class = ShipmentListSerializer \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f def register_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() > 0: return redirect('/races') stats = Statistic.objects.create(user_id=racer, race_id=race_object) return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u043a\u0430\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443 def unregister_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() <= 0: return redirect('/races') stats.delete() return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443. \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0438 \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f class CommentsListAPIView(generics.ListAPIView): queryset = Comment.objects.all() serializer_class = CommentSerializer \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438","title":"Views"},{"location":"lab3/Views/#_1","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab3/Views/#_2","text":"class ItemAPIView(generics.ListAPIView): serializer_class = ItemsSerializer queryset = Item.objects.all() \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043f\u0440\u0434\u0435\u043c\u0435\u0442\u043e\u0432. class ItemDetailAPIView(APIView): def get(self, request, pk): item = Item.objects.get(pk=pk) nomenclature = Nomenclature.objects.filter(item_id=item) item_serializer = ItemsSerializer(item) nomenclature_serializer = NomenclatureSerializer(nomenclature, many=True) return Response({\"Items\": item_serializer.data, 'Nomenclature': nomenclature_serializer.data}) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435. class ItemCreateAPIView(generics.ListCreateAPIView): serializer_class = ItemsSerializer queryset = Item.objects.all() \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432"},{"location":"lab3/Views/#_3","text":"class WarehousesListAPIView(generics.ListAPIView): serializer_class = WarehouseSerializer queryset = Warehouse.objects.all() \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043a\u043b\u0430\u0434\u043e\u0432. class WarehouseInventoryAPIView(generics.ListAPIView): serializer_class = WarehouseInventorySerializer def get_queryset(self): warehouse_id = self.kwargs.get('pk', None) queryset = Nomenclature.objects.filter(warehouse_id=warehouse_id) return queryset \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0441\u043a\u043b\u0430\u0434\u0435.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043a\u043b\u0430\u0434\u043e\u0432"},{"location":"lab3/Views/#_4","text":"class ShipmentsListAPIView(generics.ListAPIView): serializer_class = ShipmentListSerializer queryset = Shipment.objects.all() \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043e\u0442\u0433\u0440\u0443\u0437\u043e\u043a. class ShipmentCreateAPIView(generics.ListCreateAPIView): serializer_class = ShipmentSerializer queryset = Shipment.objects.all() def get(self, request, pk): warehouse_nom = Nomenclature.objects.filter(warehouse_id=pk) warehouse = Warehouse.objects.get(pk=pk) nomenclature_serializer = WarehouseInventorySerializer(warehouse_nom, many=True) return Response((f\"{warehouse.name} items\", nomenclature_serializer.data)) def post(self, request, pk): data = request.data.copy() nomenclature = Nomenclature.objects.filter(warehouse_id=pk, item_id=int(data['item_id'])).first() if nomenclature is None: return Response(\"No such item in warehouse\") if float(data['amount']) > nomenclature.amount: return Response(\"Not enough items in stock\") if data['old_warehouse_id'] == data['new_warehouse_id']: return Response(\"You cannot move an item to the same warehouse\") data['datetime'] = datetime.now() shipment_serializer = ShipmentSerializer(data=data) if shipment_serializer.is_valid(raise_exception=True): shipment_serializer.save() old_nomenclature = nomenclature old_nomenclature.amount -= float(data['amount']) new_nomenclature = Nomenclature.objects.filter(warehouse_id=int(data['new_warehouse_id']), item_id=int(data['item_id'])).first() if new_nomenclature is None: new_nomenclature = Nomenclature( item_id=Item.objects.get(pk=int(data['item_id'])), warehouse_id=Warehouse.objects.get(pk=int(data['new_warehouse_id'])), name=\"\", amount=float(data['amount']) ) else: new_nomenclature.amount += float(data['amount']) old_nomenclature.save() new_nomenclature.save() return Response(shipment_serializer.data) return Response(shipment_serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u0414\u043b\u044f \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430. class ShipmentDetailAPIView(generics.RetrieveAPIView): queryset = Shipment.objects.all() serializer_class = ShipmentListSerializer \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438"},{"location":"lab3/Views/#_5","text":"def register_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() > 0: return redirect('/races') stats = Statistic.objects.create(user_id=racer, race_id=race_object) return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u043a\u0430\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"lab3/Views/#_6","text":"def unregister_for_race(request, race_id): race_object = Race.objects.get(pk=race_id) if race_object.winner_id is not None: return redirect('/races') if not request.user.is_authenticated: return redirect('/races') user = User.objects.get(pk=request.user.id) racer = Racer.objects.get(user_id=user) stats = Statistic.objects.filter(race_id=race_object) & Statistic.objects.filter(user_id=racer) if stats.count() <= 0: return redirect('/races') stats.delete() return redirect('/races/' + str(race_object.id)) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443. \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u043d\u0449\u0438\u043a\u0430 \u0438\u0437 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432 \u043d\u0430 \u0433\u043e\u043d\u043a\u0443"},{"location":"lab3/Views/#_7","text":"class CommentsListAPIView(generics.ListAPIView): queryset = Comment.objects.all() serializer_class = CommentSerializer \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0438 \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f"}]}