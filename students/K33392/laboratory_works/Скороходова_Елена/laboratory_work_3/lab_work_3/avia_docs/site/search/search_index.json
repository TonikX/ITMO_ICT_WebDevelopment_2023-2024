{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"admin/","text":"\u0410\u0434\u043c\u0438\u043d\u043a\u0430 list_display: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435. search_fields: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u0438\u0441\u043a \u0432 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435. list_filter: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c. date_hierarchy: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e \u0434\u0430\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043f\u043e\u043b\u044f \u0434\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. filter_horizontal: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 (ManyToManyField) \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438. from django.contrib import admin from .models import Airplane, Employee, CrewMember, TransitStop, Flight @admin.register(Airplane) class AirplaneAdmin(admin.ModelAdmin): list_display = ('number', 'type', 'seats', 'speed', 'carrier_company') search_fields = ('number', 'type', 'carrier_company') @admin.register(Employee) class EmployeeAdmin(admin.ModelAdmin): list_display = ('name', 'age', 'education', 'experience', 'passport_data', 'is_airport_employee') search_fields = ('name', 'passport_data') list_filter = ('is_airport_employee',) @admin.register(CrewMember) class CrewMemberAdmin(admin.ModelAdmin): list_display = ('name', 'age', 'education', 'experience', 'passport_data') search_fields = ('name', 'passport_data') @admin.register(TransitStop) class TransitStopAdmin(admin.ModelAdmin): list_display = ('airport', 'datetime') search_fields = ('airport',) date_hierarchy = 'datetime' @admin.register(Flight) class FlightAdmin(admin.ModelAdmin): list_display = ( 'flight_number', 'departure_airport', 'destination_airport', 'departure_datetime', 'arrival_datetime', 'sold_tickets') search_fields = ('flight_number', 'departure_airport', 'destination_airport') date_hierarchy = 'departure_datetime' filter_horizontal = ('transit_stops',)","title":"Admin"},{"location":"admin/#_1","text":"list_display: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435. search_fields: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u0438\u0441\u043a \u0432 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435. list_filter: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c. date_hierarchy: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e \u0434\u0430\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043f\u043e\u043b\u044f \u0434\u0430\u0442 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. filter_horizontal: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 (ManyToManyField) \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438. from django.contrib import admin from .models import Airplane, Employee, CrewMember, TransitStop, Flight @admin.register(Airplane) class AirplaneAdmin(admin.ModelAdmin): list_display = ('number', 'type', 'seats', 'speed', 'carrier_company') search_fields = ('number', 'type', 'carrier_company') @admin.register(Employee) class EmployeeAdmin(admin.ModelAdmin): list_display = ('name', 'age', 'education', 'experience', 'passport_data', 'is_airport_employee') search_fields = ('name', 'passport_data') list_filter = ('is_airport_employee',) @admin.register(CrewMember) class CrewMemberAdmin(admin.ModelAdmin): list_display = ('name', 'age', 'education', 'experience', 'passport_data') search_fields = ('name', 'passport_data') @admin.register(TransitStop) class TransitStopAdmin(admin.ModelAdmin): list_display = ('airport', 'datetime') search_fields = ('airport',) date_hierarchy = 'datetime' @admin.register(Flight) class FlightAdmin(admin.ModelAdmin): list_display = ( 'flight_number', 'departure_airport', 'destination_airport', 'departure_datetime', 'arrival_datetime', 'sold_tickets') search_fields = ('flight_number', 'departure_airport', 'destination_airport') date_hierarchy = 'departure_datetime' filter_horizontal = ('transit_stops',)","title":"\u0410\u0434\u043c\u0438\u043d\u043a\u0430"},{"location":"models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0411\u044b\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u0421\u0430\u043c\u043e\u043b\u0435\u0442 (\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430), \u041f\u043e\u043b\u0435\u0442\u044b (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u0435\u0442\u0435: \u0434\u0430\u0442\u044b \u0432\u044b\u043b\u0435\u0442\u043e\u0432 \u0438 \u043f\u0440\u0438\u043b\u0435\u0442\u043e\u0432, \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u043d\u044b\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438), \u0427\u043b\u0435\u043d \u044d\u043a\u0438\u043f\u0430\u0436\u0430 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u043d\u0438\u044f \u043e\u0431 \u0438\u043c\u0435\u043d\u0438, \u043e\u043f\u044b\u0442\u0435, \u043f\u0430\u0441\u043f\u043e\u0440\u0442), \u0422\u0440\u0430\u043d\u0437\u0438\u0442\u043d\u0430\u044f \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0435 \u0438 \u0434\u0430\u0442\u044b \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0430) \u0438 \u0420\u0430\u0431\u043e\u0442\u043d\u0438\u043a (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430) transit_stops: \u041c\u043d\u043e\u0433\u0438\u0435 \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a \u043c\u043e\u0434\u0435\u043b\u0438 TransitStop \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a. from django.db import models class Airplane(models.Model): number = models.CharField(max_length=50) type = models.CharField(max_length=50) seats = models.PositiveIntegerField() speed = models.FloatField() carrier_company = models.CharField(max_length=50) class Flight(models.Model): flight_number = models.CharField(max_length=50) distance = models.FloatField() departure_airport = models.CharField(max_length=50) destination_airport = models.CharField(max_length=50) departure_datetime = models.DateTimeField() arrival_datetime = models.DateTimeField() transit_stops = models.ManyToManyField('TransitStop', blank=True) sold_tickets = models.PositiveIntegerField() class CrewMember(models.Model): name = models.CharField(max_length=100) age = models.PositiveIntegerField() education = models.CharField(max_length=100) experience = models.PositiveIntegerField() passport_data = models.CharField(max_length=50) class TransitStop(models.Model): airport = models.CharField(max_length=50) datetime = models.DateTimeField() class Employee(models.Model): name = models.CharField(max_length=100) age = models.PositiveIntegerField() education = models.CharField(max_length=100) experience = models.PositiveIntegerField() passport_data = models.CharField(max_length=50) is_airport_employee = models.BooleanField(default=False)","title":"Models"},{"location":"models/#_1","text":"\u0411\u044b\u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u0421\u0430\u043c\u043e\u043b\u0435\u0442 (\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430), \u041f\u043e\u043b\u0435\u0442\u044b (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u0435\u0442\u0435: \u0434\u0430\u0442\u044b \u0432\u044b\u043b\u0435\u0442\u043e\u0432 \u0438 \u043f\u0440\u0438\u043b\u0435\u0442\u043e\u0432, \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u043d\u044b\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438), \u0427\u043b\u0435\u043d \u044d\u043a\u0438\u043f\u0430\u0436\u0430 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u043d\u0438\u044f \u043e\u0431 \u0438\u043c\u0435\u043d\u0438, \u043e\u043f\u044b\u0442\u0435, \u043f\u0430\u0441\u043f\u043e\u0440\u0442), \u0422\u0440\u0430\u043d\u0437\u0438\u0442\u043d\u0430\u044f \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0435 \u0438 \u0434\u0430\u0442\u044b \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u0430) \u0438 \u0420\u0430\u0431\u043e\u0442\u043d\u0438\u043a (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430) transit_stops: \u041c\u043d\u043e\u0433\u0438\u0435 \u043a\u043e \u043c\u043d\u043e\u0433\u0438\u043c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a \u043c\u043e\u0434\u0435\u043b\u0438 TransitStop \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0438\u0442\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a. from django.db import models class Airplane(models.Model): number = models.CharField(max_length=50) type = models.CharField(max_length=50) seats = models.PositiveIntegerField() speed = models.FloatField() carrier_company = models.CharField(max_length=50) class Flight(models.Model): flight_number = models.CharField(max_length=50) distance = models.FloatField() departure_airport = models.CharField(max_length=50) destination_airport = models.CharField(max_length=50) departure_datetime = models.DateTimeField() arrival_datetime = models.DateTimeField() transit_stops = models.ManyToManyField('TransitStop', blank=True) sold_tickets = models.PositiveIntegerField() class CrewMember(models.Model): name = models.CharField(max_length=100) age = models.PositiveIntegerField() education = models.CharField(max_length=100) experience = models.PositiveIntegerField() passport_data = models.CharField(max_length=50) class TransitStop(models.Model): airport = models.CharField(max_length=50) datetime = models.DateTimeField() class Employee(models.Model): name = models.CharField(max_length=100) age = models.PositiveIntegerField() education = models.CharField(max_length=100) experience = models.PositiveIntegerField() passport_data = models.CharField(max_length=50) is_airport_employee = models.BooleanField(default=False)","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"serializers/","text":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0411\u044b\u043b\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 JSON \u0434\u043b\u044f \u0438\u0445 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 API. CustomTokenCreateSerializer: \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 TokenCreateSerializer \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Djoser. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 create \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u043e\u043d \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a user_id \u0438 email, \u0432 \u0442\u043e\u043a\u0435\u043d \u043f\u0435\u0440\u0435\u0434 \u0435\u0433\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c. CustomUserSerializer: \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 UserSerializer \u0438\u0437 Djoser. \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (Airplane, Flight, CrewMember, TransitStop, Employee) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 (AirplaneSerializer, FlightSerializer, CrewMemberSerializer, TransitStopSerializer, EmployeeSerializer). \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 ModelSerializer \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Django REST Framework \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. from djoser.serializers import UserSerializer from rest_framework import serializers from djoser.serializers import TokenCreateSerializer from .models import Airplane, Flight, CrewMember, TransitStop, Employee class CustomTokenCreateSerializer(TokenCreateSerializer): def create(self, validated_data): token = super().create(validated_data) user = self.user token['user_id'] = user.id token['email'] = user.email return token class CustomUserSerializer(UserSerializer): class Meta(UserSerializer.Meta): fields = ('id', 'email', 'username', 'first_name', 'last_name', 'is_active', 'date_joined') class AirplaneSerializer(serializers.ModelSerializer): class Meta: model = Airplane fields = '__all__' class FlightSerializer(serializers.ModelSerializer): class Meta: model = Flight fields = '__all__' class CrewMemberSerializer(serializers.ModelSerializer): class Meta: model = CrewMember fields = '__all__' class TransitStopSerializer(serializers.ModelSerializer): class Meta: model = TransitStop fields = '__all__' class EmployeeSerializer(serializers.ModelSerializer): class Meta: model = Employee fields = '__all__'","title":"Serializers"},{"location":"serializers/#_1","text":"\u0411\u044b\u043b\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 JSON \u0434\u043b\u044f \u0438\u0445 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 API. CustomTokenCreateSerializer: \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 TokenCreateSerializer \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Djoser. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 create \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u043e\u043d \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a user_id \u0438 email, \u0432 \u0442\u043e\u043a\u0435\u043d \u043f\u0435\u0440\u0435\u0434 \u0435\u0433\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c. CustomUserSerializer: \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 UserSerializer \u0438\u0437 Djoser. \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (Airplane, Flight, CrewMember, TransitStop, Employee) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 (AirplaneSerializer, FlightSerializer, CrewMemberSerializer, TransitStopSerializer, EmployeeSerializer). \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 ModelSerializer \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Django REST Framework \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. from djoser.serializers import UserSerializer from rest_framework import serializers from djoser.serializers import TokenCreateSerializer from .models import Airplane, Flight, CrewMember, TransitStop, Employee class CustomTokenCreateSerializer(TokenCreateSerializer): def create(self, validated_data): token = super().create(validated_data) user = self.user token['user_id'] = user.id token['email'] = user.email return token class CustomUserSerializer(UserSerializer): class Meta(UserSerializer.Meta): fields = ('id', 'email', 'username', 'first_name', 'last_name', 'is_active', 'date_joined') class AirplaneSerializer(serializers.ModelSerializer): class Meta: model = Airplane fields = '__all__' class FlightSerializer(serializers.ModelSerializer): class Meta: model = Flight fields = '__all__' class CrewMemberSerializer(serializers.ModelSerializer): class Meta: model = CrewMember fields = '__all__' class TransitStopSerializer(serializers.ModelSerializer): class Meta: model = TransitStop fields = '__all__' class EmployeeSerializer(serializers.ModelSerializer): class Meta: model = Employee fields = '__all__'","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b"},{"location":"urls/","text":"Urls \u042f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u043e\u0443\u0442\u0435\u0440\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 Url-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e ViewSet, a \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u044f\u0432\u043d\u044b\u0435 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 (\u0442\u043e\u043a\u0435\u043d\u044b, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f) routers.DefaultRouter(): \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 DefaultRouter \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Django REST Framework. DefaultRouter \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 ViewSet. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e router.register: \u041a\u0430\u0436\u0434\u044b\u0439 ViewSet \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043f\u0443\u0442\u0438 ('airplanes', 'flights', \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435) \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f. urlpatterns: \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (Airplane, Flight, CrewMember, TransitStop, Employee) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c path. \u0422\u043e\u043a\u0435\u043d\u044b (create \u0438 destroy) \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u0432\u043e\u0438 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b. urlpatterns += router.urls: URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432. \u042d\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 ViewSet \u0434\u043b\u044f airplanes, flights, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. from django.urls import path from rest_framework import routers from djoser.views import TokenCreateView, TokenDestroyView from .views import ( AirplaneDetailView, FlightDetailView, CrewMemberDetailView, TransitStopDetailView, EmployeeDetailView, UserCreateView, AirplaneViewSet, FlightViewSet, CrewMemberViewSet, TransitStopViewSet, EmployeeViewSet ) router = routers.DefaultRouter() router.register(r'airplanes', AirplaneViewSet, basename='airplane') router.register(r'flights', FlightViewSet, basename='flight') router.register(r'crewmembers', CrewMemberViewSet, basename='crewmember') router.register(r'transitstops', TransitStopViewSet, basename='transitstop') router.register(r'employees', EmployeeViewSet, basename='employee') urlpatterns = [ path('airplanes/<int:pk>/', AirplaneDetailView.as_view(), name='airplane-detail'), path('flights/<int:pk>/', FlightDetailView.as_view(), name='flight-detail'), path('crewmembers/<int:pk>/', CrewMemberDetailView.as_view(), name='crewmember-detail'), path('transitstops/<int:pk>/', TransitStopDetailView.as_view(), name='transitstop-detail'), path('employees/<int:pk>/', EmployeeDetailView.as_view(), name='employee-detail'), path('token/create/', TokenCreateView.as_view(), name='token-create'), path('token/destroy/', TokenDestroyView.as_view(), name='token-destroy'), path('register/', UserCreateView.as_view(), name='user-register'), ] urlpatterns += router.urls","title":"Urls"},{"location":"urls/#urls","text":"\u042f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u043e\u0443\u0442\u0435\u0440\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 Url-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e ViewSet, a \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e \u044f\u0432\u043d\u044b\u0435 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 (\u0442\u043e\u043a\u0435\u043d\u044b, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f) routers.DefaultRouter(): \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 DefaultRouter \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Django REST Framework. DefaultRouter \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 ViewSet. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e router.register: \u041a\u0430\u0436\u0434\u044b\u0439 ViewSet \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043f\u0443\u0442\u0438 ('airplanes', 'flights', \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435) \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f. urlpatterns: \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (Airplane, Flight, CrewMember, TransitStop, Employee) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c path. \u0422\u043e\u043a\u0435\u043d\u044b (create \u0438 destroy) \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u0432\u043e\u0438 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b. urlpatterns += router.urls: URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432. \u042d\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 URL-\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 ViewSet \u0434\u043b\u044f airplanes, flights, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. from django.urls import path from rest_framework import routers from djoser.views import TokenCreateView, TokenDestroyView from .views import ( AirplaneDetailView, FlightDetailView, CrewMemberDetailView, TransitStopDetailView, EmployeeDetailView, UserCreateView, AirplaneViewSet, FlightViewSet, CrewMemberViewSet, TransitStopViewSet, EmployeeViewSet ) router = routers.DefaultRouter() router.register(r'airplanes', AirplaneViewSet, basename='airplane') router.register(r'flights', FlightViewSet, basename='flight') router.register(r'crewmembers', CrewMemberViewSet, basename='crewmember') router.register(r'transitstops', TransitStopViewSet, basename='transitstop') router.register(r'employees', EmployeeViewSet, basename='employee') urlpatterns = [ path('airplanes/<int:pk>/', AirplaneDetailView.as_view(), name='airplane-detail'), path('flights/<int:pk>/', FlightDetailView.as_view(), name='flight-detail'), path('crewmembers/<int:pk>/', CrewMemberDetailView.as_view(), name='crewmember-detail'), path('transitstops/<int:pk>/', TransitStopDetailView.as_view(), name='transitstop-detail'), path('employees/<int:pk>/', EmployeeDetailView.as_view(), name='employee-detail'), path('token/create/', TokenCreateView.as_view(), name='token-create'), path('token/destroy/', TokenDestroyView.as_view(), name='token-destroy'), path('register/', UserCreateView.as_view(), name='user-register'), ] urlpatterns += router.urls","title":"Urls"},{"location":"views/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f UserCreateView - \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 UserCreationForm \u0438\u0437 django.contrib.auth.forms \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e auth_login. success_url \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0443\u0434\u0430 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. ViewSet \u0438 DetailView \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (Airplane, Flight, CrewMember, TransitStop, Employee) \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430: ViewSet \u0438 DetailView. ViewSet \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438. DetailView \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 queryset \u0438 serializer_class \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438. Serializer: \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 (AirplaneSerializer, FlightSerializer, CrewMemberSerializer, TransitStopSerializer, EmployeeSerializer). from rest_framework import generics, viewsets from .models import Airplane, Flight, CrewMember, TransitStop, Employee from .serializers import AirplaneSerializer, FlightSerializer, CrewMemberSerializer, TransitStopSerializer, \\ EmployeeSerializer from django.contrib.auth.forms import UserCreationForm from django.contrib.auth import login as auth_login from django.views.generic.edit import FormView from django.urls import reverse_lazy from django.http import HttpResponseRedirect class UserCreateView(FormView): template_name = 'register.html' form_class = UserCreationForm success_url = reverse_lazy('token_create') def form_valid(self, form): user = form.save() auth_login(self.request, user) return HttpResponseRedirect(self.get_success_url()) class AirplaneViewSet(viewsets.ModelViewSet): queryset = Airplane.objects.all() serializer_class = AirplaneSerializer class AirplaneDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Airplane.objects.all() serializer_class = AirplaneSerializer class FlightViewSet(viewsets.ModelViewSet): queryset = Flight.objects.all() serializer_class = FlightSerializer class FlightDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Flight.objects.all() serializer_class = FlightSerializer class CrewMemberViewSet(viewsets.ModelViewSet): queryset = CrewMember.objects.all() serializer_class = CrewMemberSerializer class CrewMemberDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = CrewMember.objects.all() serializer_class = CrewMemberSerializer class TransitStopViewSet(viewsets.ModelViewSet): queryset = TransitStop.objects.all() serializer_class = TransitStopSerializer class TransitStopDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = TransitStop.objects.all() serializer_class = TransitStopSerializer class EmployeeViewSet(viewsets.ModelViewSet): queryset = Employee.objects.all() serializer_class = EmployeeSerializer class EmployeeDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Employee.objects.all() serializer_class = EmployeeSerializer","title":"Views"},{"location":"views/#_1","text":"UserCreateView - \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 UserCreationForm \u0438\u0437 django.contrib.auth.forms \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e auth_login. success_url \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0443\u0434\u0430 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. ViewSet \u0438 DetailView \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (Airplane, Flight, CrewMember, TransitStop, Employee) \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430: ViewSet \u0438 DetailView. ViewSet \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438. DetailView \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 queryset \u0438 serializer_class \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438. Serializer: \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 (AirplaneSerializer, FlightSerializer, CrewMemberSerializer, TransitStopSerializer, EmployeeSerializer). from rest_framework import generics, viewsets from .models import Airplane, Flight, CrewMember, TransitStop, Employee from .serializers import AirplaneSerializer, FlightSerializer, CrewMemberSerializer, TransitStopSerializer, \\ EmployeeSerializer from django.contrib.auth.forms import UserCreationForm from django.contrib.auth import login as auth_login from django.views.generic.edit import FormView from django.urls import reverse_lazy from django.http import HttpResponseRedirect class UserCreateView(FormView): template_name = 'register.html' form_class = UserCreationForm success_url = reverse_lazy('token_create') def form_valid(self, form): user = form.save() auth_login(self.request, user) return HttpResponseRedirect(self.get_success_url()) class AirplaneViewSet(viewsets.ModelViewSet): queryset = Airplane.objects.all() serializer_class = AirplaneSerializer class AirplaneDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Airplane.objects.all() serializer_class = AirplaneSerializer class FlightViewSet(viewsets.ModelViewSet): queryset = Flight.objects.all() serializer_class = FlightSerializer class FlightDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Flight.objects.all() serializer_class = FlightSerializer class CrewMemberViewSet(viewsets.ModelViewSet): queryset = CrewMember.objects.all() serializer_class = CrewMemberSerializer class CrewMemberDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = CrewMember.objects.all() serializer_class = CrewMemberSerializer class TransitStopViewSet(viewsets.ModelViewSet): queryset = TransitStop.objects.all() serializer_class = TransitStopSerializer class TransitStopDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = TransitStop.objects.all() serializer_class = TransitStopSerializer class EmployeeViewSet(viewsets.ModelViewSet): queryset = Employee.objects.all() serializer_class = EmployeeSerializer class EmployeeDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Employee.objects.all() serializer_class = EmployeeSerializer","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"}]}