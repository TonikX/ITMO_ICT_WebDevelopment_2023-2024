{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP ``` public class Server { private static DatagramSocket socket; public static void main(String[] args) throws SocketException { socket = new DatagramSocket(8080); boolean running = true; byte[] buf = new byte[256]; String message = \"hello, user!\"; while (running) { DatagramPacket packet = new DatagramPacket(buf, buf.length); try { socket.receive(packet); } catch (IOException e) { throw new RuntimeException(e); } String received = new String(packet.getData(), 0, packet.getLength()); System.out.println(\"server received: \" + received); if (received.equals(\"stop\")) { running = false; } InetAddress address = packet.getAddress(); int port = packet.getPort(); buf = message.getBytes(); packet = new DatagramPacket(buf, buf.length, address, port); try { System.out.println(\"server sent: \" + new String(packet.getData(), 0, packet.getLength())); socket.send(packet); } catch (IOException e) { throw new RuntimeException(e); } } socket.close(); } } ``` ``` public class Client { private static DatagramSocket socket; private static InetAddress address; private static int port; public static void main(String[] args) throws IOException { socket = new DatagramSocket(); address = InetAddress.getByName(\"localhost\"); port = 8081; String message = \"hello, server!\"; byte[] buf = message.getBytes(); DatagramPacket packet = new DatagramPacket(buf, buf.length, address, port); System.out.println(\"client sent: \" + message); socket.send(packet); buf = new byte[1024]; packet = new DatagramPacket(buf, buf.length); socket.receive(packet); String received = new String( packet.getData(), 0, packet.getLength()); System.out.println(\"client received: \" + received); socket.close(); } } ```","title":"Task 1"},{"location":"task1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP ``` public class Server { private static DatagramSocket socket; public static void main(String[] args) throws SocketException { socket = new DatagramSocket(8080); boolean running = true; byte[] buf = new byte[256]; String message = \"hello, user!\"; while (running) { DatagramPacket packet = new DatagramPacket(buf, buf.length); try { socket.receive(packet); } catch (IOException e) { throw new RuntimeException(e); } String received = new String(packet.getData(), 0, packet.getLength()); System.out.println(\"server received: \" + received); if (received.equals(\"stop\")) { running = false; } InetAddress address = packet.getAddress(); int port = packet.getPort(); buf = message.getBytes(); packet = new DatagramPacket(buf, buf.length, address, port); try { System.out.println(\"server sent: \" + new String(packet.getData(), 0, packet.getLength())); socket.send(packet); } catch (IOException e) { throw new RuntimeException(e); } } socket.close(); } } ``` ``` public class Client { private static DatagramSocket socket; private static InetAddress address; private static int port; public static void main(String[] args) throws IOException { socket = new DatagramSocket(); address = InetAddress.getByName(\"localhost\"); port = 8081; String message = \"hello, server!\"; byte[] buf = message.getBytes(); DatagramPacket packet = new DatagramPacket(buf, buf.length, address, port); System.out.println(\"client sent: \" + message); socket.send(packet); buf = new byte[1024]; packet = new DatagramPacket(buf, buf.length); socket.receive(packet); String received = new String( packet.getData(), 0, packet.getLength()); System.out.println(\"client received: \" + received); socket.close(); } } ```","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"}]}