# Generated by Django 4.2.7 on 2023-11-14 16:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Alpinist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("surname", models.CharField(max_length=50)),
                ("phone_number", models.CharField(max_length=50)),
                ("email", models.CharField(max_length=50)),
                ("document", models.CharField(max_length=100)),
                ("birth_date", models.DateField()),
                ("address", models.CharField(max_length=100)),
                (
                    "experience_level",
                    models.CharField(
                        choices=[
                            ("Новичок", "Новичок"),
                            ("Продвинутый", "Продвинутый"),
                            ("Профи", "Профи"),
                        ],
                        max_length=11,
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Climbing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("start_date_plan", models.DateTimeField()),
                ("start_date_fact", models.DateTimeField(null=True)),
                ("finish_date_plan", models.DateTimeField()),
                ("finish_date_fact", models.DateTimeField(null=True)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("Для всех", "Для всех"),
                            ("Для продвинутых", "Для продвинутых"),
                            ("Для профи", "Для профи"),
                        ],
                        max_length=15,
                    ),
                ),
                ("succeed", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Club",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("state", models.CharField(max_length=50)),
                ("city", models.CharField(max_length=50)),
                ("contact_person", models.CharField(max_length=100)),
                ("email", models.CharField(max_length=50)),
                ("phone_number", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Mountain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("state", models.CharField(max_length=50)),
                ("area", models.CharField(max_length=50)),
                ("hight", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Participating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("succeed", models.BooleanField(default=False)),
                ("admin_confirmation", models.BooleanField(default=False)),
                (
                    "alpinist_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "climbing_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="alpinism_app.climbing",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmergensySituation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=50)),
                ("date", models.DateTimeField()),
                ("description", models.TextField()),
                (
                    "participating_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="alpinism_app.participating",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClubMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_from", models.DateTimeField()),
                ("date_to", models.DateTimeField(null=True)),
                (
                    "alpinist_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "club_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="alpinism_app.club",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="club",
            name="alpinists",
            field=models.ManyToManyField(
                through="alpinism_app.ClubMembership", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="climbing",
            name="alpinists",
            field=models.ManyToManyField(
                through="alpinism_app.Participating", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="climbing",
            name="club_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="alpinism_app.club"
            ),
        ),
        migrations.AddField(
            model_name="climbing",
            name="mountain_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="alpinism_app.mountain"
            ),
        ),
        migrations.AddField(
            model_name="alpinist",
            name="climbings",
            field=models.ManyToManyField(
                through="alpinism_app.Participating", to="alpinism_app.climbing"
            ),
        ),
        migrations.AddField(
            model_name="alpinist",
            name="clubs",
            field=models.ManyToManyField(
                through="alpinism_app.ClubMembership", to="alpinism_app.club"
            ),
        ),
        migrations.AddField(
            model_name="alpinist",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="alpinist",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
