# Generated by Django 4.2.7 on 2023-11-09 09:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import website.models.content_object


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("patronymic", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "date_joined",
                    models.DateField(default=django.utils.timezone.now, editable=False),
                ),
                (
                    "profile_info",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        default="images/alt_image.jpg",
                        null=True,
                        upload_to="images/users/",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="ContentObject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                (
                    "short_description",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "cover_picture",
                    models.ImageField(
                        default="images/alt_image.jpg",
                        null=True,
                        upload_to="images/content_object/",
                    ),
                ),
                (
                    "datetime_published",
                    models.DateTimeField(
                        default=website.models.content_object.get_curr_time_plus_interval
                    ),
                ),
                ("release_date", models.DateField(blank=True, null=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
        ),
        migrations.CreateModel(
            name="Podcast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "cover_picture",
                    models.ImageField(
                        default="images/alt_image.jpg",
                        null=True,
                        upload_to="images/podcast/",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Rubric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250, unique=True)),
                (
                    "short_description",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WhatWeDo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                (
                    "short_description",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "cover_picture",
                    models.ImageField(
                        default="images/alt_image.jpg",
                        null=True,
                        upload_to="images/what_we_do/",
                    ),
                ),
                ("external_reference_link", models.URLField(blank=True, null=True)),
                ("is_displayed", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Newspaper",
            fields=[
                (
                    "contentobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="website.contentobject",
                    ),
                ),
                (
                    "attached_file",
                    models.FileField(
                        blank=True, null=True, upload_to="files/publications"
                    ),
                ),
                ("external_reference_link", models.URLField(blank=True, null=True)),
            ],
            options={"abstract": False,},
            bases=("website.contentobject",),
        ),
        migrations.CreateModel(
            name="Newtone",
            fields=[
                (
                    "contentobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="website.contentobject",
                    ),
                ),
                (
                    "attached_file",
                    models.FileField(
                        blank=True, null=True, upload_to="files/publications"
                    ),
                ),
                ("external_reference_link", models.URLField(blank=True, null=True)),
            ],
            options={"abstract": False,},
            bases=("website.contentobject",),
        ),
        migrations.CreateModel(
            name="Favourite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="website.contentobject",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PodcastIssue",
            fields=[
                (
                    "contentobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="website.contentobject",
                    ),
                ),
                ("n_issue", models.IntegerField(unique=True)),
                ("audio_file", models.FileField(upload_to="files/podcasts/")),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="podcast_issues",
                        to="website.podcast",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("website.contentobject",),
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "contentobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="website.contentobject",
                    ),
                ),
                ("content", models.TextField()),
                (
                    "rubric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="articles",
                        to="website.rubric",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("website.contentobject",),
        ),
    ]
