{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041c\u0438\u043d\u0438\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u043e \u043d\u0430\u0443\u043a\u0438 \u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u00ab\u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e\u00bb \u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 \u00ab\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438\u00bb \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0412\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u00bb \u0410\u0432\u0442\u043e\u0440: \u041d\u0438\u043a\u0438\u0444\u043e\u0440\u043e\u0432\u0430 \u0410\u043d\u043d\u0430 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u043d\u0430 \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442: \u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0413\u0440\u0443\u043f\u043f\u0430: K33421 \u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410\u043d\u0442\u043e\u043d \u0418\u0433\u043e\u0440\u0435\u0432\u0438\u0447 \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2023","title":"Title"},{"location":"intro/","text":"\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435: \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435: Python 2.7-3.6, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python: sys, socket. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b : \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435; \u043c\u043e\u0434\u0435\u043b\u044c TCP/IP; \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP; \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430; \u0441\u043e\u043a\u0435\u0442\u044b. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432\u043a\u043b\u0430\u0434\u043a\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043e\u0442\u0447\u0435\u0442\u0430. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043f\u0430\u043f\u043a\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u043c\u0438 1-4 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0444\u0430\u0439\u043b config.py, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: HOST = '127.0.0.1' SERVER_PORT = 14900 BUFF_SIZE = 16384 \u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043d\u0443\u0436\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u0412\u044b\u0432\u043e\u0434\u044b: \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043d\u043e\u0439 \u0431\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u0432 UDP \u0438 TCP \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 \u044f\u0437\u044b\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python 3.10 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0422\u0430\u043a\u0436\u0435 \u0431\u044b\u043b \u0438\u0437\u0443\u0447\u0435\u043d \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u0435\u0440\u0432\u0435\u0440, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041f\u043e\u043c\u0438\u043c\u043e \u044d\u0442\u043e\u0433\u043e, \u0431\u044b\u043b\u0430 \u0438\u0437\u0443\u0447\u0435\u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 threading, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u0434 \u043d\u0430 Python. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 (\u043e\u0434\u0438\u043d \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043c\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432). \u0422\u0430\u043a\u0436\u0435 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u0448\u043b\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 ghost-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438 \u043a\u0430\u043a \u0438\u0445 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0442\u044c; \u0431\u044b\u043b\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socketserver (\u0444\u0430\u0439\u043b\u044b \u043d\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u044b \u043a \u043e\u0442\u0447\u0435\u0442\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0448\u0438\u043b\u0430\u0441\u044c \u043f\u0440\u043e\u0449\u0435 \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438); \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u043b\u0438\u0441\u044c HTML, JavaScript \u0438 CSS; \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0431\u044b\u043b \u043e\u0441\u0432\u043e\u0435\u043d \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 mkdocs. \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b, \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0430\u044f \u0432 \u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432, \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u0430.","title":"Intro"},{"location":"task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket from config import HOST, SERVER_PORT, BUFF_SIZE if __name__ == '__main__': server_address = (HOST, SERVER_PORT) with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as conn: # UDP conn.bind(server_address) print('Server is listening...') while True: data, client_address = conn.recvfrom(BUFF_SIZE) print(f'Received message from {client_address}: {data.decode(\"utf-8\")}') message = 'Hello, client!' conn.sendto(message.encode('utf-8'), client_address) \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket from config import HOST, SERVER_PORT, BUFF_SIZE if __name__ == '__main__': server_address = (HOST, SERVER_PORT) conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP message = 'Hello, server!' try: conn.sendto(message.encode('utf-8'), server_address) response = conn.recv(BUFF_SIZE) print(f'Received response from server: {response.decode(\"utf-8\")}') except ConnectionResetError: print(\"Server not avaliable, try again later\") conn.close() \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430, \u043a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445):","title":"Task 1"},{"location":"task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b: a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. c. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. d. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435. \u041f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - b. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0430 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0435\u0451 \u0440\u0430\u0431\u043e\u0442\u044b. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket from config import HOST, SERVER_PORT, BUFF_SIZE from math import sqrt def solve_quadratic_equation(a, b, c): \"\"\" >>> solve_quadratic_equation(1, -3, 2) (2.0, 1.0) >>> solve_quadratic_equation(1, -4, 4) (2.0, 2.0) >>> solve_quadratic_equation(0, 0, 0) '\u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u0435\u0439' >>> solve_quadratic_equation(10, 0, 1) '\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442' >>> solve_quadratic_equation(0, 0, 1) '\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442' \"\"\" if a == 0: if b == 0: if c == 0: return \"\u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u0435\u0439\" else: return \"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\" else: root = -c / b return root discriminant = b ** 2 - 4 * a * c if discriminant > 0: root1 = (-b + sqrt(discriminant)) / (2 * a) root2 = (-b - sqrt(discriminant)) / (2 * a) return root1, root2 elif discriminant == 0: root = -b / (2 * a) return root, root else: return \"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\" if __name__ == '__main__': server_address = (HOST, SERVER_PORT) with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn: # TCP conn.bind(server_address) conn.listen(10) print('Server is listening...') while True: client_conn, addr = conn.accept() print(f\"Connected by {addr}\") with client_conn: message = \"\"\"\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b a, b, c \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e (\u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0442\u043e\u0447\u043a\u0430). \u0424\u043e\u0440\u043c\u0430\u0442 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: a*x^2 + b*x + c = 0\"\"\" client_conn.sendall(message.encode('utf-8')) recieved = client_conn.recv(BUFF_SIZE) recieved = recieved.decode('utf-8') print(f'Client: {recieved}') try: try: a, b, c = map(float, recieved.split(',')) except Exception: a, b, c = map(float, recieved.split()) solution = str(solve_quadratic_equation(a, b, c)) client_conn.sendall(solution.encode('utf-8')) except Exception: client_conn.sendall(\"\u0421 \u0432\u0430\u0448\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u0430\u043a :(\".encode('utf-8')) \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket from config import HOST, SERVER_PORT, BUFF_SIZE if __name__ == '__main__': server_address = (HOST, SERVER_PORT) conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # TCP try: conn.connect(server_address) response = conn.recv(BUFF_SIZE) print(f'Server: {response.decode(\"utf-8\")}') coefficients = input() conn.sendall(coefficients.encode('utf-8')) response = conn.recv(BUFF_SIZE) print(f'Server: {response.decode(\"utf-8\")}') except ConnectionRefusedError: print(\"Server not avaliable, try again later\") conn.close() \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:","title":"Task 2"},{"location":"task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0431\u044b\u043b\u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket from config import HOST, SERVER_PORT def handle_client(client_socket): # \u043f\u0440\u043e \u0444\u043e\u0440\u043c\u0430\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: https://selectel.ru/blog/http-request/ http_response = \"\"\"HTTP/1.1 200 OK Content-Type: text/html {} \"\"\".format(html_content) client_socket.sendall(http_response.encode()) client_socket.close() if __name__ == '__main__': with open('index.html', 'r') as html_file: html_content = html_file.read() server_address = (HOST, SERVER_PORT) with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn: conn.bind(server_address) conn.listen(10) print('Server is listening...') while True: client_conn, addr = conn.accept() print(f\"Connected by {addr}\") handle_client(client_conn) \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket from config import HOST, SERVER_PORT, BUFF_SIZE if __name__ == '__main__': server_address = (HOST, SERVER_PORT) conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: conn.connect(server_address) response = conn.recv(BUFF_SIZE) print(f'Received response from server: {response.decode(\"utf-8\")}') except ConnectionRefusedError: print(\"Server not avaliable, try again later\") conn.close() \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e index.html: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Simple HTML Page</title> <style> body { font-family: Arial, sans-serif; background-color: #f2f2f2; text-align: center; padding: 100px; } h1 { color: #333; } p { color: #666; } </style> </head> <body> <h1>Hello there!</h1> <p>This is the most basic HTML-page</p> </body> </html> \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: index.html:","title":"Task 3"},{"location":"task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 (\u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432 \u0422\u0417). \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041c\u043d\u043e\u0439 \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import threading from config import HOST, SERVER_PORT, BUFF_SIZE class Server: def __init__(self, server_address): self.clients = {} # {socket: name} self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.conn.bind(server_address) self.conn.listen(10) print('Server is listening...') def get_messages(self, client_socket): while True: try: message = client_socket.recv(BUFF_SIZE).decode() print(f\"Recieved message '{message}' from {self.clients[client_socket]}\") if message: self.broadcast(client_socket, message) except (ConnectionResetError, OSError): name = self.clients[client_socket] print(f\"{name} disconnected from chat\") self.broadcast(client_socket, f\"{name} \u0432\u044b\u0448\u0435\u043b \u0438\u0437 \u0447\u0430\u0442\u0430!\", add_name=False) del self.clients[client_socket] break def broadcast(self, client_socket, message, add_name=True): name = self.clients[client_socket] for client in self.clients: if client != client_socket: if add_name: client.sendall(f\"{name}: {message}\".encode()) else: client.sendall(message.encode()) def run(self): try: while True: client_socket, addr = self.conn.accept() client_socket.sendall(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435: \".encode('utf-8')) name = client_socket.recv(BUFF_SIZE).decode('utf-8') self.clients[client_socket] = name print(f\"{name} added to chat\") self.broadcast(client_socket, f\"{name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443!\", add_name=False) threading.Thread(target=self.get_messages, args=(client_socket,)).start() except KeyboardInterrupt: self.broadcast(\"\", f\"\u0427\u0430\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d!\", add_name=False) self.clients = {} self.conn.close() print(f\"Server stopped\") if __name__ == \"__main__\": server_address = (HOST, SERVER_PORT) server = Server(server_address) server.run() \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket import threading from config import HOST, SERVER_PORT, BUFF_SIZE class Client: def __init__(self, server_address): self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: self.conn.connect(server_address) name_question = self.conn.recv(BUFF_SIZE).decode(\"utf-8\") name = input(name_question) self.name = name self.conn.sendall(name.encode('utf-8')) print(f\"\u0412\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438\u0441\u044c \u043a \u0447\u0430\u0442\u0443 \u043a\u0430\u043a {self.name}\") threading.Thread(target=self.send_messages, args=()).start() threading.Thread(target=self.recieve_messages(), args=()).start() except ConnectionRefusedError: print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0437\u0436\u0435\") def send_messages(self): while True: try: message = input() self.conn.sendall(message.encode(\"utf-8\")) except (OSError, EOFError): break def recieve_messages(self): while True: try: message = self.conn.recv(BUFF_SIZE) if not message: break print(message.decode(\"utf-8\")) except (OSError, EOFError): break if __name__ == \"__main__\": server_address = (HOST, SERVER_PORT) client = Client(server_address) \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:","title":"Task 4"},{"location":"task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d https://docs.google.com/document/d/1lv_3D9VtMxz8tNkA6rA1xu9zaWEIBGXiLWBo1cse- 0k/edit?usp=sharing \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043c\u0430\u043d\u0443\u0430\u043b \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d https://iximiuz.com/ru/posts/writing-python-web-server-part-3/ \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041c\u043e\u0439 \u043a\u043e\u0434 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043f\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442 \u043a\u043e\u0434\u0430 \u0438\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u043c\u0430\u043d\u0443\u0430\u043b\u0430 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\u043c\u0438. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket from email.parser import Parser from functools import lru_cache from urllib.parse import parse_qs, urlparse HOST = '127.0.0.1' SERVER_PORT = 14900 MAX_LINE = 64 * 1024 MAX_HEADERS = 100 HTML_STYLE = \"\"\" <style> body { font-family: Arial, sans-serif; background-color: #f2f2f2; text-align: center; padding: 100px; } h1 { color: #333; } p { color: #666; font-size: 30px; } </style> \"\"\" class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property def body(self): size = self.headers.get('Content-Length') if not size: return None content = self.rfile.read(int(size)) return content.decode('utf-8') @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def query_body(self): return parse_qs(self.body) class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, server_address): self.server_address = server_address self.conn = None self.grades = {} # {subject: [grades]} def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server_sock.bind(self.server_address) server_sock.listen(10) print(\"Server is listening...\") while True: client_socket, _ = server_sock.accept() try: self.serve_client(client_socket) except Exception as e: print('Connection failed', e) finally: server_sock.close() print(\"Server stopped\") def serve_client(self, conn): try: req = self.parse_request(conn) response = self.handle_request(req) self.send_response(conn, response) except ConnectionResetError: conn = None except Exception as e: print(\"Error\", e) if conn: conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise Exception('Request line is too long') req_line = str(raw, 'iso-8859-1') req_line = req_line.rstrip('\\r\\n') words = req_line.split() if len(words) != 3: raise Exception('Malformed request line') method, target, version = words if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') headers = self.parse_headers(rfile) host = headers.get('Host') if not host: raise Exception('Bad request') return Request(method, target, version, headers, rfile) @staticmethod def parse_headers(rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise Exception('Header line is too long') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise Exception('Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def handle_request(self, req): if req.path == '/' and req.method == 'POST': return self.handle_post(req) if req.method == 'GET': if req.path == '/add_grade': body = \"\"\"<!DOCTYPE html> <html lang=\"ru\">\"\"\" + HTML_STYLE + \"\"\" <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> </head> <script> function validateGrade() { const gradeInput = document.getElementById(\"grade\"); const gradeValue = parseInt(gradeInput.value); if (isNaN(gradeValue) || gradeValue < 1 || gradeValue > 5) { alert(\"\u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 5\"); return false; } return true; } </script> <body> <h2>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443</h2> <p> <form method=\"POST\" action=\"/\" onsubmit=\"return validateGrade()\"> <input type=\"text\" id=\"subject\" name=\"subject\" placeholder=\"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\"> <input type=\"text\" id=\"grade\" name=\"grade\" placeholder=\"\u041e\u0446\u0435\u043d\u043a\u0430\"> <input type=\"submit\" value=\"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\"> </form> </p> <form action=\"/\"> <input type=\"submit\" value=\"\u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e\"/> </form> </body> \"\"\" return self.handle_get(body) elif req.path == '/': return self.handle_get() content = \"\"\"<!DOCTYPE html> <html lang=\"ru\">\"\"\" + HTML_STYLE + \"\"\" <body> <h2>\u0422\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0435\u0442 :(</h2> <form action=\"/\"> <input type=\"submit\" value=\"\u041d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e\"/> </form> </body> </html> \"\"\" return self.handle_get(content) def handle_get(self, body=None): content_type = 'text/html; charset=utf-8' if body is None: body = \"\"\" <!DOCTYPE html> <html lang=\"ru\">\"\"\" + HTML_STYLE + \"\"\" <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> </head> <body> <h2>\u0412\u0430\u0448\u0438 \u043e\u0446\u0435\u043d\u043a\u0438</h2> <table style=\"border-collapse: collapse; width: 70%;\" align=\"center\"> <tr> <th style=\"border: 1px solid black; padding: 4px;\">\u041f\u0440\u0435\u0434\u043c\u0435\u0442</th> <th style=\"border: 1px solid black; padding: 4px;\">\u041e\u0446\u0435\u043d\u043a\u0430</th> </tr> \"\"\" for subject, grades in self.grades.items(): for grade in grades: body += f\"\"\" <tr> <td style=\"border: 1px solid black; padding: 4px;\">{subject}</td> <td style=\"border: 1px solid black; padding: 4px;\">{grade}</td> </tr> \"\"\" body += \"\"\" </table> <form action=\"/add_grade\" style=\"padding: 10px;\"> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"/> </form> </body> </html> \"\"\" body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, req): subject = req.query_body['subject'][0] grade = req.query_body['grade'][0] try: self.grades[subject].append(grade) except KeyError: self.grades[subject] = [grade] return self.handle_get() @staticmethod def send_response(conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() if __name__ == '__main__': server_address = (HOST, SERVER_PORT) my_server = MyHTTPServer(server_address) my_server.serve_forever() \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438: \u041f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438: \u0427\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0446\u0435\u043d\u043e\u043a: \u041d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430:","title":"Task 5"}]}