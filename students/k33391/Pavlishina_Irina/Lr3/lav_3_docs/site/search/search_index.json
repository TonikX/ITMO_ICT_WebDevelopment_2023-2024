{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u043e\u0441\u043d\u043e\u0432\u044b web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","title":"Home"},{"location":"#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"#web-","text":"","title":"\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u043e\u0441\u043d\u043e\u0432\u044b web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"first/","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f/\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0412 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 settings.py, \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 'rest_framework', 'rest_framework.authtoken', 'drf_spectacular', 'rest_framework_simplejwt', \"corsheaders\", # 'system.apps.SystemConfig' ] \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0418: AUTH_PROFILE_MODULE = 'system.CustomUser' AUTH_USER_MODEL = 'system.CustomUser' \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043c\u043e\u0434\u0435\u043b\u0438 \u044e\u0437\u0435\u0440\u0430. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u0439\u043e\u043a\u0438 jwt-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.SessionAuthentication', 'rest_framework_simplejwt.authentication.JWTAuthentication', ], 'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', } SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1), 'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1), } \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u043b\u044f \u044e\u0440\u043b-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0441\u0432\u0430\u0433\u0433\u0435\u0440\u0430 urlpatterns = [ path('admin/', admin.site.urls), path('system/', include('system.urls')), path('api/schema/', SpectacularAPIView.as_view(), name='schema'), path('api/swagger/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'), ] urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"},{"location":"first/#_1","text":"\u0412 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 settings.py, \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 'rest_framework', 'rest_framework.authtoken', 'drf_spectacular', 'rest_framework_simplejwt', \"corsheaders\", # 'system.apps.SystemConfig' ] \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0418: AUTH_PROFILE_MODULE = 'system.CustomUser' AUTH_USER_MODEL = 'system.CustomUser' \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043c\u043e\u0434\u0435\u043b\u0438 \u044e\u0437\u0435\u0440\u0430. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u0439\u043e\u043a\u0438 jwt-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.SessionAuthentication', 'rest_framework_simplejwt.authentication.JWTAuthentication', ], 'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', } SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1), 'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1), } \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u043b\u044f \u044e\u0440\u043b-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0441\u0432\u0430\u0433\u0433\u0435\u0440\u0430 urlpatterns = [ path('admin/', admin.site.urls), path('system/', include('system.urls')), path('api/schema/', SpectacularAPIView.as_view(), name='schema'), path('api/swagger/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'), ] urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f/\u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"fith/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b from rest_framework.routers import SimpleRouter from . import views from django.urls import path, include \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432 router = SimpleRouter() router.register('newspaper', views.NewspaperViewSet) router.register('printer', views.PrinterViewSet) router.register('post-office', views.PostOfficeViewSet) router.register('printing-newspapers', views.PrintingNewspaperViewSet) router.register('ordering-newspapers', views.PostOfficeOrderViewSet) router.register('transporting', views.TransportationViewSet) router.register('do', views.ActionViewSet, basename='action') urlpatterns = [ path('register/', views.RegistrationView.as_view(), name='register'), path('login/', views.LoginView.as_view(), name='login'), path('logout/', views.LogoutView.as_view(), name='logout'), path('change-password/<int:pk>/', views.ChangePasswordView.as_view(), name='change-password'), path('', include(router.urls)), ]","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"fith/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"fith/#_2","text":"from rest_framework.routers import SimpleRouter from . import views from django.urls import path, include","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"fith/#_3","text":"router = SimpleRouter() router.register('newspaper', views.NewspaperViewSet) router.register('printer', views.PrinterViewSet) router.register('post-office', views.PostOfficeViewSet) router.register('printing-newspapers', views.PrintingNewspaperViewSet) router.register('ordering-newspapers', views.PostOfficeOrderViewSet) router.register('transporting', views.TransportationViewSet) router.register('do', views.ActionViewSet, basename='action') urlpatterns = [ path('register/', views.RegistrationView.as_view(), name='register'), path('login/', views.LoginView.as_view(), name='login'), path('logout/', views.LogoutView.as_view(), name='logout'), path('change-password/<int:pk>/', views.ChangePasswordView.as_view(), name='change-password'), path('', include(router.urls)), ]","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432"},{"location":"forth/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0418\u043c\u043f\u043e\u0440\u0442\u044b from rest_framework.viewsets import ModelViewSet, ViewSet from rest_framework.decorators import action from drf_spectacular.utils import extend_schema, OpenApiTypes from rest_framework.permissions import SAFE_METHODS from . import serializers from .utils import get_tokens_for_user from django.contrib.auth import authenticate, login, logout from rest_framework import status from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import generics from django.db.models import Sum from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f class RegistrationView(generics.CreateAPIView): serializer_class = serializers.RegistrationSerializer queryset = CustomUser.objects.all() class LoginView(generics.GenericAPIView): serializer_class = serializers.LoginSerializer queryset = CustomUser.objects.all() def post(self, request): if 'username' not in request.data or 'password' not in request.data: return Response({'msg': 'Credentials missing'}, status=status.HTTP_400_BAD_REQUEST) username = request.data.get(\"username\", None) password = request.data.get(\"password\", None) print(username, password) if username is not None and password is not None: user = authenticate(request, username=username, password=password) if user is not None: login(request, user) auth_data = get_tokens_for_user(request.user) return Response({'msg': 'Login Success', **auth_data}, status=status.HTTP_200_OK) return Response({'msg': 'Invalid Credentials'}, status=status.HTTP_401_UNAUTHORIZED) class LogoutView(APIView): serializer_class = serializers.LogoutSerializer queryset = CustomUser.objects.all() def post(self, request): logout(request) return Response({'msg': 'Successfully Logged out'}, status=status.HTTP_200_OK) class ChangePasswordView(generics.GenericAPIView): serializer_class = serializers.PasswordChangeSerializer queryset = CustomUser.objects.all() permission_classes = (IsAuthenticated,) def post(self, request): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) request.user.set_password(serializer.validated_data['new_password']) request.user.save() return Response(status=status.HTTP_204_NO_CONTENT) \u0413\u0430\u0437\u0435\u0442\u0430 class NewspaperViewSet(ModelViewSet): queryset = Newspaper.objects.all() serializer_class = serializers.NewspaperSerializer \u041f\u043e\u0447\u0442\u0430 class PostOfficeViewSet(ModelViewSet): queryset = PostOffice.objects.all() serializer_class = serializers.PostOfficeSerializer \u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f class PrinterViewSet(ModelViewSet): queryset = Printer.objects.all() serializer_class = serializers.PrinterSerializer \u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b class PrintingNewspaperViewSet(ModelViewSet): queryset = PrintingNewspaper.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPrintingNewspaperSerializer return serializers.PrintingNewspaperSerializer \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b class PostOfficeOrderViewSet(ModelViewSet): queryset = PostOfficeOrder.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPostOfficeOrderSerializer return serializers.PostOfficeOrderSerializer \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 class TransportationViewSet(ModelViewSet): queryset = Transportation.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowTransportationSerializer return serializers.TransportationSerializer \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f class ActionViewSet(ViewSet): @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='more-expensive-newspapers') def by_cost(self, request): cost = float(list(request.data.keys())[0]) gazettes = Newspaper.objects.filter(cost__gt=cost) qs = PostOfficeOrder.objects.filter(newspaper__in=gazettes) ser = serializers.ShowPostOfficeOrderSerializer(qs, many=True) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses=serializers.ShowLossSerializer) @action(detail=False, methods=['GET'], url_path='lost-delivers') def errors(self, request, pk=None): qs = Transportation.objects.none() context = {} for obj in PostOffice.objects.all(): for journal in PostOfficeOrder.objects.filter(post_office=obj.id): sum = Transportation.objects.filter(post_office_order__post=obj.id, post_office_order_newspaper=journal.id).aggregate(Sum('amount')) if sum['amount__sum'] < journal.amount: qs |= PostOfficeOrder.objects.filter(id=journal.id) context[journal.id] = sum ser = serializers.ShowLossSerializer(qs, many=True, context=context) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='find-addresses') def find_by_name(self, request): name = list(request.data.keys())[0] qs = PrintingNewspaper.objects.filter(newspaper__name=name) ser = serializers.ShowPrintingAddreses(qs, many=True) return Response(data=ser.data, status=status.HTTP_200_OK) @extend_schema(request=serializers.FindTransportationsSerializers, responses=serializers.ShowTransportEndSerializer) @action(detail=False, methods=['POST'], url_path='where-to-sell') def where_to_sell(self, request): name = request.data['name'] address = request.data['where_printed'] gip = PrintingNewspaper.objects.filter(newspaper__name=name, printer__address=address).first() obj = Transportation.objects.filter(printing_newspaper=gip.id).first() ser = serializers.ShowTransportEndSerializer(obj) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses={ 'most-sold-redactor': serializers.ShowRedactor, 'printed_here': OpenApiTypes.INT, 'show_printed': serializers.ShowPrintingNewspaperSerializer(many=True), 'where-to-sell': serializers.ShowTransportEndSerializer(many=True) }) @action(detail=True, methods=['GET'], url_path='report') def redactor(self, request, pk=None): data = {} obj = PrintingNewspaper.objects.filter(printer=pk).order_by('-how_many_to_print').first() if obj: ser = serializers.ShowRedactor(obj.newspaper) data['most-sold-redactor'] = ser.data else: data['most-sold-redactor'] = {} qs = PrintingNewspaper.objects.filter(printer=pk) data['printed_here'] = qs.count() ser = serializers.ShowPrintingNewspaperSerializer(qs, many=True) data['show_printed'] = ser.data ts = Transportation.objects.filter(printing_newspaper__in=qs) ser = serializers.ShowTransportEndSerializer(ts, many=True) data['where-to-sell'] = ser.data return Response(data, status=status.HTTP_200_OK)","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"forth/#_1","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"forth/#_2","text":"from rest_framework.viewsets import ModelViewSet, ViewSet from rest_framework.decorators import action from drf_spectacular.utils import extend_schema, OpenApiTypes from rest_framework.permissions import SAFE_METHODS from . import serializers from .utils import get_tokens_for_user from django.contrib.auth import authenticate, login, logout from rest_framework import status from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import generics from django.db.models import Sum from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation)","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"forth/#_3","text":"class RegistrationView(generics.CreateAPIView): serializer_class = serializers.RegistrationSerializer queryset = CustomUser.objects.all() class LoginView(generics.GenericAPIView): serializer_class = serializers.LoginSerializer queryset = CustomUser.objects.all() def post(self, request): if 'username' not in request.data or 'password' not in request.data: return Response({'msg': 'Credentials missing'}, status=status.HTTP_400_BAD_REQUEST) username = request.data.get(\"username\", None) password = request.data.get(\"password\", None) print(username, password) if username is not None and password is not None: user = authenticate(request, username=username, password=password) if user is not None: login(request, user) auth_data = get_tokens_for_user(request.user) return Response({'msg': 'Login Success', **auth_data}, status=status.HTTP_200_OK) return Response({'msg': 'Invalid Credentials'}, status=status.HTTP_401_UNAUTHORIZED) class LogoutView(APIView): serializer_class = serializers.LogoutSerializer queryset = CustomUser.objects.all() def post(self, request): logout(request) return Response({'msg': 'Successfully Logged out'}, status=status.HTTP_200_OK) class ChangePasswordView(generics.GenericAPIView): serializer_class = serializers.PasswordChangeSerializer queryset = CustomUser.objects.all() permission_classes = (IsAuthenticated,) def post(self, request): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) request.user.set_password(serializer.validated_data['new_password']) request.user.save() return Response(status=status.HTTP_204_NO_CONTENT)","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f"},{"location":"forth/#_4","text":"class NewspaperViewSet(ModelViewSet): queryset = Newspaper.objects.all() serializer_class = serializers.NewspaperSerializer","title":"\u0413\u0430\u0437\u0435\u0442\u0430"},{"location":"forth/#_5","text":"class PostOfficeViewSet(ModelViewSet): queryset = PostOffice.objects.all() serializer_class = serializers.PostOfficeSerializer","title":"\u041f\u043e\u0447\u0442\u0430"},{"location":"forth/#_6","text":"class PrinterViewSet(ModelViewSet): queryset = Printer.objects.all() serializer_class = serializers.PrinterSerializer","title":"\u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f"},{"location":"forth/#_7","text":"class PrintingNewspaperViewSet(ModelViewSet): queryset = PrintingNewspaper.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPrintingNewspaperSerializer return serializers.PrintingNewspaperSerializer","title":"\u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b"},{"location":"forth/#_8","text":"class PostOfficeOrderViewSet(ModelViewSet): queryset = PostOfficeOrder.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPostOfficeOrderSerializer return serializers.PostOfficeOrderSerializer","title":"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b"},{"location":"forth/#_9","text":"class TransportationViewSet(ModelViewSet): queryset = Transportation.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowTransportationSerializer return serializers.TransportationSerializer","title":"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430"},{"location":"forth/#_10","text":"class ActionViewSet(ViewSet): @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='more-expensive-newspapers') def by_cost(self, request): cost = float(list(request.data.keys())[0]) gazettes = Newspaper.objects.filter(cost__gt=cost) qs = PostOfficeOrder.objects.filter(newspaper__in=gazettes) ser = serializers.ShowPostOfficeOrderSerializer(qs, many=True) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses=serializers.ShowLossSerializer) @action(detail=False, methods=['GET'], url_path='lost-delivers') def errors(self, request, pk=None): qs = Transportation.objects.none() context = {} for obj in PostOffice.objects.all(): for journal in PostOfficeOrder.objects.filter(post_office=obj.id): sum = Transportation.objects.filter(post_office_order__post=obj.id, post_office_order_newspaper=journal.id).aggregate(Sum('amount')) if sum['amount__sum'] < journal.amount: qs |= PostOfficeOrder.objects.filter(id=journal.id) context[journal.id] = sum ser = serializers.ShowLossSerializer(qs, many=True, context=context) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='find-addresses') def find_by_name(self, request): name = list(request.data.keys())[0] qs = PrintingNewspaper.objects.filter(newspaper__name=name) ser = serializers.ShowPrintingAddreses(qs, many=True) return Response(data=ser.data, status=status.HTTP_200_OK) @extend_schema(request=serializers.FindTransportationsSerializers, responses=serializers.ShowTransportEndSerializer) @action(detail=False, methods=['POST'], url_path='where-to-sell') def where_to_sell(self, request): name = request.data['name'] address = request.data['where_printed'] gip = PrintingNewspaper.objects.filter(newspaper__name=name, printer__address=address).first() obj = Transportation.objects.filter(printing_newspaper=gip.id).first() ser = serializers.ShowTransportEndSerializer(obj) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses={ 'most-sold-redactor': serializers.ShowRedactor, 'printed_here': OpenApiTypes.INT, 'show_printed': serializers.ShowPrintingNewspaperSerializer(many=True), 'where-to-sell': serializers.ShowTransportEndSerializer(many=True) }) @action(detail=True, methods=['GET'], url_path='report') def redactor(self, request, pk=None): data = {} obj = PrintingNewspaper.objects.filter(printer=pk).order_by('-how_many_to_print').first() if obj: ser = serializers.ShowRedactor(obj.newspaper) data['most-sold-redactor'] = ser.data else: data['most-sold-redactor'] = {} qs = PrintingNewspaper.objects.filter(printer=pk) data['printed_here'] = qs.count() ser = serializers.ShowPrintingNewspaperSerializer(qs, many=True) data['show_printed'] = ser.data ts = Transportation.objects.filter(printing_newspaper__in=qs) ser = serializers.ShowTransportEndSerializer(ts, many=True) data['where-to-sell'] = ser.data return Response(data, status=status.HTTP_200_OK)","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"second/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django.db import models from django.contrib.auth.models import AbstractUser, BaseUserManager \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u044e\u0437\u0435\u0440\u043e\u043c class CustomUserManager(BaseUserManager): def create_user(self, username, type, password): user = self.model( username=username, type=type, ) user.set_password(password) user.save(using=self._db) return user def create_superuser(self, username, type, password): user = self.model( username=username, type='A', password=password ) user.is_admin = True user.save(using=self._db) return user class CustomUser(AbstractUser): id = models.BigAutoField(primary_key=True) type = models.TextField(choices=(('A', 'A'), ('P', 'P'), ('PO', 'PO'), ('N', 'N'))) is_active = models.BooleanField(default=True) is_admin = models.BooleanField(default=False) linkedin_token = models.TextField(blank=True, default='') USERNAME_FIELD = 'username' objects = CustomUserManager() REQUIRED_FIELDS = ['type'] def __str__(self): return self.username def has_perm(self, perm, obj=None): return True def has_module_perms(self, app_label): return True @property def is_staff(self): \"Is the user a member of staff?\" return self.is_admin \u0413\u0430\u0437\u0435\u0442\u0430 class Newspaper(models.Model): name = models.CharField(max_length=500) index = models.CharField(max_length=100) redactor_last_name = models.CharField(max_length=100) redactor_first_name = models.CharField(max_length=100) redactor_patronic = models.CharField(max_length=100) cost = models.FloatField() \u041f\u043e\u0447\u0442\u0430 class PostOffice(models.Model): num = models.CharField(max_length=100) address = models.CharField(max_length=500) \u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f class Printer(models.Model): name = models.CharField(max_length=100) address = models.CharField(max_length=500) max_capacity = models.IntegerField() \u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b class PrintingNewspaper(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='where_to_print', on_delete=models.CASCADE) printer = models.ForeignKey('system.Printer', related_name='what_is_printed', on_delete=models.CASCADE) how_many_to_print = models.IntegerField() \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b class PostOfficeOrder(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='needed_in', on_delete=models.CASCADE) post_office = models.ForeignKey('system.PostOffice', related_name='what_is_needed', on_delete=models.CASCADE) how_many_needed = models.IntegerField() \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 class Transportation(models.Model): printing_newspaper = models.ForeignKey('system.PrintingNewspaper', related_name='printed_for', on_delete=models.CASCADE) post_office_order = models.ForeignKey('system.PostOfficeOrder', related_name='printed_by', on_delete=models.CASCADE) amount = models.IntegerField()","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"second/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"second/#_2","text":"from django.db import models from django.contrib.auth.models import AbstractUser, BaseUserManager","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"second/#_3","text":"class CustomUserManager(BaseUserManager): def create_user(self, username, type, password): user = self.model( username=username, type=type, ) user.set_password(password) user.save(using=self._db) return user def create_superuser(self, username, type, password): user = self.model( username=username, type='A', password=password ) user.is_admin = True user.save(using=self._db) return user class CustomUser(AbstractUser): id = models.BigAutoField(primary_key=True) type = models.TextField(choices=(('A', 'A'), ('P', 'P'), ('PO', 'PO'), ('N', 'N'))) is_active = models.BooleanField(default=True) is_admin = models.BooleanField(default=False) linkedin_token = models.TextField(blank=True, default='') USERNAME_FIELD = 'username' objects = CustomUserManager() REQUIRED_FIELDS = ['type'] def __str__(self): return self.username def has_perm(self, perm, obj=None): return True def has_module_perms(self, app_label): return True @property def is_staff(self): \"Is the user a member of staff?\" return self.is_admin","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u044e\u0437\u0435\u0440\u043e\u043c"},{"location":"second/#_4","text":"class Newspaper(models.Model): name = models.CharField(max_length=500) index = models.CharField(max_length=100) redactor_last_name = models.CharField(max_length=100) redactor_first_name = models.CharField(max_length=100) redactor_patronic = models.CharField(max_length=100) cost = models.FloatField()","title":"\u0413\u0430\u0437\u0435\u0442\u0430"},{"location":"second/#_5","text":"class PostOffice(models.Model): num = models.CharField(max_length=100) address = models.CharField(max_length=500)","title":"\u041f\u043e\u0447\u0442\u0430"},{"location":"second/#_6","text":"class Printer(models.Model): name = models.CharField(max_length=100) address = models.CharField(max_length=500) max_capacity = models.IntegerField()","title":"\u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f"},{"location":"second/#_7","text":"class PrintingNewspaper(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='where_to_print', on_delete=models.CASCADE) printer = models.ForeignKey('system.Printer', related_name='what_is_printed', on_delete=models.CASCADE) how_many_to_print = models.IntegerField()","title":"\u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b"},{"location":"second/#_8","text":"class PostOfficeOrder(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='needed_in', on_delete=models.CASCADE) post_office = models.ForeignKey('system.PostOffice', related_name='what_is_needed', on_delete=models.CASCADE) how_many_needed = models.IntegerField()","title":"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b"},{"location":"second/#_9","text":"class Transportation(models.Model): printing_newspaper = models.ForeignKey('system.PrintingNewspaper', related_name='printed_for', on_delete=models.CASCADE) post_office_order = models.ForeignKey('system.PostOfficeOrder', related_name='printed_by', on_delete=models.CASCADE) amount = models.IntegerField()","title":"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430"},{"location":"third/","text":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0418\u043f\u043c\u043f\u043e\u0440\u0442\u044b from rest_framework import serializers from drf_spectacular.utils import extend_schema_field, OpenApiTypes from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f class RegistrationSerializer(serializers.ModelSerializer): password2 = serializers.CharField(style={\"input_type\": \"password\"}, write_only=True) class Meta: model = CustomUser fields = ['username', 'type', 'password', 'password2'] extra_kwargs = { 'password': {'write_only': True} } def validate(self, attrs): password = attrs.get('password') password2 = attrs.pop('password2') if password != password2: raise serializers.ValidationError(\"Password and Confirm Password Does not match\") return attrs def create(self, validate_data): return CustomUser.objects.create_user(**validate_data) class LoginSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = ['username', 'password',] class LogoutSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = [] class PasswordChangeSerializer(serializers.ModelSerializer): current_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) new_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) class Meta: model = CustomUser fields = ['current_password', 'new_password'] def validate_current_password(self, value): if not self.context['request'].user.check_password(value): raise serializers.ValidationError({'current_password': 'Does not match'}) return value \u0413\u0430\u0437\u0435\u0442\u0430 class NewspaperSerializer(serializers.ModelSerializer): class Meta: model = Newspaper fields = '__all__' \u041f\u043e\u0447\u0442\u0430 class PostOfficeSerializer(serializers.ModelSerializer): class Meta: model = PostOffice fields = '__all__' \u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f class PrinterSerializer(serializers.ModelSerializer): class Meta: model = Printer fields = '__all__' \u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b class PrintingNewspaperSerializer(serializers.ModelSerializer): class Meta: model = PrintingNewspaper fields = '__all__' class ShowPrintingNewspaperSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) printer = PrinterSerializer(read_only=True) class Meta: model = PrintingNewspaper fields = ['id', 'newspaper', 'printer', 'how_many_to_print'] \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b class PostOfficeOrderSerializer(serializers.ModelSerializer): class Meta: model = PostOfficeOrder fields = '__all__' class ShowPostOfficeOrderSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed'] \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 class TransportationSerializer(serializers.ModelSerializer): class Meta: model = Transportation fields = '__all__' class ShowTransportationSerializer(serializers.ModelSerializer): printing_newspaper = ShowPrintingNewspaperSerializer(read_only=True) post_office_order = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['id', 'printing_newspaper', 'post_office_order', 'amount'] \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 class ShowLossSerializer(serializers.ModelSerializer): have = serializers.SerializerMethodField() newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed', 'have'] @extend_schema_field(OpenApiTypes.INT) def get_have(self, obj): return self.context[obj.id]['amount__sum'] class ShowRedactor(serializers.ModelSerializer): class Meta: model = Newspaper fields = ['redactor_last_name', 'redactor_first_name', 'redactor_patronic'] class ShowPrintingAddreses(serializers.ModelSerializer): address = serializers.CharField(source='printer.address') class Meta: model = PrintingNewspaper fields = ['address'] class FindTransportationsSerializers(serializers.Serializer): name = serializers.CharField() where_printed = serializers.CharField() class Meta: fields = ['name', 'where_printed'] class ShowTransportEndSerializer(serializers.ModelSerializer): post_needed = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['post_needed']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"third/#_1","text":"","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"third/#_2","text":"from rest_framework import serializers from drf_spectacular.utils import extend_schema_field, OpenApiTypes from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation)","title":"\u0418\u043f\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"third/#_3","text":"class RegistrationSerializer(serializers.ModelSerializer): password2 = serializers.CharField(style={\"input_type\": \"password\"}, write_only=True) class Meta: model = CustomUser fields = ['username', 'type', 'password', 'password2'] extra_kwargs = { 'password': {'write_only': True} } def validate(self, attrs): password = attrs.get('password') password2 = attrs.pop('password2') if password != password2: raise serializers.ValidationError(\"Password and Confirm Password Does not match\") return attrs def create(self, validate_data): return CustomUser.objects.create_user(**validate_data) class LoginSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = ['username', 'password',] class LogoutSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = [] class PasswordChangeSerializer(serializers.ModelSerializer): current_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) new_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) class Meta: model = CustomUser fields = ['current_password', 'new_password'] def validate_current_password(self, value): if not self.context['request'].user.check_password(value): raise serializers.ValidationError({'current_password': 'Does not match'}) return value","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f"},{"location":"third/#_4","text":"class NewspaperSerializer(serializers.ModelSerializer): class Meta: model = Newspaper fields = '__all__'","title":"\u0413\u0430\u0437\u0435\u0442\u0430"},{"location":"third/#_5","text":"class PostOfficeSerializer(serializers.ModelSerializer): class Meta: model = PostOffice fields = '__all__'","title":"\u041f\u043e\u0447\u0442\u0430"},{"location":"third/#_6","text":"class PrinterSerializer(serializers.ModelSerializer): class Meta: model = Printer fields = '__all__'","title":"\u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f"},{"location":"third/#_7","text":"class PrintingNewspaperSerializer(serializers.ModelSerializer): class Meta: model = PrintingNewspaper fields = '__all__' class ShowPrintingNewspaperSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) printer = PrinterSerializer(read_only=True) class Meta: model = PrintingNewspaper fields = ['id', 'newspaper', 'printer', 'how_many_to_print']","title":"\u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b"},{"location":"third/#_8","text":"class PostOfficeOrderSerializer(serializers.ModelSerializer): class Meta: model = PostOfficeOrder fields = '__all__' class ShowPostOfficeOrderSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed']","title":"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b"},{"location":"third/#_9","text":"class TransportationSerializer(serializers.ModelSerializer): class Meta: model = Transportation fields = '__all__' class ShowTransportationSerializer(serializers.ModelSerializer): printing_newspaper = ShowPrintingNewspaperSerializer(read_only=True) post_office_order = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['id', 'printing_newspaper', 'post_office_order', 'amount']","title":"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430"},{"location":"third/#_10","text":"class ShowLossSerializer(serializers.ModelSerializer): have = serializers.SerializerMethodField() newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed', 'have'] @extend_schema_field(OpenApiTypes.INT) def get_have(self, obj): return self.context[obj.id]['amount__sum'] class ShowRedactor(serializers.ModelSerializer): class Meta: model = Newspaper fields = ['redactor_last_name', 'redactor_first_name', 'redactor_patronic'] class ShowPrintingAddreses(serializers.ModelSerializer): address = serializers.CharField(source='printer.address') class Meta: model = PrintingNewspaper fields = ['address'] class FindTransportationsSerializers(serializers.Serializer): name = serializers.CharField() where_printed = serializers.CharField() class Meta: fields = ['name', 'where_printed'] class ShowTransportEndSerializer(serializers.ModelSerializer): post_needed = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['post_needed']","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435"}]}