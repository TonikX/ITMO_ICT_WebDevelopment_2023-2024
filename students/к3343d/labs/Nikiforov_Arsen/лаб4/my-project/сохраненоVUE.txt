

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/main.js

import { createApp } from 'vue'; 
import App from './App.vue';
import router from './router';
import store from './store';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import BootstrapVue3 from 'bootstrap-vue-3';
import VueAxios from 'vue-axios';
import { createVuetify } from 'vuetify';
import 'vuetify/styles';

const app = createApp(App);
const vuetify = createVuetify();

app.use(router);
app.use(store);
app.use(BootstrapVue3);
app.use(VueAxios, axios);
app.use(vuetify);

const userToken = localStorage.getItem('userToken');
if (userToken) {
  store.commit('setUser', { token: userToken });
}

app.mount('#app');


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/App.vue

<template>
  <div class="app-container">
    <!-- Обновленный путь к логотипу -->
    <img alt="Vue logo" src="@/assets/logo.png" class="logo"> 
    <div class="menu" v-if="showButtons">
      <h1>Добро пожаловать в наш отель!</h1>
      <button @click="showComponent = 'login'">Вход</button>
      <button @click="showComponent = 'registration'">Регистрация</button>
    </div>
    <!-- Компоненты для входа, регистрации и профиля пользователя -->
    <LoginPage v-if="showComponent === 'login'" @show-user-profile="showUserProfile" />
    <RegistrationPage v-if="showComponent === 'registration'" />
    <UserProfile v-if="showComponent === 'userProfile'" @go-back="showMainButtons" />
  </div>
</template>

<script>
// Импорт компонентов с использованием алиаса @
import RegistrationPage from '@/components/RegistrationPage.vue';
import LoginPage from '@/components/LoginPage.vue';
import UserProfile from '@/components/UserProfile.vue';


export default {
  name: 'App',
  components: {
    RegistrationPage,
    LoginPage,
    UserProfile
  },
  data() {
    return {
      showComponent: null,
      showButtons: true,
    };
  },
  methods: {
    showUserProfile() {
      this.showComponent = 'userProfile';
      this.showButtons = false;
    },
    showMainButtons() {
      this.showComponent = null;
      this.showButtons = true;
    }
  }
};
</script>



<style scoped>
.app-container {
  text-align: center;
  background: linear-gradient(to right, #b4ffb0, #b19dff); 
  min-height: 100vh;
}

.logo {
  max-width: 150px;
  margin: 20px auto;
}

.menu h1 {
  color: #fff;
  text-shadow: 2px 2px 4px #000;
}

.menu {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

button {
  padding: 10px 20px;
  border: none;
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #0056b3;
}
</style>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/router/index.js

import { createRouter, createWebHistory } from 'vue-router';
import RegistrationPage from '../components/RegistrationPage.vue';
import LoginPage from '../components/LoginPage.vue';
import UserProfile from '../components/UserProfile.vue';
import ClientsTable from '../components/ClientsTable.vue';
import EmployeesTable from '../components/EmployeesTable.vue';
import RoomStatistics from '../components/RoomStatistics.vue';
import ComplexRoomsTable from '../components/ComplexRoomsTable.vue';
import RoomsTable from '../components/RoomsTable.vue';
import RoomReviewsList from '../components/RoomReviewsList.vue';
import LeaveFeedback from '../components/LeaveFeedback.vue';
import AddReview from '../components/AddReview.vue';
//import store from '../store'; // Импорт Vuex Store

const routes = [
  { path: '/registration', component: RegistrationPage },
  { path: '/login', component: LoginPage },
  { path: '/user-profile', component: UserProfile },
  { path: '/clients', component: ClientsTable },
  { path: '/employees', component: EmployeesTable },
  { path: '/room-statistics', component: RoomStatistics },
  { path: '/complex-rooms', component: ComplexRoomsTable },
  { path: '/rooms-table', component: RoomsTable },
  {
    path: '/room/:roomId/reviews',
    name: 'RoomReviewsList',
    component: RoomReviewsList,
    props: true
  },
  {
    path: '/room/:roomId/leave-feedback',
    name: 'LeaveFeedback',
    component: LeaveFeedback,
    props: true
  },
  {
    path: '/room/:roomId/add-review',
    name: 'AddReview',
    component: AddReview,
    props: true
  },
  {
    path: '/room-statistics',
    name: 'RoomStatistics',
    component: RoomStatistics
  }
];

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
});

export default router;


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RegistrationPage.vue

<template>
  <div class="app-container">
    <img alt="Vue logo" src="@/assets/logo.png" class="logo">
    <div class="menu" v-if="showButtons">
      <h1>Добро пожаловать в наш отель!</h1>
      <button @click="showComponent = 'login'">Вход</button>
      <button @click="showComponent = 'registration'">Регистрация</button>
    </div>
    <LoginPage v-if="showComponent === 'login'" @show-user-profile="showUserProfile" />
    <RegistrationPage v-if="showComponent === 'registration'" />
    <UserProfile v-if="showComponent === 'userProfile'" @go-back="showMainButtons" />
  </div>
</template>

<script>
import RegistrationPage from '@/components/RegistrationPage.vue';
import LoginPage from '@/components/LoginPage.vue';
import UserProfile from '@/components/UserProfile.vue';

export default {
  name: 'App',
  components: {
    RegistrationPage,
    LoginPage,
    UserProfile
  },
  data() {
    return {
      showComponent: null,
      showButtons: true,
    };
  },
  methods: {
    showUserProfile() {
      this.showComponent = 'userProfile';
      this.showButtons = false;
    },
    showMainButtons() {
      this.showComponent = null;
      this.showButtons = true;
    }
  }
};
</script>

<style scoped>
.app-container {
  text-align: center;
  background: linear-gradient(to right, #b4ffb0, #b19dff); 
  min-height: 100vh;
}

.logo {
  max-width: 150px;
  margin: 20px auto;
}

.menu h1 {
  color: #fff;
  text-shadow: 2px 2px 4px #000;
}

.menu {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

button {
  padding: 10px 20px;
  border: none;
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #0056b3;
}
</style>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LoginPage.vue

<template>
  <form @submit.prevent="login">
    <h2>Вход</h2>
    <div class="input-wrapper">
      <input type="text" v-model="userData.username" placeholder="Имя пользователя">
    </div>
    <div class="input-wrapper">
      <input type="password" v-model="userData.password" placeholder="Пароль">
    </div>
    <button type="submit">Войти</button>
    <div v-if="errorMessage" class="error-message">{{ errorMessage }}</div>
  </form>
</template>

<script>
export default {
  data() {
    return {
      userData: {
        username: '',
        password: '',
      },
      errorMessage: '',
    };
  },
  methods: {
    async login() {
      try {
        const response = await fetch('http://localhost:8000/hotel_api/api/login/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.userData)
        });

        if (response.ok) {
  const data = await response.json();
  localStorage.setItem('userToken', data.access);

  // Сохранение имени пользователя в состоянии Vuex
  this.$store.commit('setUser', { username: this.userData.username, token: data.access });

  this.$emit('show-user-profile');
  this.errorMessage = '';
}     
         else {
          this.errorMessage = 'Введите корректные данные';
        }
      } catch (error) {
        console.error('Ошибка сети', error);
      }
    }
  }
};
</script>

<style>
.input-wrapper {
  margin-bottom: 10px;
}

.error-message {
  color: red;
  margin-top: 10px;
}
</style>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/UserProfile.vue

<template>
  <div>
    <h2>Добро пожаловать в систему управления отелем, {{ username }}!</h2>
    <div class="navigation-links">
      <button @click="showRooms">Комнаты</button>
      <button @click="showClients">Клиенты</button>
      <button @click="showEmployees">Сотрудники</button>
      <button @click="showRoomStatistics">Статистика комнат</button>
      <button @click="showComplexRooms">Комплексная информация о комнатах</button>
      <button @click="showAddReviewForm">Оставить отзыв</button>
      <button @click="showReviewList">Показать отзывы</button>
      <button @click="logout">Выход</button>
    </div>

    <component :is="currentComponent" v-if="showTable" />

    <div v-if="showReviewForm">
      <AddReview :roomId="selectedRoomId" @review-added="updateReviews" />
    </div>

    <div v-if="showReviews">
      <h3>Отзывы</h3>
      <ul>
        <li v-for="review in reviews" :key="review.id">
          {{ review.text }} - {{ review.author }}
        </li>
      </ul>
    </div>
  </div>
</template>


<script>
import RoomsTable from './RoomsTable.vue';
import ClientsTable from './ClientsTable.vue';
import EmployeesTable from './EmployeesTable.vue';
import AddReview from './AddReview.vue';
import ReviewService from '@/reviewService'; // Путь к файлу ReviewService
import RoomStatistics from './RoomStatistics.vue';
import ComplexRoomsTable from './ComplexRoomsTable.vue';
import LogoutButton from './LogoutButton.vue';
import store from '@/store';

export default {
  computed: {
    username() {
      return this.$store.state.user ? this.$store.state.user.username : 'Guest';
    }
  },
  components: {
    RoomsTable,
    ClientsTable,
    EmployeesTable,
    AddReview,
    RoomStatistics,
    ComplexRoomsTable,
    LogoutButton,
  },
  data() {
    return {
      showTable: false,
      currentComponent: null,
      showReviewForm: false,
      showReviews: false,
      reviews: [],
      selectedRoomId: null
    };
  },
  methods: {
    logout() {
      store.commit('clearUser'); // Очистка данных пользователя
      this.$router.push('/'); // Перенаправление на главную страницу
      location.reload(); // Принудительное обновление страницы
    },
    showAddReviewForm(roomId) {
      this.selectedRoomId = roomId;
      this.showReviewForm = true;
      this.showReviews = false;
    },
    showReviewList() {
      this.showReviewForm = false;
      this.showReviews = true;
      this.fetchReviews();
    },
    emitBack() {
      this.showTable = false;
      this.showReviewForm = false;
      this.showReviews = false;
    },
    fetchReviews() {
      ReviewService.getAllReviews()
        .then(response => {
          this.reviews = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении отзывов:', error);
        });
    },
    updateReviews() {
      this.fetchReviews();
      this.showReviewForm = false;
      this.showReviews = true;
    },
    goToLeaveFeedback() {
      this.$router.push('/add-review');
    },
    leaveFeedback() {
      this.$router.push('');
    },
    showComplexRooms() {
      this.currentComponent = 'ComplexRoomsTable';
      this.showTable = true;
    },
    showRoomStatistics() {
      this.currentComponent = 'RoomStatistics';
      this.showTable = true;
    },
    showRooms() {
      this.currentComponent = 'RoomsTable';
      this.showTable = true;
    },
    showClients() {
      this.currentComponent = 'ClientsTable';
      this.showTable = true;
    },
    showEmployees() {
      this.currentComponent = 'EmployeesTable';
      this.showTable = true;
    },
  },
  created() {
    this.fetchReviews();
  }
};
</script>

<style scoped>
.navigation-links {
  text-align: center;
  margin-bottom: 20px;
}
.navigation-links button {
  margin: 0 10px;
  text-decoration: none;
  color: #333;
  font-weight: bold;
}
.navigation-links button:hover {
  color: #007bff;
  text-decoration: underline;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/store.js

import { createStore } from 'vuex';

export default createStore({
  state: {
    user: null, // Состояние пользователя
  },
  mutations: {
    setUser(state, userData) {
      state.user = userData; // Установка данных пользователя
    },
    
    clearUser(state) {
      state.user = {}; // очищаем данные пользователя
    },
  },
  actions: {
    logout({ commit }) {
      commit('clearUser'); // Вызов мутации для очистки пользователя
      
    }
  },
  getters: {
    isAuthenticated: state => !!state.user, // Проверка аутентификации
    user: state => state.user, // Получение данных пользователя
  },
});


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomsTable.vue

<template> 
  <div>
    <h2>Список комнат</h2>

    <!-- Фильтры -->
    <label for="room_type">Тип комнаты:</label>
    <select v-model="filterType">
      <option value="">--Выберите тип--</option>
      <option value="single">Одноместный</option>
      <option value="double">Двухместный</option>
      <option value="suite">Люкс</option>
    </select>

    <label for="room_status">Статус комнаты:</label>
    <select v-model="filterStatus">
      <option value="">--Выберите статус--</option>
      <option value="available">Доступна</option>
      <option value="occupied">Занята</option>
      <option value="cleaning">На уборке</option>
    </select>

    <!-- Выбор даты бронирования -->
    <div class="date-selection">
      Выберите дату:
      <input type="date" v-model="startDate" placeholder="Дата начала">
      <input type="date" v-model="endDate" placeholder="Дата окончания">
    </div>

    <!-- Таблица комнат -->
    <table class="table">
      <thead>
        <tr>
          <th>Тип комнаты</th>
          <th>Номер этажа</th>
          <th>Статус</th>
          <th>Стоимость</th>
          <th>Действия</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="room in filteredRooms" :key="room.id">
          <td>{{ room.room_type }}</td>
          <td>{{ room.floor }}</td>
          <td>{{ room.status }}</td>
          <td>{{ room.cost }}</td>
          <td>
            <button v-if="room.status === 'available'" @click="bookRoom(room.id)">
              Забронировать
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      rooms: [],
      filterType: '',
      filterStatus: '',
      startDate: '',
      endDate: ''
    };
  },
  computed: {
    filteredRooms() {
      return this.rooms.filter(room => {
        return (!this.filterType || room.room_type === this.filterType) &&
               (!this.filterStatus || room.status === this.filterStatus);
      });
    }
  },
  created() {
    this.fetchRooms();
  },
  methods: {
    fetchRooms() {
      axios.get('http://localhost:8000/hotel_api/api/rooms/')
        .then(response => {
          this.rooms = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении данных о комнатах:', error);
        });
    },
    bookRoom(roomId) {
    // Проверка, выбраны ли даты начала и окончания бронирования
    if (!this.startDate || !this.endDate) {
      alert('Введите дату!');
      return;
    }

    const bookingData = {
      start_date: this.startDate,
      end_date: this.endDate
    };

    axios.post(`http://localhost:8000/hotel_api/api/rooms/${roomId}/book_room/`, bookingData, {
      headers: {
        'Authorization': `Bearer ${this.$store.state.user.token}`
      }
    })
    .then(() => {
      alert('Бронирование успешно отправлено на подтверждение');
      this.fetchRooms();
    })
    .catch(error => {
      console.error('Ошибка при бронировании комнаты:', error);
    });
  }

  }
};
</script>




<style scoped>
.table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.table th,
.table td {
  padding: 10px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.table th {
  background-color: #f2f2f2;
}

.table tbody tr:nth-child(even) {
  background-color: #f5f5f5;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/package.json

{
  "name": "my-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "axios": "^1.6.3",
    "bootstrap": "^5.3.2",
    "bootstrap-vue": "^2.23.1",
    "core-js": "^3.8.3",
    "vue": "^3.2.13",
    "vue-axios": "^3.5.2",
    "vuetify": "^3.4.0-beta.1"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ],
  "description": "## Project setup ``` npm install ```",
  "main": "babel.config.js",
  "author": "",
  "license": "ISC"
}


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/api/auth.js

// src/api/auth.js

import axios from 'axios';

const API_URL = 'http://localhost:8000/hotel_api/';

export function registerUser(userData) {
  return axios.post(`${API_URL}register/`, userData);
}

export function loginUser(userData) {
  return axios.post(`${API_URL}login/`, userData);
}


export function userProfile(userData) {
  return axios.post(`${API_URL}user-profile/`, userData);
}

export function logoutUser() {
  localStorage.removeItem('userToken');

}


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomStatistics.vue

<template>
  <div>
    <h2>Статистика комнат</h2>
    <table>
      <thead>
        <tr>
          <th>Тип комнаты</th>
          <th>Общее количество</th>
          <th>Средняя стоимость</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="stat in statistics" :key="stat.room_type">
          <td>{{ stat.room_type }}</td>
          <td>{{ stat.total }}</td>
          <td>{{ stat.average_cost }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      statistics: [] // Сюда будут загружены данные статистики
    };
  },
  created() {
    this.fetchStatistics();
  },
  methods: {
    fetchStatistics() {
      axios.get('http://localhost:8000/hotel_api/api/room-statistics/')
        .then(response => {
          this.statistics = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении статистики комнат:', error);
        });
    }
  }
}
</script>

<style>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
}

td {
  background-color: #fff;
}

tr:hover {
  background-color: #f5f5f5;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LeaveFeedback.vue

<template>
  <div>
    <h2>Отзывы о комнате {{ roomId }}</h2>
    <ul>
      <li v-for="review in reviews" :key="review.id">
        {{ review.text }} - {{ review.author }}
      </li>
    </ul>
    <button @click="goToAddReview">Добавить отзыв</button>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  props: {
    roomId: {
      type: Number,
      required: true
    }
  },
  data() {
    return {
      reviews: []
    };
  },
  methods: {
    fetchReviews() {
      axios.get(`http://localhost:8000/hotel_api/api/rooms/${this.roomId}/reviews`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('userToken')}`
        }
      })
      .then(response => {
        this.reviews = response.data;
      })
      .catch(error => {
        console.error('Ошибка при получении отзывов:', error);
      });
    }
  },
  created() {
    this.fetchReviews();
  }
};
</script>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/AddReview.vue

<template>
  <div>
    <h2>Добавить общий отзыв</h2>
    <form @submit.prevent="submitReview">
      <label for="reviewText">Отзыв:</label>
      <textarea id="reviewText" v-model="reviewText" placeholder="Введите ваш отзыв"></textarea>
      
      <button type="submit">Отправить</button>
    </form>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      reviewText: ''
    };
  },
  computed: {
    username() {
      // Получение имени пользователя из состояния Vuex
      return this.$store.state.user ? this.$store.state.user.username : 'Аноним';
    }
  },
  methods: {
    submitReview() {
      const reviewData = {
        author: this.username, // Использование имени пользователя из Vuex
        text: this.reviewText
      };

      axios.post('http://localhost:8000/hotel_api/api/reviews/', reviewData, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('userToken')}`
        }
      })
      .then(() => {
        alert('Отзыв успешно добавлен!');
        this.reviewText = ''; // Очистка поля ввода после отправки отзыва
      })
      .catch(error => {
        console.error('Ошибка при добавлении отзыва:', error);
      });
    }
  }
};
</script>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/ComplexRoomsTable.vue

<template>
  <div>
    <h2>Комплексная информация о комнатах</h2>
    <table>
      <thead>
        <tr>
          <th>ID комнаты</th>
          <th>Тип комнаты</th>
          <th>Статус</th>
          <th>Стоимость</th>
          
          <th>Сотрудники</th>
          <th>Забронировал</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="room in complexRooms" :key="room.id">
          <td>{{ room.id }}</td>
          <td>{{ room.room_type }}</td>
          <td>{{ room.status }}</td>
          <td>{{ room.cost }}</td>
          <td>
            <ul>
              <li v-for="employee in room.employees" :key="employee.id">
                {{ employee.employee.first_name }} {{ employee.employee.last_name }}
              </li>
            </ul>
          </td>
          <td>
            {{ room.booked_by }}
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      complexRooms: []
    };
  },
  created() {
    this.fetchComplexRooms();
  },
  methods: {
    fetchComplexRooms() {
      axios.get('http://localhost:8000/hotel_api/api/complex_rooms/')
        .then(response => {
          this.complexRooms = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении комплексной информации о комнатах:', error);
        });
    },
    checkIn(roomId) {
      axios.post(`http://localhost:8000/api/rooms/${roomId}/check_in`, { is_occupied: true })
        .then(() => {
          this.fetchComplexRooms();
        }).catch(error => {
          console.error('Ошибка при обновлении статуса комнаты:', error);
        });
    }
  }
};
</script>

<style>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
}

td {
  background-color: #fff;
}

tr:hover {
  background-color: #f5f5f5;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LogoutButton.vue

<template>
    <button @click="logout">Выход</button>
  </template>
  
  <script>
  import { useStore } from 'vuex';
  import { useRouter } from 'vue-router';
  
  export default {
    setup() {
      const store = useStore();
      const router = useRouter();
  
      const logout = () => {
        store.commit('clearUser'); // Очищаем данные пользователя из Vuex
        router.push('/login'); // Перенаправляем на страницу входа
      };
  
      return { logout };
    }
  };
  </script>
  
  <style scoped>
  button {
    margin: 0 10px;
    text-decoration: none;
    color: #333;
    font-weight: bold;
    cursor: pointer;
  }
  button:hover {
    color: #007bff;
    text-decoration: underline;
  }
  </style>
  

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/reviewService.js

import axios from 'axios';

const API_URL = 'http://localhost:8000/hotel_api/api/reviews/';

class ReviewService {
    getAllReviews() {
        return axios.get(API_URL);
    }

    getReviewById(id) {
        return axios.get(API_URL + id + '/');
    }

    createReview(reviewData) {
        return axios.post(API_URL, reviewData);
    }

    updateReview(id, reviewData) {
        return axios.put(API_URL + id + '/', reviewData);
    }

    deleteReview(id) {
        return axios.delete(API_URL + id + '/');
    }
}

export default new ReviewService();
