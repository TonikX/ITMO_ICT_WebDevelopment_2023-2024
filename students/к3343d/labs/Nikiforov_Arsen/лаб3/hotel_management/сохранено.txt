












File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/admin.py

# admin.py
from django.contrib import admin
from .models import Room, Client, ClientInfo, Employee, Floor, Day, EmployeeFloor, EmployeeDay
from .models import CustomUser
from django.contrib import admin
from .models import Room

@admin.register(Room)
class RoomAdmin(admin.ModelAdmin):
    list_display = ('room_type', 'floor', 'status', 'cost')
    actions = ['confirm_booking']

    def confirm_booking(self, request, queryset):
        queryset.update(booking_confirmed=True)
    confirm_booking.short_description = "Confirm selected bookings"



admin.site.register(CustomUser)
admin.site.register(Client)
admin.site.register(ClientInfo)
admin.site.register(Employee)
admin.site.register(Floor)
admin.site.register(Day)
admin.site.register(EmployeeFloor)
admin.site.register(EmployeeDay)













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/urls.py

# hotel_management/hotel_api/urls.py
from . import views 
from django.urls import path, include, re_path
from rest_framework.routers import DefaultRouter
from .views import (RoomViewSet, ClientViewSet, EmployeeViewSet, FloorViewSet,
                    FloorOccupancyViewSet, DayViewSet, EmployeeFloorViewSet,
                    EmployeeDayViewSet, ClientInfoViewSet, ComplexRoomViewSet,
                    NestedClientViewSet, UserViewSet, api_login, login_view,
                    generate_token, book_room,
                    alternative_login_view, register_user, rooms_list,
                    clients_list, employees_list, floors_list,
                    client_info_list, days_list, employee_floors_list,
                    employee_days_list, bookings_list, book_selected_rooms)
from .views import book_room


from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

app_name = 'hotel_api'

schema_view = get_schema_view(
    openapi.Info(
        title="API Documentation",
        default_version='v1',
        description="API description",
    ),
    public=True,
    permission_classes=(AllowAny,),
)

router = DefaultRouter()
router.register(r'rooms', RoomViewSet)
router.register(r'clients', ClientViewSet)
router.register(r'employees', EmployeeViewSet)
router.register(r'floors', FloorViewSet)
router.register(r'days', DayViewSet)
router.register(r'employee_floors', EmployeeFloorViewSet)
router.register(r'employee_days', EmployeeDayViewSet)
router.register(r'client_info', ClientInfoViewSet)
router.register(r'complex_rooms', ComplexRoomViewSet)
router.register(r'nested_clients', NestedClientViewSet)
router.register(r'floor_occupancy', FloorOccupancyViewSet)
router.register(r'users', UserViewSet)

urlpatterns = [  
    path('', views.home, name='home'),
    path('book_selected_rooms/', views.book_selected_rooms, name='book_selected_rooms'),
    path('register/', views.register_user, name='register_user'),
    path('login/', views.login_view, name='login'),
    path('alternative_login/', views.alternative_login_view, name='alternative_login'),
    path('register/', views.register_view, name='register'),    
    path('rooms/', views.rooms_list, name='rooms_list'),
    path('clients/', views.clients_list, name='clients_list'),
    path('employees/', views.employees_list, name='employees_list'),
    path('floors/', views.floors_list, name='floors_list'),
    path('client-info/', views.client_info_list, name='client_info_list'),
    path('days/', views.days_list, name='days_list'),
    path('employee-floors/', views.employee_floors_list, name='employee_floors_list'),
    path('employee-days/', views.employee_days_list, name='employee_days_list'),
    path('bookings/', views.bookings_list, name='bookings_list'),
    path('api/', include(router.urls)),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('auth/', include('djoser.urls')),
    re_path(r'^auth/', include('djoser.urls.authtoken')),
    path('api/login/', views.api_login, name='api_login'),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('book_room/<int:room_id>/', views.book_room, name='book_room'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/token/', views.generate_token, name='generate_token'),
    path('book_room/<int:room_id>/', book_room, name='book_room'),
    
    
]













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/serializers.py

from rest_framework import serializers
from .models import Room, Client, ClientInfo, Employee, Floor, Day, EmployeeFloor, EmployeeDay
from .models import CustomUser, Room, Client, ClientInfo, Employee, Floor, Day, EmployeeFloor, EmployeeDay
from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework import serializers
from .models import Floor, Room

#/api/floor_occupancy/
class FloorOccupancySerializer(serializers.ModelSerializer):
    occupied_rooms_count = serializers.SerializerMethodField()

    class Meta:
        model = Floor
        fields = ['number', 'occupied_rooms_count']

    def get_occupied_rooms_count(self, floor):
        # Считаем количество занятых комнат на этаже
        return Room.objects.filter(floor=floor, status='occupied').count()

class RoomSerializer(serializers.ModelSerializer):
    class Meta:
        model = Room
        fields = '__all__' 








class EmployeeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Employee
        fields = '__all__'  

        

class RoomSerializer(serializers.ModelSerializer):
    class Meta:
        model = Room
        fields = '__all__'

class ClientInfoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClientInfo
        fields = '__all__'







#Создание сериализатора для вложенного запроса:
class NestedClientSerializer(serializers.ModelSerializer):
    room = RoomSerializer(read_only=True)
    client_info = ClientInfoSerializer(read_only=True)

    class Meta:
        model = Client
        fields = ['id', 'room', 'client_info']





class EmployeeFloorSerializer(serializers.ModelSerializer):
    # Добавлю сюда сериализатор для Employee
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = EmployeeFloor
        fields = ['employee', 'floor', 'room'] 



"""""
 сложный запрос:
Получить список всех комнат, которые заняты, 
вместе с информацией о клиентах, проживающих в них, 
и сотрудниках, ответственных за уборку комнаты.
"""""
class ComplexRoomSerializer(serializers.ModelSerializer):
    clients = NestedClientSerializer(many=True, read_only=True)
    
    #используем сериализатор для EmployeeFloor вместо Employee
    employees = EmployeeFloorSerializer(source='employee_floor_set', many=True, read_only=True)

    class Meta:
        model = Room
        fields = ['id', 'room_type', 'status', 'cost', 'floor', 'clients', 'employees']








User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'first_name', 'last_name', 'email', 'phone')
        extra_kwargs = {'phone': {'required': False}}



    




class ClientSerializer(serializers.ModelSerializer):
    client_info = ClientInfoSerializer()

    class Meta:
        model = Client
        fields = '__all__'

    def create(self, validated_data):
        client_info_data = validated_data.pop('client_info')
        client_info = ClientInfo.objects.create(**client_info_data)
        client = Client.objects.create(client_info=client_info, **validated_data)
        return client


    class Meta:
        model = Client
        fields = '__all__'



class FloorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Floor
        fields = '__all__'

class DaySerializer(serializers.ModelSerializer):
    class Meta:
        model = Day
        fields = '__all__'



class EmployeeDaySerializer(serializers.ModelSerializer):
    class Meta:
        model = EmployeeDay
        fields = '__all__'













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings



class CustomUser(AbstractUser):
    phone = models.CharField("Телефон", max_length=15, blank=True, null=True)

    REQUIRED_FIELDS = ['first_name', 'last_name', 'phone']

    def __str__(self):
        return self.username


class Floor(models.Model):
    number = models.IntegerField()

    def __str__(self):
        return f"Floor {self.number}"

class Room(models.Model):
    ROOM_TYPES = (
        ('single', 'Single'),
        ('double', 'Double'),
        ('suite', 'Suite'),
    )
    
    ROOM_STATUSES = (
        ('available', 'Available'),
        ('booked', 'Booked'),
        ('occupied', 'Occupied'),
        ('cleaning', 'Cleaning'),
    )
    status = models.CharField(max_length=100, choices=ROOM_STATUSES)

    room_type = models.CharField(max_length=100, choices=ROOM_TYPES)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    floor = models.ForeignKey(Floor, on_delete=models.CASCADE, related_name='rooms')
    status = models.CharField(max_length=100, choices=ROOM_STATUSES)
    booked_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='booked_rooms')
    booking_confirmed = models.BooleanField(default=False)
  




    def __str__(self):
        return f"{self.get_room_type_display()} on Floor {self.floor.number}"

class ClientInfo(models.Model):
    passport_number = models.CharField(max_length=50)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    patronymic = models.CharField(max_length=100, blank=True)
    city = models.CharField(max_length=100)
    check_in_date = models.DateTimeField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Client(models.Model):
    client_info = models.ForeignKey(ClientInfo, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, related_name='clients')

    def __str__(self):
        return f"Client {self.client_info.first_name} {self.client_info.last_name}"

class Employee(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    patronymic = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Day(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class EmployeeFloor(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    floor = models.ForeignKey(Floor, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='employee_floor_set')  # связал с комнатами


    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} on Floor {self.floor.number}"

class EmployeeDay(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    day = models.ForeignKey(Day, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} on {self.day.name}"













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/views.py

from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth import login, authenticate
from .models import Room, Client, Employee, Floor, Day, EmployeeFloor, EmployeeDay, ClientInfo
from .serializers import RoomSerializer, ClientSerializer, EmployeeSerializer, FloorSerializer, DaySerializer, EmployeeFloorSerializer, EmployeeDaySerializer, ClientInfoSerializer
from .forms import CustomUserCreationForm
from django.contrib.auth import get_user_model
from .serializers import UserSerializer
from .models import CustomUser
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework import viewsets, status
from rest_framework.response import Response
from .serializers import ComplexRoomSerializer, NestedClientSerializer
from .models import Floor
from .serializers import FloorOccupancySerializer
from django.contrib.auth.models import User
from django.http import JsonResponse
import json
from django.views.decorators.csrf import csrf_exempt
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.http import JsonResponse
from django.contrib.auth import authenticate
from django.views.decorators.csrf import csrf_exempt
import json
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.contrib.auth.models import User
from django.utils import timezone
from django.views.decorators.csrf import csrf_exempt
from .models import Room
from django.http import JsonResponse
from .models import Room
from django.views.decorators.csrf import csrf_exempt
import json

from django.http import JsonResponse
from .models import Room

from django.shortcuts import redirect
from django.urls import reverse

from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from django.shortcuts import redirect
from .models import Room
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse


@login_required
def book_selected_rooms(request):
    if request.method == 'POST':
        room_ids = request.POST.getlist('room_ids')
        rooms = Room.objects.filter(id__in=room_ids, is_available=True)
        for room in rooms:
            room.booked_by = request.user
            room.is_available = False
            room.save()
        return redirect('rooms_list')
    return render(request, 'hotel_api/rooms_list.html')



@login_required
def book_room(request, room_id):
    room = Room.objects.get(id=room_id)
    if room.is_available and not room.booked_by:
        room.booked_by = request.user
        room.is_available = False
        room.save()
        return HttpResponse("Room booked successfully")
    return HttpResponse("Room is not available", status=400)






@api_view(['POST'])
@permission_classes([IsAuthenticated])
def generate_token(request):
    user = request.user
    refresh = RefreshToken.for_user(user)
    refresh.access_token.set_exp(timezone.now() + SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'])
    access_token = str(refresh.access_token)
    return Response({'access_token': access_token})




@csrf_exempt
def login_view(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = authenticate(username=data['username'], password=data['password'])
        if user is not None:
            login(request, user)
            return JsonResponse({'status': 'success'})
        else:
            return JsonResponse({'status': 'error'}, status=401)
    return JsonResponse({'error': 'Invalid method'}, status=405)


@csrf_exempt
def api_login(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')
        user = authenticate(username=username, password=password)
        if user is not None:
            refresh = RefreshToken.for_user(user)
            return JsonResponse({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        else:
            return JsonResponse({'message': 'Неверные учетные данные'}, status=401)
    return JsonResponse({'message': 'Неверный запрос'}, status=400)





@csrf_exempt  # Отключение CSRF для данного view
def register_user(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = User.objects.create_user(
            username=data['username'], 
            email=data['email'], 
            password=data['password']
        )
        return JsonResponse({'id': user.id, 'username': user.username}, status=201)
    return JsonResponse({'error': 'Invalid request'}, status=400)


def login_redirect(request):
    return redirect("http://localhost:8080/login")



#это для статистики
class FloorOccupancyViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Floor.objects.all()
    serializer_class = FloorOccupancySerializer






class ComplexRoomViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Room.objects.filter(status='occupied').prefetch_related('clients', 'employee_floor_set')
    serializer_class = ComplexRoomSerializer

class NestedClientViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Client.objects.select_related('room', 'client_info')
    serializer_class = NestedClientSerializer








def alternative_login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            print("с днем рождения!")
            pass
    # В случае GET-запроса или если аутентификация не удалась
    form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})





class UserViewSet(viewsets.ModelViewSet):
    queryset = CustomUser.objects.all()
    serializer_class = UserSerializer
    http_method_names = ['get', 'post', 'put', 'patch', 'delete']
    def partial_update(self, request, *args, **kwargs):
        kwargs['partial'] = True
        return self.update(request, *args, **kwargs)



    
User = get_user_model()






def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
    else:
        form = CustomUserCreationForm()
    return render(request, 'registration/register.html', {'form': form})




@login_required(login_url='/login/') 
def home(request):
    return render(request, 'hotel_api/home.html')



def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('home')
    else:
        form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})



class RoomViewSet(viewsets.ModelViewSet):
    queryset = Room.objects.all()
    serializer_class = RoomSerializer

class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.all()
    serializer_class = ClientSerializer

class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer

class FloorViewSet(viewsets.ModelViewSet):
    queryset = Floor.objects.all()
    serializer_class = FloorSerializer

class DayViewSet(viewsets.ModelViewSet):
    queryset = Day.objects.all()
    serializer_class = DaySerializer

class EmployeeFloorViewSet(viewsets.ModelViewSet):
    queryset = EmployeeFloor.objects.all()
    serializer_class = EmployeeFloorSerializer

class EmployeeDayViewSet(viewsets.ModelViewSet):
    queryset = EmployeeDay.objects.all()
    serializer_class = EmployeeDaySerializer

class ClientInfoViewSet(viewsets.ModelViewSet):
    queryset = ClientInfo.objects.all()
    serializer_class = ClientInfoSerializer

def rooms_list(request):
    room_type_query = request.GET.get('room_type', '').strip()
    room_status_query = request.GET.get('room_status', '').strip()

    rooms = Room.objects.all()

    if room_type_query:
        rooms = rooms.filter(room_type__iexact=room_type_query)
    if room_status_query:
        rooms = rooms.filter(status__iexact=room_status_query)

    context = {
        'rooms': rooms,
        'selected_type': room_type_query,
        'selected_status': room_status_query,
    }
    return render(request, 'hotel_api/rooms_list.html', context)

def clients_list(request):
    clients = Client.objects.all()
    return render(request, 'hotel_api/client_list.html', {'clients': clients})

def employees_list(request):
    employees = Employee.objects.all()
    return render(request, 'hotel_api/employee_list.html', {'employees': employees})

def bookings_list(request):
    # Логика для списка бронирований
    return render(request, 'hotel_api/bookings_list.html')

def floors_list(request):
    floors = Floor.objects.all()
    return render(request, 'hotel_api/floor_list.html', {'floors': floors})

def staff_management(request):
    # Логика для управления персоналом
    return render(request, 'hotel_api/staff_management.html')

def reports(request):
    return render(request, 'hotel_api/reports.html')

def settings(request):
    return render(request, 'hotel_api/settings.html')

def client_info_list(request):
    client_info = ClientInfo.objects.all()
    return render(request, 'hotel_api/client_info_list.html', {'client_info': client_info})

def days_list(request):
    days = Day.objects.all()
    return render(request, 'hotel_api/days_list.html', {'days': days})

def employee_floors_list(request):
    employee_floors = EmployeeFloor.objects.all()
    return render(request, 'hotel_api/employee_floors_list.html', {'employee_floors': employee_floors})

def employee_days_list(request):
    employee_days = EmployeeDay.objects.all()
    return render(request, 'hotel_api/employee_days_list.html', {'employee_days': employee_days})













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/rooms_list.html

<!-- hotel_api/templates/hotel_api/rooms_list.html -->

<!DOCTYPE html>
<html>
<head>
    <title>Rooms List</title>
    <style>
        /* Добавьте свои стили CSS здесь */
        h1 {
            font-size: 24px;
            text-align: center;
        }
        form {
            margin: 20px 0;
            text-align: center;
        }
        label {
            font-weight: bold;
        }
        select, input[type="submit"] {
            margin: 5px;
        }
        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
        tbody tr:hover {
            background-color: #f5f5f5;
        }
        .back-button {
            display: block;
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <a href="http://localhost:8000/" class="back-button">Back to Home</a>
    <h1>Rooms List</h1>
    
    <!-- Форма фильтрации -->
    <form method="get">
        <label for="room_type">Room Type:</label>
        <select name="room_type" id="room_type">
            <option value="">--Select a Type--</option>
            <option value="single">Single</option>
            <option value="double">Double</option>
            <option value="suite">Suite</option>
        </select>
    
        <label for="room_status">Room Status:</label>
        <select name="room_status" id="room_status">
            <option value="">--Select a Status--</option>
            <option value="available">Available</option>
            <option value="occupied">Occupied</option>
            <option value="cleaning">Cleaning</option>
        </select>
    
        <input type="submit" value="Filter">
    </form>

    <!-- Форма для бронирования комнат -->
    <form method="post" action="{% url 'book_selected_rooms' %}">
        {% csrf_token %}
        <table>
            <thead>
                <tr>
                    <th>Select</th>
                    <th>Room Type</th>
                    <th>Floor Number</th>
                    <th>Status</th>
                    <th>Cost</th>
                </tr>
            </thead>
            <tbody>
                {% for room in rooms %}
                <tr>
                    <td><input type="checkbox" name="room_ids" value="{{ room.id }}"></td>
                    <td>{{ room.get_room_type_display }}</td>
                    <td>{{ room.floor.number }}</td>
                    <td>{{ room.get_status_display }}</td>
                    <td>{{ room.cost }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <input type="submit" value="Book Selected Rooms">
    </form>
</body>
</html>













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/menu.html

<!DOCTYPE html>
<html>
<head>
    <title>Hotel Management Menu</title>
    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
</head>
<body>
    <header>
        <h1>Welcome to the Hotel Management System</h1>
    </header>

    <nav class="menu">
        <ul>
            <li><a href="{% url 'rooms_list' %}">Rooms</a></li>
            <li><a href="{% url 'clients_list' %}">Clients</a></li>
            <li><a href="{% url 'employees_list' %}">Employees</a></li>
            {% if user.is_authenticated %}
                <li><a href="{% url 'logout' %}">Logout</a></li>
            {% else %}
                <li><a href="{% url 'login' %}">Login</a></li>
            {% endif %}
        </ul>
    </nav>
</body>
</html>













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_management/settings.py

"""
Django settings for hotel_management project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta 

ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4o=g1ta42q5sx45l^9uz(e0+7jez!^w4ehcqxp6@tn(!suoke2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost']

LOGOUT_REDIRECT_URL = '/'

CSRF_TRUSTED_ORIGINS = "http://localhost:8080", 

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080", 
]
 
LOGIN_REDIRECT_URL = '/hotel_api/'  





CORS_ORIGIN_ALLOW_ALL = True

INSTALLED_APPS = [
    'hotel_api', 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'drf_yasg',
    'corsheaders',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'hotel_api.utils.DisableCSRF',  
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'hotel_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'hotel_management.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Путь к статическим файлам (CSS, JavaScript, Images)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'hotel_api', 'static'),
    'C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/hotel-management/dist',
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ),
}

# Djoser settings
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
        'SERIALIZERS': {
        'user_create': 'hotel_api.serializers.UserSerializer',
        'user': 'hotel_api.serializers.UserSerializer',
        'current_user': 'hotel_api.serializers.UserSerializer',
    },
}


AUTH_USER_MODEL = 'hotel_api.CustomUser'




EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# settings.py

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_REFRESH_AFTER_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_SLIDING_LIFETIME': timedelta(days=15),
    'SLIDING_TOKEN_SLIDING_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_TYPE': 'sliding',
    'SLIDING_TOKEN_REFRESH_ROTATE': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),

}













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_management/urls.py

# hotel_management/hotel_management/urls.py

from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from hotel_api import views as hotel_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', auth_views.LoginView.as_view(), name='login'),
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
    path('register/', hotel_views.register_view, name='register'),
    path('home/', hotel_views.home, name='home'),  
    path('hotel_api/', include('hotel_api.urls')),
]













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/registration/register.html

<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    <form method="post" action="{% url 'register' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Register">
    </form>
</body>
</html>













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/registration/login.html

{% load static %}

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
    <script>
        async function loginWithToken() {
            const token = document.getElementById('token').value;
            try {
                const response = await fetch('/home', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    // Перенаправление на страницу /home
                    window.location.href = 'http://localhost:8000/home/';
                } else {
                    alert("Ошибка аутентификации");
                }
            } catch (error) {
                console.error('Ошибка сети', error);
            }
        }
    </script>
    
</head>
<body>
    <!-- Форма для авторизации с использованием имени пользователя и пароля -->
    <h2>Login</h2>
    <form method="post" action="{% url 'hotel_api:alternative_login' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Login">
    </form>

    <!-- Форма для авторизации через токен -->
    <h2>Авторизация через токен</h2>
    <div>
        <input type="text" id="token" placeholder="Введите токен">
        <button type="button" onclick="loginWithToken()">Войти с токеном</button>
    </div>

    <!-- Кнопка регистрации -->
    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
</body>
</html>













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser

class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = CustomUser
        fields = UserCreationForm.Meta.fields + ('phone',)













File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/utils.py

from django.utils.deprecation import MiddlewareMixin
from django.conf import settings

class DisableCSRF(MiddlewareMixin):
    def process_request(self, request):
        if settings.DEBUG:
            setattr(request, '_dont_enforce_csrf_checks', True)
