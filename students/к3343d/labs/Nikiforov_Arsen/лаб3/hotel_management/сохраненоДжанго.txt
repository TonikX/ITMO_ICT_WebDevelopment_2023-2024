

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/admin.py

from django.contrib import admin
from .models import (Room, Client, ClientInfo, Employee, Floor, Day, 
                     EmployeeFloor, EmployeeDay, Booking, CustomUser)

@admin.register(Room)
class RoomAdmin(admin.ModelAdmin):
    list_display = ('room_type', 'floor', 'status', 'cost')

@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ['user', 'room', 'start_date', 'end_date', 'confirmed']
    actions = ['confirm_booking']

    def confirm_booking(self, request, queryset):
        for booking in queryset:
            booking.confirmed = True
            booking.room.booked_by = booking.user
            booking.room.set_occupied(True)  # Указываем True, что комната теперь занята
            booking.room.save()
            booking.save()
    confirm_booking.short_description = "Подтвердить выбранные бронирования"

    def cancel_booking(self, request, queryset):
        for booking in queryset:
            room = booking.room
            room.set_available()
            room.save()
            booking.delete()
    cancel_booking.short_description = "Отменить выбранные бронирования и установить комнату доступной"

    def delete_queryset(self, request, queryset):
        for obj in queryset:
            room = obj.room
            room.set_available()
            room.save()
        queryset.delete()  # Удаляем все бронирования в выборке

    def delete_model(self, request, obj):
        room = obj.room
        room.set_available()
        room.save()
        obj.delete()

admin.site.register(CustomUser)
admin.site.register(Client)
admin.site.register(ClientInfo)
admin.site.register(Employee)
admin.site.register(Floor)
admin.site.register(Day)
admin.site.register(EmployeeFloor)
admin.site.register(EmployeeDay)


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/urls.py

from django import views
from django.urls import path, include, re_path
from rest_framework.routers import DefaultRouter
from .views import (
    RoomViewSet, ClientViewSet, EmployeeViewSet, FloorViewSet,
    FloorOccupancyViewSet, DayViewSet, EmployeeFloorViewSet,
    EmployeeDayViewSet, ClientInfoViewSet, ComplexRoomViewSet,
    NestedClientViewSet, UserViewSet, BookingViewSet, update_room_status,
    RoomStatisticsView, home, register_view,
    login_view, alternative_login_view, api_login,
    generate_token, register_user, book_room,
    rooms_list, clients_list, employees_list, floors_list,
    client_info_list, days_list, employee_floors_list,
    employee_days_list, bookings_list, book_selected_rooms,
    ReviewViewSet
)
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework.permissions import AllowAny
from .views import ReviewViewSet
from . import views

app_name = 'hotel_api'

schema_view = get_schema_view(
    openapi.Info(
        title="API Documentation",
        default_version='v1',
        description="API description",
    
    ),
    public=True,
    permission_classes=(AllowAny,),
)

router = DefaultRouter()
router.register(r'rooms', RoomViewSet)
router.register(r'clients', ClientViewSet)
router.register(r'employees', EmployeeViewSet)
router.register(r'floors', FloorViewSet)
router.register(r'days', DayViewSet)
router.register(r'employee_floors', EmployeeFloorViewSet)
router.register(r'employee_days', EmployeeDayViewSet)
router.register(r'client_info', ClientInfoViewSet)
router.register(r'complex_rooms', ComplexRoomViewSet)
router.register(r'nested_clients', NestedClientViewSet)
router.register(r'floor_occupancy', FloorOccupancyViewSet)
router.register(r'users', UserViewSet)
router.register(r'bookings', BookingViewSet)
router.register(r'reviews', ReviewViewSet)
router.register(r'rooms', RoomViewSet)
router.register(r'bookings', BookingViewSet)


urlpatterns = [
    path('', home, name='home'),
    path('rooms/', rooms_list, name='rooms_list'),
    path('book_selected_rooms/', book_selected_rooms, name='book_selected_rooms'),
    path('register/', register_user, name='register_user'),
    path('login/', login_view, name='login'),
    path('alternative_login/', alternative_login_view, name='alternative_login'),
    path('register/', register_view, name='register'),
    path('clients/', clients_list, name='clients_list'),
    path('employees/', employees_list, name='employees_list'),
    path('floors/', floors_list, name='floors_list'),
    path('client-info/', client_info_list, name='client_info_list'),
    path('days/', days_list, name='days_list'),
    path('employee-floors/', employee_floors_list, name='employee_floors_list'),
    path('employee-days/', employee_days_list, name='employee_days_list'),
    path('bookings/', bookings_list, name='bookings_list'),
    path('api/login/', api_login, name='api_login'),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/rooms/<int:room_id>/book_room/', views.book_room, name='book_room'),
    path('api/room-statistics/', RoomStatisticsView.as_view(), name='room-statistics'),
    path('api/', include(router.urls)),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('auth/', include('djoser.urls')),
    re_path(r'^auth/', include('djoser.urls.authtoken')),
    path('api/rooms/<int:room_id>/check_in', update_room_status, name='update_room_status'),
    path('api/bookings/<int:pk>/confirm/', BookingViewSet.as_view({'post': 'confirm_booking'}), name='confirm-booking'),
    path('api/bookings/<int:pk>/cancel/', BookingViewSet.as_view({'post': 'cancel_booking'}), name='cancel-booking'),
    
]


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/serializers.py

from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import Room, Client, ClientInfo, Employee, Floor, Day, EmployeeFloor, EmployeeDay, Booking, CustomUser
from .models import Review



User = get_user_model()

class RoomSerializer(serializers.ModelSerializer):
    current_occupant = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = Room
        fields = '__all__'

class ClientInfoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClientInfo
        fields = '__all__'

class EmployeeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Employee
        fields = '__all__'

class FloorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Floor
        fields = '__all__'

class DaySerializer(serializers.ModelSerializer):
    class Meta:
        model = Day
        fields = '__all__'

class EmployeeDaySerializer(serializers.ModelSerializer):
    class Meta:
        model = EmployeeDay
        fields = '__all__'

class EmployeeFloorSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)
    class Meta:
        model = EmployeeFloor
        fields = ['employee', 'floor', 'room']

class NestedClientSerializer(serializers.ModelSerializer):
    room = RoomSerializer(read_only=True)
    client_info = ClientInfoSerializer(read_only=True)
    class Meta:
        model = Client
        fields = ['id', 'room', 'client_info']

class ComplexRoomSerializer(serializers.ModelSerializer):
    clients = NestedClientSerializer(many=True, read_only=True)
    employees = EmployeeFloorSerializer(source='employee_floor_set', many=True, read_only=True)
    booked_by = serializers.SerializerMethodField()

    class Meta:
        model = Room
        fields = ['id', 'room_type', 'status', 'cost', 'floor', 'clients', 'employees', 'booked_by']

    def get_booked_by(self, obj):
        return obj.booked_by.username if obj.booked_by else None


class ClientSerializer(serializers.ModelSerializer):
    client_info = ClientInfoSerializer()
    class Meta:
        model = Client
        fields = '__all__'
    def create(self, validated_data):
        client_info_data = validated_data.pop('client_info')
        client_info = ClientInfo.objects.create(**client_info_data)
        client = Client.objects.create(client_info=client_info, **validated_data)
        return client

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'first_name', 'last_name', 'email', 'phone')
        extra_kwargs = {'phone': {'required': False}}

class BookingSerializer(serializers.ModelSerializer):
    user_details = serializers.SerializerMethodField()
    room_details = serializers.SerializerMethodField()

    class Meta:
        model = Booking
        fields = ['id', 'user', 'room', 'start_date', 'end_date', 'confirmed', 'user_details', 'room_details']

    def get_user_details(self, obj):
        return UserSerializer(obj.user).data

    def get_room_details(self, obj):
        return RoomSerializer(obj.room).data


class FloorOccupancySerializer(serializers.ModelSerializer):
    occupied_rooms_count = serializers.SerializerMethodField()
    class Meta:
        model = Floor
        fields = ['number', 'occupied_rooms_count']
    def get_occupied_rooms_count(self, floor):
        return Room.objects.filter(floor=floor, status='occupied').count()


class ReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = Review
        fields = ['author', 'text', 'created_at']


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib import admin


class CustomUser(AbstractUser):
    phone = models.CharField("Телефон", max_length=15, blank=True, null=True)

    REQUIRED_FIELDS = ['first_name', 'last_name', 'phone']

    def __str__(self):
        return self.username


class Floor(models.Model):
    number = models.IntegerField()

    def __str__(self):
        return f"Floor {self.number}"
    





class Room(models.Model):
    ROOM_TYPES = (
        ('single', 'Single'),
        ('double', 'Double'),
        ('suite', 'Suite'),
    )
    STATUS = (
        ('available', 'Available'),
        ('occupied', 'Occupied'),
        ('cleaning', 'Cleaning'),
    )
    room_type = models.CharField(max_length=10, choices=ROOM_TYPES)
    status = models.CharField(max_length=10, choices=STATUS)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    floor = models.ForeignKey(Floor, on_delete=models.CASCADE, related_name='rooms')
    booked_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='booked_rooms')
    booking_confirmed = models.BooleanField(default=False)
    current_occupant = models.ForeignKey(
        settings.AUTH_USER_MODEL, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True, 
        related_name='occupied_rooms'
    )
    
    def set_booked(self):
        self.status = 'booked'
        self.save()

    def set_occupied(self):
        self.status = 'occupied'
        self.save()

    def set_available(self):
        self.status = 'available'
        self.save()
    
    def set_occupied(self, is_occupied):
        self.status = 'occupied' if is_occupied else 'available'
        self.save()
    
    def confirm_booking(self, user):
        self.status = 'occupied'
        self.current_occupant = user
        self.save()

    def cancel_booking(self):
        self.status = 'available'
        self.current_occupant = None
        self.save()


    def __str__(self):
        return f"{self.get_room_type_display()} on Floor {self.floor.number}"
    

    
    





class Booking(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, 
        on_delete=models.CASCADE
    )
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    start_date = models.DateField()
    end_date = models.DateField()
    confirmed = models.BooleanField(default=False)

    def __str__(self):
        return f'Booking {self.id} for {self.room}'







class ClientInfo(models.Model):
    passport_number = models.CharField(max_length=50)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    patronymic = models.CharField(max_length=100, blank=True)
    city = models.CharField(max_length=100)
    check_in_date = models.DateTimeField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Client(models.Model):
    client_info = models.ForeignKey(ClientInfo, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, related_name='clients')

    def __str__(self):
        return f"Client {self.client_info.first_name} {self.client_info.last_name}"

class Employee(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    patronymic = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Day(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class EmployeeFloor(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    floor = models.ForeignKey(Floor, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='employee_floor_set')  # связал с комнатами


    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} on Floor {self.floor.number}"

class EmployeeDay(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    day = models.ForeignKey(Day, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} on {self.day.name}"

# models.py

class Review(models.Model):
    author = models.CharField(max_length=255)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'Review by {self.author}'


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/views.py

# views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth import login, authenticate
from .models import Room, Client, Employee, Floor, Day, EmployeeFloor, EmployeeDay, ClientInfo, Booking, CustomUser,Review
from .serializers import (RoomSerializer, ClientSerializer, EmployeeSerializer, 
                          FloorSerializer, DaySerializer, EmployeeFloorSerializer, 
                          EmployeeDaySerializer, ClientInfoSerializer, BookingSerializer, 
                          ComplexRoomSerializer, NestedClientSerializer, FloorOccupancySerializer, ReviewSerializer,
                          UserSerializer)
from .forms import CustomUserCreationForm
from django.contrib.auth import get_user_model
from rest_framework import status, viewsets
from datetime import datetime
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework_simplejwt.tokens import RefreshToken, AccessToken, TokenError
import json
from rest_framework.views import APIView
from django.db.models import Count, Avg
from django.shortcuts import get_object_or_404
from .models import Room
from rest_framework.decorators import api_view
from rest_framework.response import Response

User = get_user_model()



from django.http import JsonResponse
from .models import Room
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated




@api_view(['POST'])
def update_room_status(request, room_id):
    room = Room.objects.get(id=room_id)
    is_occupied = request.data.get('is_occupied')
    room.set_occupied(is_occupied)
    serializer = RoomSerializer(room)
    return Response(serializer.data)





class RoomStatisticsView(APIView):
    def get(self, request):
        stats = Room.objects.values('room_type').annotate(
            total=Count('id'),
            average_cost=Avg('cost')
        ).order_by('room_type')
        return Response(stats)

class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.all()
    serializer_class = ClientSerializer

class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer

class FloorOccupancyViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Floor.objects.all()
    serializer_class = FloorOccupancySerializer

class BookingViewSet(viewsets.ModelViewSet):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer

    @action(detail=False, methods=['get'])
    def by_date(self, request):
        date = request.query_params.get('date')
        bookings = Booking.objects.filter(start_date=date)
        serializer = self.get_serializer(bookings, many=True)
        return Response(serializer.data)

    def perform_create(self, serializer):
        booking = serializer.save(user=self.request.user)
        room = booking.room
        room.confirm_booking(self.request.user)

    @action(detail=True, methods=['post'])
    def confirm_booking(self, request, pk=None):
        booking = self.get_object()
        booking.room.confirm_booking(request.user)
        return Response({'status': 'booking confirmed'})

    @action(detail=True, methods=['post'])
    def cancel_booking(self, request, pk=None):
        booking = self.get_object()
        booking.room.cancel_booking()
        booking.delete()  # Удаляем бронирование
        return Response({'status': 'booking cancelled'})

class ComplexRoomViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Room.objects.all().prefetch_related('clients', 'employee_floor_set')
    serializer_class = ComplexRoomSerializer

class NestedClientViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Client.objects.select_related('room', 'client_info')
    serializer_class = NestedClientSerializer

class UserViewSet(viewsets.ModelViewSet):
    queryset = CustomUser.objects.all()
    serializer_class = UserSerializer

class RoomViewSet(viewsets.ModelViewSet):
    queryset = Room.objects.all()
    serializer_class = RoomSerializer

class FloorViewSet(viewsets.ModelViewSet):
    queryset = Floor.objects.all()
    serializer_class = FloorSerializer

class DayViewSet(viewsets.ModelViewSet):
    queryset = Day.objects.all()
    serializer_class = DaySerializer

class EmployeeFloorViewSet(viewsets.ModelViewSet):
    queryset = EmployeeFloor.objects.all()
    serializer_class = EmployeeFloorSerializer

class EmployeeDayViewSet(viewsets.ModelViewSet):
    queryset = EmployeeDay.objects.all()
    serializer_class = EmployeeDaySerializer

class ClientInfoViewSet(viewsets.ModelViewSet):
    queryset = ClientInfo.objects.all()
    serializer_class = ClientInfoSerializer

@csrf_exempt
def login_view(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')
        user = authenticate(username=username, password=password)
        if user is not None:
            refresh = RefreshToken.for_user(user)
            access_token = str(refresh.access_token)
            try:
                AccessToken(access_token)
                login(request, user)
                return JsonResponse({'status': 'success', 'refresh': str(refresh), 'access': access_token})
            except TokenError as e:
                return JsonResponse({'status': 'error', 'message': str(e)}, status=401)
        else:
            return JsonResponse({'status': 'error'}, status=401)
    return JsonResponse({'error': 'Invalid method'}, status=405)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def book_room(request, room_id):
    room = get_object_or_404(Room, pk=room_id)
    if room.status != 'available':
        return JsonResponse({'status': 'error', 'message': 'Room is not available'}, status=400)
    
    start_date = request.data.get('start_date')
    end_date = request.data.get('end_date')
    if not start_date or not end_date:
        return JsonResponse({'status': 'error', 'message': 'Start date and end date are required'}, status=400)
    
    try:
        start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
        if start_date >= end_date:
            return JsonResponse({'status': 'error', 'message': 'End date must be after start date'}, status=400)
    except ValueError:
        return JsonResponse({'status': 'error', 'message': 'Invalid date format'}, status=400)
    
    booking = Booking.objects.create(user=request.user, room=room, start_date=start_date, end_date=end_date)
    room.status = 'booked'
    room.save()
    return JsonResponse({'status': 'success', 'booking_id': booking.id})


def rooms_list(request):
    room_type_query = request.GET.get('room_type', '').strip()
    room_status_query = request.GET.get('room_status', '').strip()
    rooms = Room.objects.all()
    if room_type_query:
        rooms = rooms.filter(room_type__iexact=room_type_query)
    if room_status_query:
        rooms = rooms.filter(status__iexact=room_status_query)
    return render(request, 'hotel_api/rooms_list.html', {'rooms': rooms})

@login_required
def book_selected_rooms(request):
    if request.method == 'POST':
        room_ids = request.POST.getlist('room_ids')
        rooms = Room.objects.filter(id__in=room_ids, is_available=True)
        for room in rooms:
            room.booked_by = request.user
            room.is_available = False
            room.save()
        return redirect('rooms_list')
    return render(request, 'hotel_api/rooms_list.html')

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def generate_token(request):
    user = request.user
    refresh = RefreshToken.for_user(user)
    refresh.access_token.set_exp(timezone.now() + SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'])
    access_token = str(refresh.access_token)
    return Response({'access_token': access_token})

@csrf_exempt
def api_login(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')
        user = authenticate(username=username, password=password)
        if user is not None:
            refresh = RefreshToken.for_user(user)
            return JsonResponse({'refresh': str(refresh), 'access': str(refresh.access_token)})
        else:
            return JsonResponse({'message': 'Неверные учетные данные'}, status=401)
    return JsonResponse({'message': 'Неверный запрос'}, status=400)

@csrf_exempt
def register_user(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = User.objects.create_user(username=data['username'], email=data['email'], password=data['password'])
        return JsonResponse({'id': user.id, 'username': user.username}, status=201)
    return JsonResponse({'error': 'Invalid request'}, status=400)

def login_redirect(request):
    return redirect("http://localhost:8080/login")

def alternative_login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            print("с днем рождения!")
            pass
    form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})

def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
    else:
        form = CustomUserCreationForm()
    return render(request, 'registration/register.html', {'form': form})

@login_required(login_url='/login/')
def home(request):
    return render(request, 'hotel_api/home.html')

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('home')
    else:
        form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})

def clients_list(request):
    clients = Client.objects.all()
    return render(request, 'hotel_api/client_list.html', {'clients': clients})

def employees_list(request):
    employees = Employee.objects.all()
    return render(request, 'hotel_api/employee_list.html', {'employees': employees})

def bookings_list(request):
    return render(request, 'hotel_api/bookings_list.html')

def floors_list(request):
    floors = Floor.objects.all()
    return render(request, 'hotel_api/floor_list.html', {'floors': floors})

def staff_management(request):
    return render(request, 'hotel_api/staff_management.html')

def reports(request):
    return render(request, 'hotel_api/reports.html')

def settings(request):
    return render(request, 'hotel_api/settings.html')

def client_info_list(request):
    client_info = ClientInfo.objects.all()
    return render(request, 'hotel_api/client_info_list.html', {'client_info': client_info})

def days_list(request):
    days = Day.objects.all()
    return render(request, 'hotel_api/days_list.html', {'days': days})

def employee_floors_list(request):
    employee_floors = EmployeeFloor.objects.all()
    return render(request, 'hotel_api/employee_floors_list.html', {'employee_floors': employee_floors})

def employee_days_list(request):
    employee_days = EmployeeDay.objects.all()
    return render(request, 'hotel_api/employee_days_list.html', {'employee_days': employee_days})



class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer



File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/rooms_list.html

<!DOCTYPE html>
<html>
<head>
    <title>Rooms List</title>
    <style>
        /* Add your CSS styles here */
        h1 {
            font-size: 24px;
            text-align: center;
        }

        form {
            margin: 20px 0;
            text-align: center;
        }

        label {
            font-weight: bold;
        }

        select {
            margin: 5px;
        }

        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }

        th, td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        tbody tr:hover {
            background-color: #f5f5f5;
        }

        .back-button {
            display: block;
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <a href="http://localhost:8000/" class="back-button">Back to Home</a>
    
    <h1>Rooms List</h1>

    <form method="get">
        <!-- Filter by Room Type -->
        <label for="room_type">Room Type:</label>
        <select name="room_type" id="room_type">
            <option value="">--Select a Type--</option>
            <option value="single">Single</option>
            <option value="double">Double</option>
            <option value="suite">Suite</option>
        </select>
    
        <!-- Filter by Room Status -->
        <label for="room_status">Room Status:</label>
        <select name="room_status" id="room_status">
            <option value="">--Select a Status--</option>
            <option value="available">Available</option>
            <option value="occupied">Occupied</option>
            <option value="cleaning">Cleaning</option>
        </select>
    
        <input type="submit" value="To book">
        <input type="submit" value="Filter">
    </form>

    <table>
        <thead>
            <tr>
                <th>Room Type</th>
                <th>Floor Number</th>
                <th>Status</th>
                <th>Cost</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for room in rooms %}
            <tr>
                <td>{{ room.get_room_type_display }}</td>
                <td>{{ room.floor.number }}</td>
                <td>{{ room.get_status_display }}</td>
                <td>{{ room.cost }}</td>
                <td>
                    {% if room.status == 'available' %}
                        <a href="{% url 'hotel_api:book_room' room.id %}">Забронировать</a>
                    {% endif %}
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/menu.html

<!DOCTYPE html>
<html>
<head>
    <title>Hotel Management Menu</title>
    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
</head>
<body>
    <header>
        <h1>Welcome to the Hotel Management System</h1>
    </header>

    <nav class="menu">
        <ul>
            <li><a href="{% url 'rooms_list' %}">Rooms</a></li>
            <li><a href="{% url 'clients_list' %}">Clients</a></li>
            <li><a href="{% url 'employees_list' %}">Employees</a></li>
            {% if user.is_authenticated %}
                <li><a href="{% url 'logout' %}">Logout</a></li>
            {% else %}
                <li><a href="{% url 'login' %}">Login</a></li>
            {% endif %}
        </ul>
    </nav>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_management/settings.py

"""
Django settings for hotel_management project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta 

ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4o=g1ta42q5sx45l^9uz(e0+7jez!^w4ehcqxp6@tn(!suoke2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost']

LOGOUT_REDIRECT_URL = '/'

CSRF_TRUSTED_ORIGINS = ["http://localhost:8080"]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080"
]

 
LOGIN_REDIRECT_URL = '/hotel_api/'  






CORS_ORIGIN_ALLOW_ALL = True

INSTALLED_APPS = [
    'hotel_api', 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'drf_yasg',
    'corsheaders',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'hotel_api.utils.DisableCSRF',  
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'hotel_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'hotel_management.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Путь к статическим файлам (CSS, JavaScript, Images)

STATICFILES_DIRS = [
    'C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/dist',
]




# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ),
}

# Djoser settings
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
        'SERIALIZERS': {
        'user_create': 'hotel_api.serializers.UserSerializer',
        'user': 'hotel_api.serializers.UserSerializer',
        'current_user': 'hotel_api.serializers.UserSerializer',
    },
}


AUTH_USER_MODEL = 'hotel_api.CustomUser'




EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# settings.py

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_REFRESH_AFTER_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_SLIDING_LIFETIME': timedelta(days=15),
    'SLIDING_TOKEN_SLIDING_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_TYPE': 'sliding',
    'SLIDING_TOKEN_REFRESH_ROTATE': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),

}


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_management/urls.py

# hotel_management/hotel_management/urls.py

from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from hotel_api import views as hotel_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', auth_views.LoginView.as_view(), name='login'),
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
    path('register/', hotel_views.register_view, name='register'),
    path('home/', hotel_views.home, name='home'),  
    path('hotel_api/', include('hotel_api.urls')),
    
]


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/registration/register.html

<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    <form method="post" action="{% url 'register' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Register">
    </form>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/registration/login.html

{% load static %}

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
    <script>
        async function loginWithToken() {
            const token = document.getElementById('token').value;
            try {
                const response = await fetch('/home', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    // Перенаправление на страницу /home
                    window.location.href = 'http://localhost:8000/home/';
                } else {
                    alert("Ошибка аутентификации");
                }
            } catch (error) {
                console.error('Ошибка сети', error);
            }
        }
    </script>
    
</head>
<body>
    <!-- Форма для авторизации с использованием имени пользователя и пароля -->
    <h2>Login</h2>
    <form method="post" action="{% url 'hotel_api:alternative_login' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Login">
    </form>

    <!-- Форма для авторизации через токен -->
    <h2>Авторизация через токен</h2>
    <div>
        <input type="text" id="token" placeholder="Введите токен">
        <button type="button" onclick="loginWithToken()">Войти с токеном</button>
    </div>

    <!-- Кнопка регистрации -->
    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser

class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = CustomUser
        fields = UserCreationForm.Meta.fields + ('phone',)


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/utils.py

from django.utils.deprecation import MiddlewareMixin
from django.conf import settings

class DisableCSRF(MiddlewareMixin):
    def process_request(self, request):
        if settings.DEBUG:
            setattr(request, '_dont_enforce_csrf_checks', True)


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/book_room.html

<!DOCTYPE html>
<html>
<head>
    <title>Book Room</title>
</head>
<body>
    <h1>Book Room</h1>
    <form method="post">
        {% csrf_token %}
        <!-- Поле для ввода даты начала бронирования -->
        <div>
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" name="start_date" required>
        </div>
        <!-- Поле для ввода даты окончания бронирования -->
        <div>
            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" name="end_date" required>
        </div>
        <!-- Кнопка для отправки формы -->
        <input type="submit" value="Book">
    </form>
</body>
</html>
