File: models.py
# Импортируем необходимые модули
from django.db import models
from django.contrib.auth.models import User
from django.conf import settings
from django.contrib.auth.models import AbstractUser
from django.urls import reverse



# Создаем модель CustomUser, которая будет расширять стандартную модель User
class CustomUser(AbstractUser):
    passport_number = models.CharField(max_length=20, blank=True, null=True)  # Поле для номера паспорта
    home_address = models.CharField(max_length=255, blank=True, null=True, default="Default Address")  # Поле для домашнего адреса
    nationality = models.CharField(max_length=50, blank=True, null=True)  # Поле для национальности

    # Функция, которая возвращает строковое представление пользователя
    def __str__(self):
        return self.username

# Модель OwnerProfile, для связи с пользователем
class OwnerProfile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  # Создаем связь с моделью CustomUser
    passport_number = models.CharField(max_length=20)  # Поле для номера паспорта
    home_address = models.CharField(max_length=100)  # Поле для домашнего адреса
    nationality = models.CharField(max_length=50)  # Поле для национальности

    # Функция, которая возвращает строковое представление профиля владельца
    def __str__(self):
        return self.user.username
# Модель автомобилей
class Car(models.Model):
    car_id = models.AutoField(primary_key=True)
    license_plate = models.CharField(max_length=15)
    make = models.CharField(max_length=20)
    model = models.CharField(max_length=20)
    color = models.CharField(max_length=30, null=True)

# Модель владельцев автомобилей
class Owner(models.Model):
    owner_id = models.AutoField(primary_key=True)
    last_name = models.CharField(max_length=30)
    first_name = models.CharField(max_length=30)
    birth_date = models.DateTimeField(null=True)



# Модель владения автомобилем
class Ownership(models.Model):
    owner = models.ForeignKey('Owner', on_delete=models.CASCADE)
    car = models.ForeignKey('Car', on_delete=models.CASCADE)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField(null=True)

# Модель водительских удостоверений
class DriverLicense(models.Model):
    owner = models.ForeignKey('Owner', on_delete=models.CASCADE)
    license_number = models.CharField(max_length=10)
    license_type = models.CharField(max_length=10)
    issue_date = models.DateTimeField()


class ExampleModel(models.Model):
    # fields of the model
    title = models.CharField(max_length = 200)
    description = models.TextField()
    # renames the instances of the model
    # with their title name
    def __str__(self):
        return self.titleFile: settings.py
"""
Django settings for simple_django_web_project project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = 'project_first_app.CustomUser'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dx9mdg*p@4c5u_6s#z8361we=w42@kfmc(=&$-3l%^#)7#a*gh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'project_first_app',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'simple_django_web_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'project_first_app/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'simple_django_web_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
File: admin.py
from django.contrib import admin
from .models import Owner, Car, Ownership, DriverLicense, ExampleModel
from .models import CustomUser, OwnerProfile

admin.site.register(CustomUser)
admin.site.register(OwnerProfile)
admin.site.register(Owner)
admin.site.register(Car)
admin.site.register(Ownership)
admin.site.register(DriverLicense)
admin.site.register(ExampleModel)

File: urls.py
from django.urls import path
from .views import create_view
# importing views from views..py
from .views import ExampleList
from .views import list_view
from .views import OwnerListView
from . import views # Подключение файла контроллеров, описанного в приложении
# urls.py
from django.urls import path
from .views import create_owner
from .views import CarCreateView, CarUpdateView, CarDeleteView
from .views import CarListView, create_car



urlpatterns = [
    path('example_list/', list_view, name='example_list'),
    path('example/', ExampleList.as_view(), name='example_list_view'),
    path('owners/', views.owner_list, name='owner_list'),
    path('cars/', views.car_list, name='car_list'),
    path('owner/<int:owner_id>/', views.owner_detail, name='owner_detail'),
    path('owner/list/', OwnerListView.as_view(), name='owner_list_view'),
    path('example_create', create_view),
    path('car/list/', views.CarListView.as_view(), name='car-list'),
    path('car/<int:pk>/update/', CarUpdateView.as_view(), name='update_car'),
    path('car/<int:pk>/delete/', CarDeleteView.as_view(), name='delete_car'),
    path('car/create/', create_car, name='create_car'),
    path('owner/create/', create_owner, name='create_owner'),
    


]



File: views.py
from django.http import Http404
from django.shortcuts import render
from django.http import HttpResponse
from django.views.generic.list import ListView
from .models import Owner, Car, Ownership, DriverLicense, ExampleModel
from .forms import ExampleForm
from django.shortcuts import render, redirect
from .forms import OwnerForm
from .forms import CarForm
from django.views.generic.edit import CreateView, DeleteView, UpdateView 
from django.urls import reverse_lazy 




class CarListView(ListView):
    model = Car
    template_name = 'car_list.html'
    context_object_name = 'cars'



class CarCreateView(CreateView):
    model = Car
    form_class = CarForm
    template_name = 'create_car.html'
    success_url = '/car/list/'  # URL для перенаправления после успешного создания


class CarUpdateView(UpdateView):
    model = Car
    form_class = CarForm
    template_name = 'update_car.html'
    success_url = '/car/list/'  # URL для перенаправления после успешного обновления




class CarDeleteView(DeleteView):
    model = Car
    template_name = 'delete_car.html'
    success_url = '/car/list/'  # URL для перенаправления после успешного удаления



def create_car(request):
    if request.method == 'POST':
        form = CarForm(request.POST)
        if form.is_valid():
            form.save()
    else:
        form = CarForm()
    
    return render(request, 'create_car.html', {'form': form})



def create_owner(request):
    if request.method == 'POST':
        form = OwnerForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('list_owners')  # Перенаправление на список владельцев
    else:
        form = OwnerForm()
    return render(request, 'create_owner.html', {'form': form})






def create_view(request):
    context = {}
    form = ExampleForm(request.POST or None)
    if form.is_valid():
        form.save()
    context['form'] = form
    return render(request, "create_view.html", context)













# Список машин
def car_list(request):
    make = request.GET.get('make')
    model = request.GET.get('model')
    car_id = request.GET.get('car_id')

    queryset = Car.objects.all()

    if make:
        queryset = queryset.filter(make__icontains=make)

    if model:
        queryset = queryset.filter(model__icontains=model)

    if car_id:
        queryset = queryset.filter(pk=car_id)

    cars = queryset

    return render(request, 'car_list.html', {'cars': cars})

# Не важно, это я для себя добавил, чтобы посмотреть список людей и фильтровать
class OwnerListView(ListView):
    model = Owner
    template_name = 'owner_list.html'

    def get_queryset(self):
        last_name = self.request.GET.get('last_name')
        first_name = self.request.GET.get('first_name')

        queryset = Owner.objects.all()

        if last_name:
            queryset = queryset.filter(last_name__icontains=last_name)
        
        if first_name:
            queryset = queryset.filter(first_name__icontains=first_name)

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['last_name'] = self.request.GET.get('last_name', '')
        context['first_name'] = self.request.GET.get('first_name', '')
        return context

class ExampleList(ListView):
    model = Owner
    template_name = 'cvb_list_view.html'

def owner_list(request):
    last_name = request.GET.get('last_name')
    first_name = request.GET.get('first_name')
    owners = Owner.objects.all()

    if last_name:
        owners = owners.filter(last_name__icontains=last_name)

    if first_name:
        owners = owners.filter(first_name__icontains=first_name)

    return render(request, 'project_first_app/owner_list.html', {'owners': owners})

def list_view(request):
    context = {}
    context["dataset"] = ExampleModel.objects.all()
    return render(request, "list_view.html", context)

def owner_detail(request, owner_id):
    try:
        owner = Owner.objects.get(pk=owner_id)
    except Owner.DoesNotExist:
        raise Http404("Владелец не найден.")
    return render(request, 'owner.html', {'owner': owner})
