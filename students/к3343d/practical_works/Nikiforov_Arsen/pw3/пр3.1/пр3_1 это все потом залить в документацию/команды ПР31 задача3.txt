Агрегация:
Допустим, у нас есть модель Warrior с полем level, и хотим найти средний уровень воинов.


>>> from django.db.models import Avg
>>> from myapp.models import Warrior
>>>
>>> # Рассчитаем средний уровень воинов
>>> average_level = Warrior.objects.aggregate(Avg("level"))
>>>
>>> print("Средний уровень воинов:", average_level['level__avg'])
Средний уровень воинов: 168.71428571428572







Аннотация:
Теперь предположим, что у нас есть модели Warrior, Skill и связь между ними через ManyToManyField. Мы хотим узнать количество умений у каждого воина.



>>> from myapp.models import Warrior
>>> # Аннотируем каждого воина количеством его умений
>>> annotated_warriors = Warrior.objects.annotate(skill_count=models.Count('warrior_skill'))
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'models' is not defined
>>>
>>>
>>> from myapp.models import Warrior
>>> from django.db.models import Count
>>> # Аннотируем каждого воина количеством его умений
>>> annotated_warriors = Warrior.objects.annotate(skill_count=Count('warrior_skill'))
>>>
>>> for warrior in annotated_warriors:
...     print(f"Воин {warrior.name} имеет {warrior.skill_count} умений.")
...
Воин Николай Леонтьев имеет 1 умений.
Воин Арсен Никифоров имеет 2 умений.
Воин Артур Пирожков имеет 0 умений.
Воин Дмитрий Урбан имеет 1 умений.
Воин Никита Михайловский имеет 1 умений.
Воин Могучий воин имеет 1 умений.
Воин Милый воин имеет 1 умений.
>>>



Группировка с .values() и упорядочивание:
Допустим, у нас есть поле race в модели Warrior, и Мы хотим узнать количество воинов разных рас.

>>> from myapp.models import Warrior
>>> from django.db.models import Count
>>> # Группировка по расе и подсчет количества воинов каждой расы
>>> grouped_warriors = Warrior.objects.values('race').annotate(warrior_count=Count('id')).order_by('race')
>>>
>>> # Вывод результата
>>> for group in grouped_warriors:
...     print(f"Раса: {group['race']}, Количество воинов: {group['warrior_count']}")
...
Раса: , Количество воинов: 2
Раса: d, Количество воинов: 1
Раса: s, Количество воинов: 3
Раса: t, Количество воинов: 1
>>>
>>>

В этом примере мы используем метод .values("race") для группировки по полю race и метод annotate для подсчета количества воинов каждой расы.




Упорядочивание:
Упорядочим воинов по их уровню.
>>> # Пример использования .order_by() для сортировки воинов по уровню
>>> sorted_warriors = Warrior.objects.order_by("level")
>>>
>>> for warrior in sorted_warriors:
...     print(f"{warrior.name} - Уровень: {warrior.level}")
...
Дмитрий Урбан - Уровень: 11
Никита Михайловский - Уровень: 15
Милый воин - Уровень: 15
Николай Леонтьев - Уровень: 20
Могучий воин - Уровень: 20
Арсен Никифоров - Уровень: 100
Артур Пирожков - Уровень: 1000
>>>

Здесь мы используем метод order_by("level"), чтобы упорядочить воинов по их уровню.