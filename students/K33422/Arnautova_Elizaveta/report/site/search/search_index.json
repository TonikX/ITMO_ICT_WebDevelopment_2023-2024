{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041a33422 \u0410\u0440\u043d\u0430\u0443\u0442\u043e\u0432\u0430 \u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430","title":"\u041a33422 \u0410\u0440\u043d\u0430\u0443\u0442\u043e\u0432\u0430 \u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430"},{"location":"#33422","text":"","title":"\u041a33422 \u0410\u0440\u043d\u0430\u0443\u0442\u043e\u0432\u0430 \u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430"},{"location":"lab1/","text":"\u041c\u0438\u043d\u0438\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u043e \u043d\u0430\u0443\u043a\u0438 \u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u00ab\u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e\u00bb \u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 \u00ab\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438\u00bb \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0412\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u00bb \u0410\u0432\u0442\u043e\u0440: \u0410\u0440\u043d\u0430\u0443\u0442\u043e\u0432\u0430 \u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u043d\u0430 \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442: \u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0413\u0440\u0443\u043f\u043f\u0430: K33421 \u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410\u043d\u0442\u043e\u043d \u0418\u0433\u043e\u0440\u0435\u0432\u0438\u0447 \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2023 \u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435: \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435: Python 2.7-3.6, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python: sys, socket. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b : \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435; \u043c\u043e\u0434\u0435\u043b\u044c TCP/IP; \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTP; \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430; \u0441\u043e\u043a\u0435\u0442\u044b.","title":"Title"},{"location":"lab1/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket HOST = '127.0.0.1' SERVER_PORT = 14900 BUFF_SIZE = 16384 if __name__ == '__main__': server_address = (HOST, SERVER_PORT) with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as conn: # UDP conn.bind(server_address) # \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 print('Server is waiting...') timeout = 30 while True: conn.settimeout(timeout) try: data, client_address = conn.recvfrom(BUFF_SIZE) # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 except socket.timeout: print('Time is out. {0} seconds have passed'.format(timeout)) break print(f'Received message from {client_address}: {data.decode(\"utf-8\")}') # \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 message = 'Hello, client!' conn.sendto(message.encode('utf-8'), client_address) \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket HOST = '127.0.0.1' SERVER_PORT = 14900 BUFF_SIZE = 16384 if __name__ == '__main__': server_address = (HOST, SERVER_PORT) conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP message = 'Hello, server!' try: conn.sendto(message.encode('utf-8'), server_address) response = conn.recv(BUFF_SIZE) print(f'Received response from server: {response.decode(\"utf-8\")}') except ConnectionResetError: print(\"Received no response from server, try again later\") conn.close() \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:","title":"Task 1"},{"location":"lab1/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: 2. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 -- \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket HOST = '127.0.0.1' SERVER_PORT = 14900 BUFF_SIZE = 16384 def get_area_of_trapezoid(a, b, h): \"\"\" >>> get_area_of_trapezoid(4, 7, 4) 22.0 >>> get_area_of_trapezoid(18, 6, 3.5) 42.0 >>> get_area_of_trapezoid(10, 58, 18) 612.0 >>> get_area_of_trapezoid(-4, 7, 4) 'Such a trapezoid does not exist' >>> get_area_of_trapezoid(4, -7, 4) 'Such a trapezoid does not exist' >>> get_area_of_trapezoid(0, 7, 4) 'Such a trapezoid does not exist' >>> get_area_of_trapezoid(0, 0, 4) 'Such a trapezoid does not exist' >>> get_area_of_trapezoid(4, 7, 0) 'Such a trapezoid does not exist' \"\"\" if a <= 0 or b < 0 or h <= 0 or (a == b == 0): return \"Such a trapezoid does not exist\" return (a + b) * h / 2 if __name__ == '__main__': server_address = (HOST, SERVER_PORT) with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn: # TCP conn.bind(server_address) conn.listen(10) print('Server is waiting...') timeout = 30 while True: conn.settimeout(timeout) try: client_socket, address = conn.accept() except socket.timeout: print('Time is out. {0} seconds have passed'.format(timeout)) break with client_socket: message = \"To find the area of a trapezoid, enter the bases a, b and the height h separated by a space\\n(decimal separator dot)\" client_socket.sendall(message.encode('utf-8')) recieved = client_socket.recv(BUFF_SIZE).decode('utf-8') print(f'Client: {recieved}') try: a, b, h = map(float, recieved.split()) result = str(get_area_of_trapezoid(a, b, h)) client_socket.sendall(result.encode('utf-8')) except Exception: client_socket.sendall(\"Something went wrong :(\\nPlease double check your data\".encode('utf-8')) \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket HOST = '127.0.0.1' SERVER_PORT = 14900 BUFF_SIZE = 16384 if __name__ == '__main__': server_address = (HOST, SERVER_PORT) conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # TCP try: conn.connect(server_address) print(f'Server: {conn.recv(BUFF_SIZE).decode(\"utf-8\")}') #\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 params = input() conn.sendall(params.encode('utf-8')) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 print(f'Server: {conn.recv(BUFF_SIZE).decode(\"utf-8\")}') #\u0432\u044b\u0434\u0430\u0447\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 except ConnectionRefusedError: print(\"Server not avaliable, try again later\") conn.close() \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:","title":"Task 2"},{"location":"lab1/task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) HOST = '127.0.0.1' PORT = 14902 sock.bind((HOST, PORT)) sock.listen(1) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{HOST}:{PORT}\") with open('index.html', 'rb') as file: html_content = file.read() while True: clientsocket, address = sock.accept() request_data = clientsocket.recv(1024) response_headers = \"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n\" clientsocket.sendall(response_headers.encode('utf-8') + html_content) clientsocket.close() index.html: <!DOCTYPE html> <html> <head> <title>Web task 3</title> <style> body { font-family: Arial, sans-serif; background-color: #f2f2f2; text-align: center; padding: 100px; } h1 { color: #333; } h3 { color: #666; } </style> </head> <body> <h1 align=\"center\">Hello, world!</h1> <h3 align=\"center\">The 3rd task is working!</h3> </body> </html> \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:","title":"Task 3"},{"location":"lab1/task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: 4. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import threading HOST = '127.0.0.1' SERVER_PORT = 14901 BUFF_SIZE = 16384 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((HOST, SERVER_PORT)) server.listen() clients = [] names = [] def broadcast(message, sender): # \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f: for client in clients: if sender != client: client.send(message) def handle(client): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c while True: # \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. try: # \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f broadcast \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c. message = client.recv(BUFF_SIZE) broadcast(message, client) except: # \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f), \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 # clients \u0438 names, \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u0446\u0438\u043a\u043b\u0430. name = names[clients.index(client)] clients.remove(client) names.remove(name) client.close() break def receive(): # \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 while True: # \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client, address = server.accept() print(\"Connected with {}\".format(str(address))) # \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 client.send('name'.encode('utf-8')) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. name = client.recv(BUFF_SIZE).decode('utf-8') names.append(name) # \u0438\u043c\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a names clients.append(client) # \u0441\u043e\u043a\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a clients. # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u043e \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. print(\"Name is {}\".format(name)) broadcast(\"{} joined!\".format(name).encode('utf-8'), client) # \u041a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. client.send('You are connected!\\nTo terminate the connection to the server, enter leave'.encode('utf-8')) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f handle \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c thread = threading.Thread(target=handle, args=(client,)) thread.start() receive() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket import threading HOST = '127.0.0.1' SERVER_PORT = 14901 BUFF_SIZE = 16384 name = input(\"What is your name? \") # \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP \u0441\u043e\u043a\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client.connect((HOST, SERVER_PORT)) # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 def input_information(): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 while True: # \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 try: message = client.recv(BUFF_SIZE).decode('utf-8') if message == 'name': # \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 'name', \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0435 \u0438\u043c\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 client.send(name.encode('utf-8')) else: # \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c print(message) except: client.close() break def output_information(): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 while True: message = input('') # \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f if message == 'leave': # \u0415\u0441\u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 'leave', client.send(f'*{name} left*'.encode('utf-8')) # \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e \u0441\u0432\u043e\u0435\u043c \u0443\u0445\u043e\u0434\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 client.close() # \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 break message = '{}: {}'.format(name, message) # \u0438\u043d\u0430\u0447\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \"{\u0438\u043c\u044f}: {\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435}\" client.send(message.encode('utf-8')) # \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 receive_thread = threading.Thread(target=input_information) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 input_information receive_thread.start() write_thread = threading.Thread(target=output_information) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 output_information write_thread.start() \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432: \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043a\u0442\u043e-\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0438\u043c\u0435\u043d\u0435\u043c. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u044d\u0442\u043e\u043c. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:","title":"Task 4"},{"location":"lab1/task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket from email.parser import Parser from functools import lru_cache from urllib.parse import parse_qs, urlparse from template import HTML_STYLE, ADD_GRADE, NO_PAGE, YOUR_MARKS, STARTER, ADDER HOST = '127.0.0.1' SERVER_PORT = 14901 MAX_LINE = 64 * 1024 MAX_HEADERS = 100 class Request: # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430. def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property def body(self): size = self.headers.get('Content-Length') if not size: return None content = self.rfile.read(int(size)) return content.decode('utf-8') @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def query_body(self): return parse_qs(self.body) class Response: # \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u043e\u0442\u0432\u0435\u0442 \u0438 \u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, server_address): self.server_address = server_address self.conn = None self.grades = {} def serve_forever(self): # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server_sock.bind(self.server_address) server_sock.listen(10) print(\"Server is listening...\") while True: client_socket, _ = server_sock.accept() try: self.serve_client(client_socket) except Exception as e: print('Connection failed', e) finally: server_sock.close() print(\"Server stopped\") def serve_client(self, conn): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 try: req = self.parse_request(conn) response = self.handle_request(req) self.send_response(conn, response) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 except ConnectionResetError: conn = None except Exception as e: print(\"Error\", e) if conn: conn.close() def parse_request(self, conn): # \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 rfile = conn.makefile('rb') raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise Exception('Request line is too long') req_line = str(raw, 'iso-8859-1') req_line = req_line.rstrip('\\r\\n') words = req_line.split() if len(words) != 3: raise Exception('Malformed request line') method, target, version = words if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') headers = self.parse_headers(rfile) host = headers.get('Host') if not host: raise Exception('Bad request') return Request(method, target, version, headers, rfile) @staticmethod def parse_headers(rfile): # \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise Exception('Header line is too long') if line in (b'\\r\\n', b'\\n', b''): # \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 break headers.append(line) if len(headers) > MAX_HEADERS: raise Exception('Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def handle_request(self, req): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0442\u0432\u0435\u0442 if req.path == '/' and req.method == 'POST': # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0443\u0442\u044c \u0438 \u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, return self.handle_post(req) # \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u043d\u044f\u0442\u044c. if req.method == 'GET': if req.path == '/add_grade': body = STARTER + HTML_STYLE + ADD_GRADE return self.handle_get(body) elif req.path == '/': return self.handle_get() content = STARTER + HTML_STYLE + NO_PAGE return self.handle_get(content) def handle_get(self, body=None): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b GET \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 content_type = 'text/html; charset=utf-8' if body is None: body = STARTER + HTML_STYLE + YOUR_MARKS for subject, grades in self.grades.items(): # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0432 \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 grade = [] for g in grades: grade.append(g) body += f\"\"\" <tr> <td style=\"border: 1px solid black; padding: 4px;\">{subject}</td> <td style=\"border: 1px solid black; padding: 4px;\">{', '.join(grade)}</td> </tr> \"\"\" body += ADDER body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, req): # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b POST \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c self.grades subject = req.query_body['subject'][0] grade = req.query_body['grade'][0] try: # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a self.grades[subject].append(grade) except KeyError: # \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043f\u0430\u0440\u0443 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 self.grades. self.grades[subject] = [grade] return self.handle_get() # \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 handle_get \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438. @staticmethod def send_response(conn, resp): # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() if __name__ == '__main__': server_address = (HOST, SERVER_PORT) my_server = MyHTTPServer(server_address) my_server.serve_forever()","title":"Task 5"},{"location":"lab2/forms/","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 class RegisterForm(UserCreationForm): class Meta: model = User fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2'] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): form.save() return redirect('/airport') else: form = RegisterForm() return render(request, 'registration/register.html', {'form': form}) HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 {% extends 'base.html' %} {% block title %}Register{% endblock %} {% load crispy_forms_tags %} {% block content %} <div class=\"content-section\"> <form method=\"POST\" class=\"form-group\"> {% csrf_token %} <legend class=\"border-bottom mb-3\">Create an Account</legend> {{form|crispy}} <button name=\"create\" type=\"submit\" class=\"btn btn-success\">Register</button> </form> </div> {% endblock %} \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['seat_number'] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f def make_reservation(request, flight_id, reservation_id=None): if request.user.is_authenticated: if request.method == 'POST': flight = get_object_or_404(Flight, pk=flight_id) if reservation_id is None: form = ReservationForm(request.POST) if form.is_valid(): new_res = form.save(commit=False) new_res.flight = flight new_res.passenger = request.user new_res.save() return redirect('/airport/list_reservations') else: reservation = get_object_or_404(Reservation, pk=reservation_id) form = ReservationForm(request.POST, instance=reservation) form.save() return redirect('/airport/list_reservations') else: form = ReservationForm() return render(request, 'make_reservation.html', {'form': form, 'flight_id': flight_id, 'reservation_id': reservation_id}) else: return HttpResponse('Please sign in to manage your reservations.') HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f {% block title %}Enter your seat number{% endblock %} {% block content %} <div class=\"content-section\"> {% if reservation_id %} <form method=\"POST\" action=\"/airport/make_reservation/{{ flight_id }}/{{ reservation_id }}/\"> {% csrf_token %} {{ form }} <button name=\"create\" type=\"submit\">Make reservation</button> </form> {% else %} <form method=\"POST\" action=\"/airport/make_reservation/{{ flight_id }}/\"> {% csrf_token %} {{ form }} <button name=\"create\" type=\"submit\">Make reservation</button> </form> {% endif %} </div> {% endblock %} <form action=\"http://127.0.0.1:8000/airport\"> <input type=\"submit\" value=\"Return to the main page\" /> </form> \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0421 \u0434\u043e\u0431\u0430\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043b\u043e\u0433\u0438\u043a\u0430 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0438 \u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0440\u0435\u0439\u0441\u0430 \u043c\u044b \u0443\u0436\u0435 \u0438\u043c\u0435\u0435\u043c, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ['comment', 'rating'] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 def make_review(request, flight_id): if request.user.is_authenticated: if request.method == 'POST': flight = get_object_or_404(Flight, pk=flight_id) form = ReviewForm(request.POST) if form.is_valid(): new_res = form.save(commit=False) new_res.flight = flight new_res.passenger = request.user new_res.save() return redirect('/airport/list_reservations') else: form = ReviewForm() return render(request, 'make_review.html', {'form': form, 'flight_id': flight_id}) else: return HttpResponse('Please sign in to manage your reservations.') HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 {% block title %}Please tell us about your experience!{% endblock %} {% block content %} <div class=\"content-section\"> <form method=\"POST\" action=\"/airport/make_review/{{ flight_id }}/\"> {% csrf_token %} {{ form }} <br><br> <button name=\"create\" type=\"submit\">Send review</button> </form> </div> {% endblock %} <form action=\"http://127.0.0.1:8000/airport\"> <input type=\"submit\" value=\"Return to the main page\" /> </form>","title":"forms"},{"location":"lab2/forms/#_1","text":"\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 class RegisterForm(UserCreationForm): class Meta: model = User fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2'] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): form.save() return redirect('/airport') else: form = RegisterForm() return render(request, 'registration/register.html', {'form': form}) HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 {% extends 'base.html' %} {% block title %}Register{% endblock %} {% load crispy_forms_tags %} {% block content %} <div class=\"content-section\"> <form method=\"POST\" class=\"form-group\"> {% csrf_token %} <legend class=\"border-bottom mb-3\">Create an Account</legend> {{form|crispy}} <button name=\"create\" type=\"submit\" class=\"btn btn-success\">Register</button> </form> </div> {% endblock %} \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['seat_number'] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f def make_reservation(request, flight_id, reservation_id=None): if request.user.is_authenticated: if request.method == 'POST': flight = get_object_or_404(Flight, pk=flight_id) if reservation_id is None: form = ReservationForm(request.POST) if form.is_valid(): new_res = form.save(commit=False) new_res.flight = flight new_res.passenger = request.user new_res.save() return redirect('/airport/list_reservations') else: reservation = get_object_or_404(Reservation, pk=reservation_id) form = ReservationForm(request.POST, instance=reservation) form.save() return redirect('/airport/list_reservations') else: form = ReservationForm() return render(request, 'make_reservation.html', {'form': form, 'flight_id': flight_id, 'reservation_id': reservation_id}) else: return HttpResponse('Please sign in to manage your reservations.') HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f {% block title %}Enter your seat number{% endblock %} {% block content %} <div class=\"content-section\"> {% if reservation_id %} <form method=\"POST\" action=\"/airport/make_reservation/{{ flight_id }}/{{ reservation_id }}/\"> {% csrf_token %} {{ form }} <button name=\"create\" type=\"submit\">Make reservation</button> </form> {% else %} <form method=\"POST\" action=\"/airport/make_reservation/{{ flight_id }}/\"> {% csrf_token %} {{ form }} <button name=\"create\" type=\"submit\">Make reservation</button> </form> {% endif %} </div> {% endblock %} <form action=\"http://127.0.0.1:8000/airport\"> <input type=\"submit\" value=\"Return to the main page\" /> </form> \u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0421 \u0434\u043e\u0431\u0430\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043b\u043e\u0433\u0438\u043a\u0430 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0438 \u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0440\u0435\u0439\u0441\u0430 \u043c\u044b \u0443\u0436\u0435 \u0438\u043c\u0435\u0435\u043c, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ['comment', 'rating'] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 def make_review(request, flight_id): if request.user.is_authenticated: if request.method == 'POST': flight = get_object_or_404(Flight, pk=flight_id) form = ReviewForm(request.POST) if form.is_valid(): new_res = form.save(commit=False) new_res.flight = flight new_res.passenger = request.user new_res.save() return redirect('/airport/list_reservations') else: form = ReviewForm() return render(request, 'make_review.html', {'form': form, 'flight_id': flight_id}) else: return HttpResponse('Please sign in to manage your reservations.') HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 {% block title %}Please tell us about your experience!{% endblock %} {% block content %} <div class=\"content-section\"> <form method=\"POST\" action=\"/airport/make_review/{{ flight_id }}/\"> {% csrf_token %} {{ form }} <br><br> <button name=\"create\" type=\"submit\">Send review</button> </form> </div> {% endblock %} <form action=\"http://127.0.0.1:8000/airport\"> <input type=\"submit\" value=\"Return to the main page\" /> </form>","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432"},{"location":"lab2/itog/","text":"\u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 django: - \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, - \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 html-\u0444\u0430\u0439\u043b\u043e\u0432. \u0411\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0430\u0439\u0442\u0443 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"lab2/itog/#_1","text":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 django: - \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, - \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 html-\u0444\u0430\u0439\u043b\u043e\u0432. \u0411\u044b\u043b\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0430\u0439\u0442\u0443 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"lab2/models/","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445. \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: 1) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 2) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. 3) \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. 4) \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. 5) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. Flight - \u0440\u0435\u0439\u0441\u044b \u0421 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u043c\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u0442\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e class Flight(models.Model): class Meta: db_table = 'flight' class FlightType(models.TextChoices): ARRIVAL = 'ARR', 'Arrival' DEPARTURE = 'DEP', 'Departure' class City(models.TextChoices): AMSTERDAM = 'AMS', 'Amsterdam' BERLIN = 'BER', 'Berlin' COPENHAGEN = 'CPH', 'Copenhagen' DUBLIN = 'DUB', 'Dublin' HELSINKI = 'HEL', 'Helsinki' MOSCOW = 'SVO', 'Moscow (Sheremetyevo)' LONDON = 'LHR', 'London (Heathrow)' SAINT_PETERSBURG = 'LED', 'Saint-Petersburg (Pulkovo)' class Airline(models.TextChoices): AEROFLOT = 'AEROFLOT', 'Aeroflot' BRIT_AIR = 'BRIT_AIR', 'British Airlines' LUFTHANSA = 'LUFTHANSA', 'Lufthansa' TURK_AIR = 'TURK_AIR', 'Turkish Airlines' AIR_FRANCE = 'AIR_FRANCE', 'Air France' flight_number = models.CharField(max_length=16, unique=True) airline_name = models.CharField(max_length=32, choices=Airline.choices) departure = models.DateTimeField() arrival = models.DateTimeField() origin = models.CharField(max_length=3, choices=City.choices) destination = models.CharField(max_length=3, choices=City.choices) type = models.CharField(max_length=9, choices=FlightType.choices) gate_number = models.CharField(max_length=8) passengers = models.ManyToManyField(User, through='Reservation') Reservatin - \u0421\u0432\u044f\u0437\u044c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440-\u0440\u0435\u0439\u0441 \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 (\u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u0442\u0430), \u0440\u0435\u0439\u0441\u0435 (\u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430), \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 (\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d/\u043d\u0435\u0442, \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430) class Reservation(models.Model): class Meta: db_table = 'reservation' unique_together = [['flight', 'seat_number']] flight = models.ForeignKey(Flight, on_delete=models.CASCADE) passenger = models.ForeignKey(User, on_delete=models.CASCADE) seat_number = models.CharField(max_length=4, null=True, blank=True) ticket_number = models.CharField(max_length=16, unique=True, null=True, blank=True) checked_in = models.BooleanField(default=False) Review - \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0440\u0435\u0439\u0441\u0430\u043c \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 \u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 class Review(models.Model): class Meta: db_table = 'review' flight = models.ForeignKey(Flight, on_delete=models.CASCADE) passenger = models.ForeignKey(User, on_delete=models.CASCADE) comment = models.TextField() rating = models.IntegerField( default=10, validators=[ MaxValueValidator(10), MinValueValidator(1) ] )","title":"models"},{"location":"lab2/models/#_1","text":"\u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445. \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: 1) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 2) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. 3) \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. 4) \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. 5) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. Flight - \u0440\u0435\u0439\u0441\u044b \u0421 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u043c\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u0442\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e class Flight(models.Model): class Meta: db_table = 'flight' class FlightType(models.TextChoices): ARRIVAL = 'ARR', 'Arrival' DEPARTURE = 'DEP', 'Departure' class City(models.TextChoices): AMSTERDAM = 'AMS', 'Amsterdam' BERLIN = 'BER', 'Berlin' COPENHAGEN = 'CPH', 'Copenhagen' DUBLIN = 'DUB', 'Dublin' HELSINKI = 'HEL', 'Helsinki' MOSCOW = 'SVO', 'Moscow (Sheremetyevo)' LONDON = 'LHR', 'London (Heathrow)' SAINT_PETERSBURG = 'LED', 'Saint-Petersburg (Pulkovo)' class Airline(models.TextChoices): AEROFLOT = 'AEROFLOT', 'Aeroflot' BRIT_AIR = 'BRIT_AIR', 'British Airlines' LUFTHANSA = 'LUFTHANSA', 'Lufthansa' TURK_AIR = 'TURK_AIR', 'Turkish Airlines' AIR_FRANCE = 'AIR_FRANCE', 'Air France' flight_number = models.CharField(max_length=16, unique=True) airline_name = models.CharField(max_length=32, choices=Airline.choices) departure = models.DateTimeField() arrival = models.DateTimeField() origin = models.CharField(max_length=3, choices=City.choices) destination = models.CharField(max_length=3, choices=City.choices) type = models.CharField(max_length=9, choices=FlightType.choices) gate_number = models.CharField(max_length=8) passengers = models.ManyToManyField(User, through='Reservation') Reservatin - \u0421\u0432\u044f\u0437\u044c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440-\u0440\u0435\u0439\u0441 \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 (\u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u043c\u0435\u0441\u0442\u0430), \u0440\u0435\u0439\u0441\u0435 (\u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430), \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 (\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d/\u043d\u0435\u0442, \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430) class Reservation(models.Model): class Meta: db_table = 'reservation' unique_together = [['flight', 'seat_number']] flight = models.ForeignKey(Flight, on_delete=models.CASCADE) passenger = models.ForeignKey(User, on_delete=models.CASCADE) seat_number = models.CharField(max_length=4, null=True, blank=True) ticket_number = models.CharField(max_length=16, unique=True, null=True, blank=True) checked_in = models.BooleanField(default=False) Review - \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0440\u0435\u0439\u0441\u0430\u043c \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 \u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 class Review(models.Model): class Meta: db_table = 'review' flight = models.ForeignKey(Flight, on_delete=models.CASCADE) passenger = models.ForeignKey(User, on_delete=models.CASCADE) comment = models.TextField() rating = models.IntegerField( default=10, validators=[ MaxValueValidator(10), MinValueValidator(1) ] )","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab2/urls/","text":"\u041f\u0443\u0442\u0438 from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), path('<int:flight_id>/', views.flight_info, name='flight_info'), path('list_reservations/', views.list_reservations, name='list_reservations'), path('make_reservation/<int:flight_id>/', views.make_reservation, name='create_reservation'), path('make_reservation/<int:flight_id>/<int:reservation_id>/', views.make_reservation, name='edit_reservation'), path('delete_reservation/<int:reservation_id>/', views.delete_reservation, name='delete_reservation'), path('make_review/<int:flight_id>/', views.make_review, name='make_review') ]","title":"urls"},{"location":"lab2/urls/#_1","text":"from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), path('<int:flight_id>/', views.flight_info, name='flight_info'), path('list_reservations/', views.list_reservations, name='list_reservations'), path('make_reservation/<int:flight_id>/', views.make_reservation, name='create_reservation'), path('make_reservation/<int:flight_id>/<int:reservation_id>/', views.make_reservation, name='edit_reservation'), path('delete_reservation/<int:reservation_id>/', views.delete_reservation, name='delete_reservation'), path('make_review/<int:flight_id>/', views.make_review, name='make_review') ]","title":"\u041f\u0443\u0442\u0438"},{"location":"lab2/views/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440a\u043d\u0438\u0446\u0430 \u0441 \u0440\u0435\u0439\u0441\u0430\u043c\u0438 \u0412\u0441\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0439\u0441\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0441\u0442\u043e def index(request): flight_list: QuerySet[Flight] = Flight.objects.order_by(\"id\")[:10] return render(request, 'index.html', {'flight_list': flight_list}) HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0441\u043e\u0432 {% if flight_list %} <p>ARRIVALS</p> <ul> {% for flight in flight_list %} {% if flight.type == 'ARR' %} <li><a href=\"/airport/{{ flight.id }}/\">{{ flight.flight_number }}</a></li> {% endif %} {% endfor %} </ul> <p>DEPARTURES</p> <ul> {% for flight in flight_list %} {% if flight.type == 'DEP' %} <li><a href=\"/airport/{{ flight.id }}/\">{{ flight.flight_number }}</a></li> {% endif %} {% endfor %} </ul> {% else %} <p>No flights are currently arriving or departing.</p> {% endif %} {% if request.user.is_authenticated %} <a href=\"http://127.0.0.1:8000/airport/list_reservations/\">My reservations<br></a> <a>Current user: {{ request.user.username }}</a> {% endif %} <br><br> {% if request.user.is_authenticated %} <a href=\"http://127.0.0.1:8000/login/\">Change user?<br></a> {% endif %} \u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 def home_redirect(request): return redirect('/airport') \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0440\u0435\u0439\u0441\u0435 def flight_info(request, flight_id): flight: Flight = get_object_or_404(Flight, pk=flight_id) dtos = [] for passenger in flight.passengers.all(): dtos.append(PassengerDTO( passenger.first_name + ' ' + passenger.last_name, Reservation.objects.filter(passenger=passenger.id).get().seat_number, Reservation.objects.filter(passenger=passenger.id).get().checked_in )) return render(request, 'flight_info.html', { 'dtos': dtos, 'flight_number': flight.flight_number, 'flight_id': flight.id }) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0430\u0448\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u0445 def list_reservations(request): if request.user.is_authenticated: reservations = Reservation.objects.filter(passenger=request.user.id) return render(request, 'reservation_list.html', context={'reservations': reservations}) else: return HttpResponse('Please sign in to view your reservations.') \u0410 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 def delete_reservation(request, reservation_id): if request.user.is_authenticated: get_object_or_404(Reservation, pk=reservation_id).delete() return redirect('/airport/list_reservations') else: return HttpResponse('Please sign in to manage your reservations.')","title":"views"},{"location":"lab2/views/#_1","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440a\u043d\u0438\u0446\u0430 \u0441 \u0440\u0435\u0439\u0441\u0430\u043c\u0438 \u0412\u0441\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0439\u0441\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0441\u0442\u043e def index(request): flight_list: QuerySet[Flight] = Flight.objects.order_by(\"id\")[:10] return render(request, 'index.html', {'flight_list': flight_list}) HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0441\u043e\u0432 {% if flight_list %} <p>ARRIVALS</p> <ul> {% for flight in flight_list %} {% if flight.type == 'ARR' %} <li><a href=\"/airport/{{ flight.id }}/\">{{ flight.flight_number }}</a></li> {% endif %} {% endfor %} </ul> <p>DEPARTURES</p> <ul> {% for flight in flight_list %} {% if flight.type == 'DEP' %} <li><a href=\"/airport/{{ flight.id }}/\">{{ flight.flight_number }}</a></li> {% endif %} {% endfor %} </ul> {% else %} <p>No flights are currently arriving or departing.</p> {% endif %} {% if request.user.is_authenticated %} <a href=\"http://127.0.0.1:8000/airport/list_reservations/\">My reservations<br></a> <a>Current user: {{ request.user.username }}</a> {% endif %} <br><br> {% if request.user.is_authenticated %} <a href=\"http://127.0.0.1:8000/login/\">Change user?<br></a> {% endif %} \u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 def home_redirect(request): return redirect('/airport') \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0440\u0435\u0439\u0441\u0435 def flight_info(request, flight_id): flight: Flight = get_object_or_404(Flight, pk=flight_id) dtos = [] for passenger in flight.passengers.all(): dtos.append(PassengerDTO( passenger.first_name + ' ' + passenger.last_name, Reservation.objects.filter(passenger=passenger.id).get().seat_number, Reservation.objects.filter(passenger=passenger.id).get().checked_in )) return render(request, 'flight_info.html', { 'dtos': dtos, 'flight_number': flight.flight_number, 'flight_id': flight.id }) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0430\u0448\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u0445 def list_reservations(request): if request.user.is_authenticated: reservations = Reservation.objects.filter(passenger=request.user.id) return render(request, 'reservation_list.html', context={'reservations': reservations}) else: return HttpResponse('Please sign in to view your reservations.') \u0410 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 def delete_reservation(request, reservation_id): if request.user.is_authenticated: get_object_or_404(Reservation, pk=reservation_id).delete() return redirect('/airport/list_reservations') else: return HttpResponse('Please sign in to manage your reservations.')","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lab3/lab/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438). \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e / \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c / \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser.1 \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u211615 \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445): \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u0441\u043a\u043e\u0433\u043e \u043a\u043b\u0443\u0431\u0430. \u0410\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u0441\u043a\u0438\u0439 \u043a\u043b\u0443\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442 \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u043c\u0438\u0440\u0430. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0445\u0440\u043e\u043d\u0438\u043a\u0435 \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0433\u0440\u0443\u043f\u043f\u0430. \u0412 \u0441\u043e\u0441\u0442\u0430\u0432 \u0433\u0440\u0443\u043f\u043f\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0443\u0431\u043e\u0432. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0443\u0431\u0435 (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0441\u0442\u0440\u0430\u043d\u0430, \u0433\u043e\u0440\u043e\u0434, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u043e\u0435 \u043b\u0438\u0446\u043e, e-mail, \u0442\u0435\u043b\u0435\u0444\u043e\u043d). \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u0435\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f (\u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u0438 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e), \u0438\u043c\u0435\u043d \u0438 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u043d\u0435\u043c \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u043e\u0432, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u0441\u043e\u0442\u044b \u0433\u043e\u0440\u044b, \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u0440\u0430\u0439\u043e\u043d\u0430, \u0433\u0434\u0435 \u044d\u0442\u0430 \u0433\u043e\u0440\u0430 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u0432 \u0446\u0435\u043b\u043e\u043c. \u041f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043d\u0435\u0448\u0442\u0430\u0442\u043d\u044b\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u0447\u0442\u043e \u0441\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c (\u0442\u0440\u0430\u0432\u043c\u0430, \u043f\u0440\u043e\u043f\u0430\u043b \u0431\u0435\u0437 \u0432\u0435\u0441\u0442\u0438, \u043b\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0445\u043e\u0434 \u0438 \u0442.\u0434.) \u0438 \u0432 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0438 \u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u0434\u0430\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c: \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u043d\u043e\u0432\u043e\u043c \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u0435, \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u0435; \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u0430\u0445 \u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u0445; \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0433\u0440\u0443\u043f\u043f \u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0433\u0440\u0443\u043f\u043f\u043e\u0439. \u041c\u043e\u0434\u0435\u043b\u044c:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab3/lab/models/","text":"Models: \u0413\u043e\u0440\u044b class Mountain(models.Model): class Meta: db_table = 'mountain' name = models.CharField(max_length=50) height = models.IntegerField() country = models.CharField(max_length=50) region = models.CharField(max_length=50, null=True, blank=True) def __str__(self): return self.name \u041c\u0430\u0440\u0448\u0440\u0443\u0442 class Route(models.Model): class Meta: db_table = 'route' unique_together = [['mountain', 'description']] mountain = models.ForeignKey(Mountain, on_delete=models.CASCADE) description = models.CharField(max_length=500, null=True, blank=True) duration = models.DurationField() def __str__(self): return self.mountain.name + \" \" + str(self.id) \u0412\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 class Ascension(models.Model): class Meta: db_table = 'ascension' route = models.ForeignKey(Route, on_delete=models.CASCADE) start_date = models.DateField() planned_end_date = models.DateField() actual_end_date = models.DateField(null=True, blank=True) comment = models.CharField(max_length=500, null=True, blank=True) def __str__(self): return self.route.mountain.name + \" \" + str(self.route) + \".\" + str(self.id) \u0413\u0440\u0443\u043f\u043f\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0432\u0448\u0430\u044f\u0441\u044f \u0432 \u044d\u0442\u043e \u0441\u0430\u043c\u043e\u0435 \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 class Group(models.Model): class Meta: db_table = 'group' ascension = models.ForeignKey(Ascension, on_delete=models.CASCADE) result = models.CharField(max_length=50, null=True, blank=True) comment = models.CharField(max_length=500, null=True, blank=True) climbers = models.ManyToManyField('Climber', through='AscentParticipation') def __str__(self): return str(self.id) \u0422\u0443\u0440\u043a\u043b\u0443\u0431 class Club(models.Model): class Meta: db_table = 'club' name = models.CharField(max_length=100, unique=True) country = models.CharField(max_length=50) city = models.CharField(max_length=50) contact_person = models.CharField(max_length=100) email = models.CharField(max_length=50) phone = models.CharField(max_length=15) def __str__(self): return self.name \u0410\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442 class Climber(models.Model): class Meta: db_table = 'climber' club = models.ForeignKey(Club, on_delete=models.CASCADE) first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) address = models.CharField(max_length=50) birth_date = models.DateField(null=True, blank=True) phone = models.CharField(max_length=15, null=True, blank=True) groups = models.ManyToManyField('Group', through='AscentParticipation') def __str__(self): return self.last_name + \" \" + self.first_name \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 -- \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u0435 \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 class AscentParticipation(models.Model): class Meta: db_table = 'ascent_participation' unique_together = [['climber', 'group']] climber = models.ForeignKey(Climber, on_delete=models.CASCADE) group = models.ForeignKey(Group, on_delete=models.CASCADE) result = models.CharField(max_length=50) comment = models.CharField(max_length=500, null=True, blank=True) def __str__(self): return self.climber.last_name + \" \" + self.climber.first_name + \" group \" + str(self.group)","title":"models"},{"location":"lab3/lab/serializers/","text":"Serializers: \u0413\u043e\u0440\u044b: class MountainSerializer(serializers.ModelSerializer): class Meta: model = Mountain fields = \"__all__\" # fields = [\"name\", \"height\", \"country\", \"region\"] \u0410\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u044b: class ClimberSerializer(serializers.ModelSerializer): class Meta: model = Climber # fields = ['first_name', 'last_name', \"birth_date\"] fields = \"__all__\" \u0412\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f: class AscensionSerializer(serializers.ModelSerializer): class Meta: model = Ascension # fields = \"__all__\" fields = [\"route_id\", \"start_date\", \"planned_end_date\", \"actual_end_date\", \"comment\"] \u041a\u043b\u0443\u0431\u044b: class ClubSerializer(serializers.ModelSerializer): class Meta: model = Club fields = \"__all__\" \u0422\u0435\u043f\u0435\u0440\u044c \u043a \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u043c\u0443: \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0448\u0435 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0433\u0440\u0443\u043f\u043f. class AscentParticipationSerializer(serializers.ModelSerializer): group_id = GroupGetSerializer() climber_id = ClimberSerializer() class Meta: model = AscentParticipation fields = \"__all__\" \u0414\u0432\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f. \u041e\u0434\u0438\u043d -- \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e: class GroupGetSerializer(serializers.ModelSerializer): climbers = serializers.StringRelatedField(many=True) class Meta: model = Group fields = \"__all__\" \u0412\u0442\u043e\u0440\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b, \u0435\u0441\u043b\u0438 \u0447\u0442\u043e, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u043b\u0435\u043d\u043e\u0432 \u0433\u0440\u0443\u043f\u043f\u044b: class GroupPostSerializer(serializers.ModelSerializer): climbers = serializers.PrimaryKeyRelatedField(many=True, read_only=False, queryset=Climber.objects.all()) class Meta: model = Group fields = \"__all__\"","title":"serializers"},{"location":"lab3/lab/settings/","text":"Settings: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication', ), 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.AllowAny', ), } \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439: INSTALLED_APPS = [ ... \"rest_framework\", \"rest_framework.authtoken\", 'mountaineeringclub_app', \"djoser\", ... ]","title":"settings"},{"location":"lab3/lab/urls/","text":"Urls: mountaineering_club urlpatterns = [ path(\"admin/\", admin.site.urls), path('alp/', include('mountaineeringclub_app.urls')), path('auth/', include('djoser.urls')), re_path(r'^auth/', include('djoser.urls.authtoken')), ] mountaineering_app urlpatterns = [ path('climbers/<int:pk>/', ClimberDetail.as_view(), name='climber-detail'), path('climbers/', ClimberList.as_view(), name='climber'), path('ascensions/', AscensionListView.as_view(), name='ascensions'), path('userpage/<int:user_id>/ascensions/<int:pk>/', AscensionDetailView.as_view(), name='ascension-detail'), path('ascensions/<int:pk>/', AscensionDetailView.as_view(), name='ascension-detail'), path('participations/', AscentParticipationAPIView.as_view({'get': 'list'}), name='ascent-participation'), path('participations/<int:pk>/', AscentParticipationDetailView.as_view(), name='ascent-participation-detail'), path('mountains/', MountainsListView.as_view(), name='mountains'), path('mountains/<int:pk>/', MountainDetailView.as_view(), name='mountain-detail'), path('clubs/', ClubsListView.as_view(), name='clubs'), path('clubs/<int:pk>/', ClubDetailView.as_view(), name='club-detail'), path('groups/', GroupsListView.as_view(), name='groups'), path('userpage/<int:user_id>/groups/<int:pk>/', GroupsDetailView.as_view(), name='groups-detail'), path('groups/<int:pk>/', GroupsDetailView.as_view(), name='groups-detail'), ] \u043d\u0443 \u0438 \u043f\u043e /auth/users/me/ \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e","title":"urls"},{"location":"lab3/lab/views/","text":"Views: \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0430\u043b\u044c\u043f\u0438\u043d\u0438\u0441\u0442\u0430\u043c/\u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443: class ClimberDetail(APIView): permission_classes = [IsAuthenticatedOrReadOnly] def get_object(self, pk): try: return Climber.objects.get(pk=pk) except Climber.DoesNotExist: raise Http404 def get(self, request, pk, format=None): climbers = self.get_object(pk) serializer = ClimberSerializer(climbers) return Response(serializer.data) def post(self, request, pk, format=None): climber = self.get_object(pk) serializer = ClimberSerializer(climber, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): climber = self.get_object(pk) climber.delete() return Response(status=status.HTTP_204_NO_CONTENT) class ClimberList(APIView): permission_classes = [IsAuthenticatedOrReadOnly] def get(self, request, format=None): climbers = Climber.objects.all() serializer = ClimberSerializer(climbers, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = ClimberSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0440\u043e \u0433\u0440\u0443\u043f\u043f\u044b, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u043f\u0438\u0441\u043a\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e\u0445\u043e\u0434\u043e\u0432 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0441\u0442\u0444\u0430\u043a\u0442\u0443\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 class GroupsDetailView(APIView): permission_classes = [IsAuthenticatedOrReadOnly] def get_object(self, pk): try: return Group.objects.get(pk=pk) except Group.DoesNotExist: raise Http404 def get(self, request, pk, format=None): groups = self.get_object(pk) serializer = GroupGetSerializer(groups) return Response(serializer.data) def post(self, request, pk, format=None): group = self.get_object(pk) serializer = GroupPostSerializer(group, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): group = self.get_object(pk) group.delete() return Response(status=status.HTTP_204_NO_CONTENT) class GroupsListView(APIView): permission_classes = [IsAuthenticatedOrReadOnly] def get(self, request, format=None): groups = Group.objects.all() serializer = GroupGetSerializer(groups, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = GroupPostSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0440\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f class AscensionListView(ListAPIView): permission_classes = [IsAuthenticatedOrReadOnly] queryset = Ascension.objects.all() serializer_class = AscensionSerializer class AscensionDetailView(RetrieveAPIView): permission_classes = [IsAuthenticated] queryset = Ascension serializer_class = AscensionSerializer # permission_classes = (IsAuthenticated, ) def get_queryset(self): return Ascension.objects.filter(id=self.kwargs['pk']) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u0440\u043e \u0433\u043e\u0440\u044b class MountainDetailView(APIView): permission_classes = [IsAuthenticatedOrReadOnly] def get_object(self, pk): try: return Mountain.objects.get(pk=pk) except Mountain.DoesNotExist: raise Http404 def get(self, request, pk, format=None): mountains = self.get_object(pk) serializer = MountainSerializer(mountains) return Response(serializer.data) def post(self, request, pk, format=None): mountain = self.get_object(pk) serializer = MountainSerializer(mountain, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): mountain = self.get_object(pk) mountain.delete() return Response(status=status.HTTP_204_NO_CONTENT) class MountainsListView(APIView): permission_classes = [IsAuthenticatedOrReadOnly] def get(self, request, format=None): mountains = Mountain.objects.all() serializer = MountainSerializer(mountains, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = MountainSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u0411\u043b\u043e\u043a \u043a\u043b\u0443\u0431\u043e\u0432 class ClubsListView(ListAPIView): permission_classes = [IsAuthenticatedOrReadOnly] queryset = Club.objects.all() serializer_class = ClubSerializer class ClubDetailView(RetrieveAPIView): permission_classes = [IsAuthenticatedOrReadOnly] queryset = Club serializer_class = ClubSerializer def get_queryset(self): return Club.objects.filter(id=self.kwargs['pk']) \u0411\u043b\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u0445\u043e\u0434\u0435 class AscentParticipationAPIView(viewsets.ModelViewSet): permission_classes = [IsAuthenticatedOrReadOnly] queryset = AscentParticipation.objects.all() serializer_class = AscentParticipationSerializer # permission_classes = (IsAuthenticated, ) class AscentParticipationDetailView(RetrieveAPIView): permission_classes = [IsAuthenticatedOrReadOnly] queryset = AscentParticipation serializer_class = AscentParticipationSerializer def get_queryset(self): return AscentParticipation.objects.filter(id=self.kwargs['pk']) ...\u043f\u0440\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e: \u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 IsAuthenticatedOrReadOnly, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c-\u0442\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b, \u043d\u043e, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0447\u0435\u0433\u043e, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u043b. \u041d\u043e \u0431\u0435\u0437 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0435\u043b\u044c\u0437\u044f \u043e\u0442\u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u0440\u0443\u043f\u043f\u044b","title":"views"},{"location":"lab3/practice1/part1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043a\u0440\u0438\u043d\u043a\u0430\u0441\u0442: \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u044d\u0442\u043e \u0432\u0441\u0451:","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"lab3/practice1/part2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: 1. \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) 2. \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) 3. \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) 4. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) 5. \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"lab3/practice1/part3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: 1. \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f 2. \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 3. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f 4. \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 5. \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f","title":"\u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f"},{"location":"lab3/practice2/rep/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0441\u043a\u0438\u043b\u043e\u0432. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u0430\u0445 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435). \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0438\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0441\u043a\u0438\u043b\u0430\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435). \u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u043e\u0438\u043d\u0435 (\u043f\u043e id), \u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 \u0438 \u0441\u043a\u0438\u043b\u0430\u0445. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430 \u043f\u043e id. \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u043e\u0438\u043d\u0430. \u0418 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f:","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2"},{"location":"lab4/ascension/","text":"\u0412\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u0442\u044b \u043f\u043e\u0445\u043e\u0434\u0430, \u0433\u043e\u0440\u0443 \u0438 \u043d\u043e\u043c\u0435\u0440 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u0432\u043e\u043a\u0440\u0443\u0433 \u043d\u0435\u0435 \u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f (\u0435\u0441\u043b\u0438 \u043f\u043e\u0445\u043e\u0434 \u0443\u0436\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d), \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438 \u0434\u0430\u0442\u0430 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \"\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, \u043f\u043e\u0445\u043e\u0434 \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f\" \u0410 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u0445\u043e\u0434\u0435: \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438","title":"ascension"},{"location":"lab4/climbers/","text":"\u0421\u043a\u0430\u043b\u043e\u043b\u0430\u0437\u044b: \u041e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043a\u0430\u043b\u043e\u043b\u0430\u0437\u043e\u0432. \u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443","title":"climbers"},{"location":"lab4/clubs/","text":"\u041a\u043b\u0443\u0431\u044b: \u0421\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 \u043a\u043b\u0443\u0431\u043e\u0432 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u043a\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043b\u0443\u0431\u0435 - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u043b\u043e\u043a\u0430\u0446\u0438\u044e \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0435\u0439 - \u0434\u043e\u0431\u0430\u0432\u0438\u0442 \u0435\u0449\u0435 \u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u043e\u0435 \u043b\u0438\u0446\u043e","title":"clubs"},{"location":"lab4/groups/","text":"\u0413\u0440\u0443\u043f\u043f\u044b: \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0433\u0440\u0443\u043f\u043f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043a\u0438 \u0433\u0440\u0443\u043f\u043f, \u043c\u0430\u0440\u0448\u0440\u0443\u0442-\u0433\u043e\u0440\u0443, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u041d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0435 \u0433\u0440\u0443\u043f\u043f\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u044d\u0442\u0438\u043c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0418\u043b\u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e","title":"groups"},{"location":"lab4/home/","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 - \u0442\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 url \"/\" - \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442 \u043d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u043f\u043b\u043e\u0448\u043d\u043e\u0441\u0442\u044c \u0438 \u0442\u0430\u043a\u0438 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u041a \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c -- \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442. \u0418\u0445 \u0435\u0449\u0435 \u0438 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442","title":"home"},{"location":"lab4/mountain/","text":"\u0413\u043e\u0440\u044b: \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0433\u043e\u0440 \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f, \u0432\u044b\u0441\u043e\u0442\u044b, \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, - \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0435\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0438\u043a\u0435\u043c \u043d\u0435 \u043f\u043e\u043a\u043e\u0440\u0435\u043d\u043d\u044b\u0445 \u0433\u043e\u0440... ...\u0441 \u043f\u0440\u0438\u0437\u044b\u0432\u043e\u043c \u0441\u0442\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u043c. \u041d\u0443 \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u0443\u044e:","title":"mountain"},{"location":"lab4/register_login/","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f: \u041d\u0435\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0438\u043a\u0430\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0449\u0435 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0435\u043c\u0443 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f ...\u0438 \u0447\u0435\u0441\u0442\u043d\u043e \u043a\u043b\u044f\u043d\u0443\u0442\u0441\u044f, \u0447\u0442\u043e \u0441\u043f\u0430\u043c\u0438\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u0430\u0434\u0440\u0435\u0441\u0441\u0430\u0446\u0438\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 login, \u0433\u0434\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0436\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435","title":"register & login"}]}