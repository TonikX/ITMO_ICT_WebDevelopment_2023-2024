{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 3.1 \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 shell \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 exec(). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f IDE. \u041a\u043e\u0434 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 import datetime from practice.models import * temp = datetime.datetime.now() names = ( ('\u041a\u0438\u0440\u044e\u0448\u0430', '\u0411\u0438\u043b\u0438\u0431\u0434\u043e\u0432\u0438\u0447', temp), ('\u0421\u0438\u043c\u0435\u043e\u043d', '\u0413\u0438\u0434\u0435\u043e\u043d\u043e\u0432\u0438\u0447', temp), ('\u0421\u0442\u0430\u0441', '\u0420\u0435\u0434\u044c\u043a\u043e', temp), ('\u0422\u043e\u0445\u0430', '\u041f\u0440\u043e\u0442\u0438\u0432\u043e\u0433\u0430\u0437', temp), ('\u041d\u0430\u0442\u0430\u043b\u044c\u044f', '\u041e\u043d\u0438\u043a\u0438\u0435\u043d\u043a\u043e', temp), ('\u041a\u043b\u0430\u0440\u0430', '\u0423\u043a\u0440\u0430\u043b\u043e\u0432\u0430', temp)) tup_cars = ( ('\u0410228\u0423\u0415', '\u0412\u0410\u0417', '2121', '\u0411\u0430\u043a\u043b\u0430\u0436\u0430\u043d\u043e\u0432\u044b\u0439'), ('\u0412666\u0410\u0414', '\u0412\u0410\u0417', '1111', '\u0421\u0438\u043d\u0438\u0439'), ('\u0414420\u0423\u0419', '\u0424\u0435\u0440\u0440\u0430\u0440\u0438', '812', '\u041a\u0440\u0430\u0441\u043d\u044b\u0439'), ('\u041d282\u0415\u0422', '\u0414\u043e\u0434\u0436', '\u0427\u0435\u043b\u0435\u043d\u0434\u0436\u0435\u0440 1982', '\u0427\u0435\u0440\u043d\u044b\u0439, \u0441\u0438\u043d\u044f\u044f \u043f\u043e\u043b\u043e\u0441\u0430'), ('\u0415100\u0413\u042d', '\u041a\u0410\u041c\u0410\u0417', '\u041c65952', '\u041e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439'), ('\u0423\u0414777\u0410', '\u0425\u0401\u041d\u0414\u0410\u0419', '\u0421\u043e\u043b\u044f\u0440\u0438\u0441', '\u0411\u0435\u043b\u044b\u0439') ) tup_licence = ( [0, '1337\u0411\u0423', 'A1', temp], [0, '1488\u041a\u0423', 'C', temp], [0, '6969\u0414\u0423', 'D1', temp], [0, '7101\u0424\u0423', 'B1', temp], [0, '2000\u0417\u0423', 'M', temp], [0, '2069\u0425\u0423', 'A1', temp]) for i in range(6): owner = CarOwner.objects.create(name=names[i][0], surname=names[i][1], birthdate=names[i][2]) licence = DriverLicence.objects.create(owner_id=owner, licence_id=tup_licence[i][1], licence_type=tup_licence[i][2], recieved_date=tup_licence[i][3]) car = Car.objects.create(plate=tup_cars[i][0], brand=tup_cars[i][1], model=tup_cars[i][2], color=tup_cars[i][3]) ownership = Ownership.objects.create(car_id=car, start_date=temp, end_date=temp) ownership.owner_id.add(owner) \u041a\u043e\u0434 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f from practice.models import Car, CarOwner, DriverLicence, Ownership # \u0412\u0441\u0435 \u0412\u0410\u0417\u044b print(Car.objects.filter(brand=\"\u0412\u0410\u0417\")) # \u0412\u0441\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0421\u0438\u043c\u0435\u043e\u043d\u044b print(CarOwner.objects.filter(name=\"\u0421\u0438\u043c\u0435\u043e\u043d\")) # \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043f\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e owner = getattr(CarOwner.objects.first(), 'id') print(DriverLicence.objects.filter(owner_id=owner)) # \u0445\u043e\u0437\u044f\u0435\u0432\u0430 \u0431\u0430\u043a\u043b\u0430\u0436\u0430\u043d\u043e\u0432\u044b\u0445 \u043c\u0430\u0448\u0438\u043d eggplant = Ownership.objects.filter(car_id__color=\"\u0411\u0430\u043a\u043b\u0430\u0436\u0430\u043d\u043e\u0432\u044b\u0439\").values(\"owner_id__name\", \"owner_id__surname\") print(eggplant) # \u0432\u043b\u0430\u0434\u0435\u044e\u0449\u0438\u0435 \u0430\u0432\u0442\u043e \u0441 2010 import datetime datetime_object = datetime.date(2010, 10, 12) ownership = Ownership.objects.filter(start_date__gte=datetime_object) print(ownership) \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f from practice.models import Car, CarOwner, DriverLicence, Ownership from django.db.models import Max, Count # \u0421\u0430\u043c\u0430\u044f \u0441\u0442\u0430\u0440\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f oldest_licence = DriverLicence.objects.aggregate(oldest=Max(\"recieved_date\")) print(oldest_licence) # \u0421\u0430\u043c\u043e\u0435 \u043d\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0435\u043d\u0438\u0435 ownership = Ownership.objects.aggregate(Max(\"start_date\")) print(ownership) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 car_owners = CarOwner.objects.annotate(cnt=Count('ownership')) print([f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438 {i.name} {i.surname} \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {i.cnt}\" for i in car_owners]) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u0431\u0440\u0435\u043d\u0434\u0430\u043c car_dict = Car.objects.values(\"brand\").annotate(cnt=Count(\"id\")) print([f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d {i['brand']} \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {i['cnt']}\" for i in car_dict]) sort_owners = DriverLicence.objects.order_by(\"recieved_date\").all() print([f\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 {i.id} \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e {i.recieved_date}\" for i in sort_owners])","title":"\u041f\u04203.1"},{"location":"index1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 3.1"},{"location":"index1/#_1","text":"\u0427\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 shell \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 exec(). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f IDE.","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"index1/#_2","text":"import datetime from practice.models import * temp = datetime.datetime.now() names = ( ('\u041a\u0438\u0440\u044e\u0448\u0430', '\u0411\u0438\u043b\u0438\u0431\u0434\u043e\u0432\u0438\u0447', temp), ('\u0421\u0438\u043c\u0435\u043e\u043d', '\u0413\u0438\u0434\u0435\u043e\u043d\u043e\u0432\u0438\u0447', temp), ('\u0421\u0442\u0430\u0441', '\u0420\u0435\u0434\u044c\u043a\u043e', temp), ('\u0422\u043e\u0445\u0430', '\u041f\u0440\u043e\u0442\u0438\u0432\u043e\u0433\u0430\u0437', temp), ('\u041d\u0430\u0442\u0430\u043b\u044c\u044f', '\u041e\u043d\u0438\u043a\u0438\u0435\u043d\u043a\u043e', temp), ('\u041a\u043b\u0430\u0440\u0430', '\u0423\u043a\u0440\u0430\u043b\u043e\u0432\u0430', temp)) tup_cars = ( ('\u0410228\u0423\u0415', '\u0412\u0410\u0417', '2121', '\u0411\u0430\u043a\u043b\u0430\u0436\u0430\u043d\u043e\u0432\u044b\u0439'), ('\u0412666\u0410\u0414', '\u0412\u0410\u0417', '1111', '\u0421\u0438\u043d\u0438\u0439'), ('\u0414420\u0423\u0419', '\u0424\u0435\u0440\u0440\u0430\u0440\u0438', '812', '\u041a\u0440\u0430\u0441\u043d\u044b\u0439'), ('\u041d282\u0415\u0422', '\u0414\u043e\u0434\u0436', '\u0427\u0435\u043b\u0435\u043d\u0434\u0436\u0435\u0440 1982', '\u0427\u0435\u0440\u043d\u044b\u0439, \u0441\u0438\u043d\u044f\u044f \u043f\u043e\u043b\u043e\u0441\u0430'), ('\u0415100\u0413\u042d', '\u041a\u0410\u041c\u0410\u0417', '\u041c65952', '\u041e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439'), ('\u0423\u0414777\u0410', '\u0425\u0401\u041d\u0414\u0410\u0419', '\u0421\u043e\u043b\u044f\u0440\u0438\u0441', '\u0411\u0435\u043b\u044b\u0439') ) tup_licence = ( [0, '1337\u0411\u0423', 'A1', temp], [0, '1488\u041a\u0423', 'C', temp], [0, '6969\u0414\u0423', 'D1', temp], [0, '7101\u0424\u0423', 'B1', temp], [0, '2000\u0417\u0423', 'M', temp], [0, '2069\u0425\u0423', 'A1', temp]) for i in range(6): owner = CarOwner.objects.create(name=names[i][0], surname=names[i][1], birthdate=names[i][2]) licence = DriverLicence.objects.create(owner_id=owner, licence_id=tup_licence[i][1], licence_type=tup_licence[i][2], recieved_date=tup_licence[i][3]) car = Car.objects.create(plate=tup_cars[i][0], brand=tup_cars[i][1], model=tup_cars[i][2], color=tup_cars[i][3]) ownership = Ownership.objects.create(car_id=car, start_date=temp, end_date=temp) ownership.owner_id.add(owner)","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"index1/#_3","text":"from practice.models import Car, CarOwner, DriverLicence, Ownership # \u0412\u0441\u0435 \u0412\u0410\u0417\u044b print(Car.objects.filter(brand=\"\u0412\u0410\u0417\")) # \u0412\u0441\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0421\u0438\u043c\u0435\u043e\u043d\u044b print(CarOwner.objects.filter(name=\"\u0421\u0438\u043c\u0435\u043e\u043d\")) # \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043f\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e owner = getattr(CarOwner.objects.first(), 'id') print(DriverLicence.objects.filter(owner_id=owner)) # \u0445\u043e\u0437\u044f\u0435\u0432\u0430 \u0431\u0430\u043a\u043b\u0430\u0436\u0430\u043d\u043e\u0432\u044b\u0445 \u043c\u0430\u0448\u0438\u043d eggplant = Ownership.objects.filter(car_id__color=\"\u0411\u0430\u043a\u043b\u0430\u0436\u0430\u043d\u043e\u0432\u044b\u0439\").values(\"owner_id__name\", \"owner_id__surname\") print(eggplant) # \u0432\u043b\u0430\u0434\u0435\u044e\u0449\u0438\u0435 \u0430\u0432\u0442\u043e \u0441 2010 import datetime datetime_object = datetime.date(2010, 10, 12) ownership = Ownership.objects.filter(start_date__gte=datetime_object) print(ownership)","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"index1/#_4","text":"from practice.models import Car, CarOwner, DriverLicence, Ownership from django.db.models import Max, Count # \u0421\u0430\u043c\u0430\u044f \u0441\u0442\u0430\u0440\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f oldest_licence = DriverLicence.objects.aggregate(oldest=Max(\"recieved_date\")) print(oldest_licence) # \u0421\u0430\u043c\u043e\u0435 \u043d\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0435\u043d\u0438\u0435 ownership = Ownership.objects.aggregate(Max(\"start_date\")) print(ownership) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 car_owners = CarOwner.objects.annotate(cnt=Count('ownership')) print([f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438 {i.name} {i.surname} \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {i.cnt}\" for i in car_owners]) # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u0431\u0440\u0435\u043d\u0434\u0430\u043c car_dict = Car.objects.values(\"brand\").annotate(cnt=Count(\"id\")) print([f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d {i['brand']} \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {i['cnt']}\" for i in car_dict]) sort_owners = DriverLicence.objects.order_by(\"recieved_date\").all() print([f\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 {i.id} \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044e {i.recieved_date}\" for i in sort_owners])","title":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"index2/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 3.2 \u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models class Warrior(models.Model): race_types = ( ('s', 'student'), ('d', 'developer'), ('t', 'teamlead'), ) race = models.CharField(max_length=1, choices=race_types, verbose_name='\u0420\u0430\u0441\u0441\u0430') name = models.CharField(max_length=120, verbose_name='\u0418\u043c\u044f') level = models.IntegerField(verbose_name='\u0423\u0440\u043e\u0432\u0435\u043d\u044c', default=0) skill = models.ManyToManyField('Skill', verbose_name='\u0423\u043c\u0435\u043d\u0438\u044f', through='SkillOfWarrior', related_name='warrior_skils') profession = models.ForeignKey('Profession', on_delete=models.CASCADE, verbose_name='\u041f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f', blank=True, null=True) class Profession(models.Model): title = models.CharField(max_length=120, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') description = models.TextField(verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Skill(models.Model): title = models.CharField(max_length=120, verbose_name='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435') def __str__(self): return self.title class SkillOfWarrior(models.Model): skill = models.ForeignKey('Skill', verbose_name='\u0423\u043c\u0435\u043d\u0438\u0435', on_delete=models.CASCADE) warrior = models.ForeignKey('Warrior', verbose_name='\u0412\u043e\u0438\u043d', on_delete=models.CASCADE) level = models.IntegerField(verbose_name='\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0441\u0432\u043e\u0435\u043d\u0438\u044f \u0443\u043c\u0435\u043d\u0438\u044f') \u0424\u0430\u0439\u043b\u044b urls.py from django.urls import path from .views import * app_name = \"warriors_app\" urlpatterns = [ path('warriors/', WarriorAPIView.as_view()), path('profession/create/', ProfessionCreateView.as_view()), path('warriors/list/', WarriorListAPIView.as_view()), path('profession/generic_create/', ProfessionCreateAPIView.as_view()), path('skill/generic_create/', SkillCreateAPIView.as_view()), ] \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b from rest_framework import serializers from warriors_app.models import * class ProfessionSerializer(serializers.ModelSerializer): class Meta: model = Profession fields = [\"title\", \"description\"] class SkillCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=120) def create(self, validated_data): skill = Skill(**validated_data) skill.save() return Skill(**validated_data) class SkillSerializer(serializers.ModelSerializer): class Meta: model = Skill fields = \"__all__\" class WarriorSerializer(serializers.ModelSerializer): profession = ProfessionSerializer(read_only=True) skills = SkillSerializer(many=True, source=\"skill\") class Meta: model = Warrior fields = [\"id\", \"race\", \"name\", \"level\", \"profession\", \"skills\"] class ProfessionCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=120) description = serializers.CharField() def create(self, validated_data): profession = Profession(**validated_data) profession.save() return Profession(**validated_data) class SkillRelatedSerializer(serializers.ModelSerializer): warrior_skils = WarriorSerializer(many=True) class Meta: model = Skill fields = [\"title\", \"warrior_skils\"] class WarriorRelatedSerializer(serializers.ModelSerializer): skill = serializers.SlugRelatedField(read_only=True, many=True, slug_field='title') class Meta: model = Warrior fields = \"__all__\" class WarriorDepthSerializer(serializers.ModelSerializer): class Meta: model = Warrior fields = \"__all__\" depth = 1 \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f from django.shortcuts import render from rest_framework.views import APIView from rest_framework.response import Response from warriors_app.models import * from rest_framework import generics, status from rest_framework.generics import get_object_or_404 from .serializers import * class WarriorAPIView(APIView): def get(self, request): warriors = Warrior.objects.all() serializer = WarriorSerializer(warriors, many=True) return Response({\"Warriors\": serializer.data}) class ProfessionCreateView(APIView): def post(self, request): profession = request.data.get(\"profession\") serializer = ProfessionCreateSerializer(data=profession) if serializer.is_valid(raise_exception=True): profession_saved = serializer.save() return Response({\"Success\": \"Profession '{}' created succesfully.\".format(profession_saved.title)}) class WarriorAPIView(APIView): def get(self, request): warriors = Warrior.objects.all() serializer = WarriorSerializer(warriors, many=True) return Response({\"Warriors\": serializer.data}) class WarriorListAPIView(generics.ListAPIView): serializer_class = WarriorSerializer queryset = Warrior.objects.all() class ProfessionCreateAPIView(generics.CreateAPIView): serializer_class = ProfessionCreateSerializer queryset = Profession.objects.all() class SkillCreateAPIView(generics.CreateAPIView): serializer_class = SkillCreateSerializer queryset = Skill.objects.all() class WarriorList(APIView): def get(self, request): warriors = Warrior.objects.all().prefetch_related(\"profession\", \"skill\") serializer = WarriorSerializer(warriors, many=True) return Response(serializer.data) class WarriorDetail(APIView): def get(self, request, pk): warrior = get_object_or_404(Warrior, pk=pk) serializer = WarriorSerializer(warrior) return Response(serializer.data) def delete(self, request, pk): warrior = get_object_or_404(Warrior, pk=pk) warrior.delete() return Response(status=status.HTTP_204_NO_CONTENT) def put(self, request, pk): warrior = get_object_or_404(Warrior, pk=pk) serializer = WarriorSerializer(warrior, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class SkillList(APIView): def get(self, request): skills = Skill.objects.all() serializer = SkillSerializer(skills, many=True) return Response(serializer.data) def post(self, request): serializer = SkillSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)","title":"\u041f\u04203.2"},{"location":"index2/#32","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 3.2"},{"location":"index2/#_1","text":"from django.db import models class Warrior(models.Model): race_types = ( ('s', 'student'), ('d', 'developer'), ('t', 'teamlead'), ) race = models.CharField(max_length=1, choices=race_types, verbose_name='\u0420\u0430\u0441\u0441\u0430') name = models.CharField(max_length=120, verbose_name='\u0418\u043c\u044f') level = models.IntegerField(verbose_name='\u0423\u0440\u043e\u0432\u0435\u043d\u044c', default=0) skill = models.ManyToManyField('Skill', verbose_name='\u0423\u043c\u0435\u043d\u0438\u044f', through='SkillOfWarrior', related_name='warrior_skils') profession = models.ForeignKey('Profession', on_delete=models.CASCADE, verbose_name='\u041f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f', blank=True, null=True) class Profession(models.Model): title = models.CharField(max_length=120, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') description = models.TextField(verbose_name='\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435') class Skill(models.Model): title = models.CharField(max_length=120, verbose_name='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435') def __str__(self): return self.title class SkillOfWarrior(models.Model): skill = models.ForeignKey('Skill', verbose_name='\u0423\u043c\u0435\u043d\u0438\u0435', on_delete=models.CASCADE) warrior = models.ForeignKey('Warrior', verbose_name='\u0412\u043e\u0438\u043d', on_delete=models.CASCADE) level = models.IntegerField(verbose_name='\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0441\u0432\u043e\u0435\u043d\u0438\u044f \u0443\u043c\u0435\u043d\u0438\u044f')","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"index2/#urlspy","text":"from django.urls import path from .views import * app_name = \"warriors_app\" urlpatterns = [ path('warriors/', WarriorAPIView.as_view()), path('profession/create/', ProfessionCreateView.as_view()), path('warriors/list/', WarriorListAPIView.as_view()), path('profession/generic_create/', ProfessionCreateAPIView.as_view()), path('skill/generic_create/', SkillCreateAPIView.as_view()), ]","title":"\u0424\u0430\u0439\u043b\u044b urls.py"},{"location":"index2/#_2","text":"from rest_framework import serializers from warriors_app.models import * class ProfessionSerializer(serializers.ModelSerializer): class Meta: model = Profession fields = [\"title\", \"description\"] class SkillCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=120) def create(self, validated_data): skill = Skill(**validated_data) skill.save() return Skill(**validated_data) class SkillSerializer(serializers.ModelSerializer): class Meta: model = Skill fields = \"__all__\" class WarriorSerializer(serializers.ModelSerializer): profession = ProfessionSerializer(read_only=True) skills = SkillSerializer(many=True, source=\"skill\") class Meta: model = Warrior fields = [\"id\", \"race\", \"name\", \"level\", \"profession\", \"skills\"] class ProfessionCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=120) description = serializers.CharField() def create(self, validated_data): profession = Profession(**validated_data) profession.save() return Profession(**validated_data) class SkillRelatedSerializer(serializers.ModelSerializer): warrior_skils = WarriorSerializer(many=True) class Meta: model = Skill fields = [\"title\", \"warrior_skils\"] class WarriorRelatedSerializer(serializers.ModelSerializer): skill = serializers.SlugRelatedField(read_only=True, many=True, slug_field='title') class Meta: model = Warrior fields = \"__all__\" class WarriorDepthSerializer(serializers.ModelSerializer): class Meta: model = Warrior fields = \"__all__\" depth = 1","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b"},{"location":"index2/#_3","text":"from django.shortcuts import render from rest_framework.views import APIView from rest_framework.response import Response from warriors_app.models import * from rest_framework import generics, status from rest_framework.generics import get_object_or_404 from .serializers import * class WarriorAPIView(APIView): def get(self, request): warriors = Warrior.objects.all() serializer = WarriorSerializer(warriors, many=True) return Response({\"Warriors\": serializer.data}) class ProfessionCreateView(APIView): def post(self, request): profession = request.data.get(\"profession\") serializer = ProfessionCreateSerializer(data=profession) if serializer.is_valid(raise_exception=True): profession_saved = serializer.save() return Response({\"Success\": \"Profession '{}' created succesfully.\".format(profession_saved.title)}) class WarriorAPIView(APIView): def get(self, request): warriors = Warrior.objects.all() serializer = WarriorSerializer(warriors, many=True) return Response({\"Warriors\": serializer.data}) class WarriorListAPIView(generics.ListAPIView): serializer_class = WarriorSerializer queryset = Warrior.objects.all() class ProfessionCreateAPIView(generics.CreateAPIView): serializer_class = ProfessionCreateSerializer queryset = Profession.objects.all() class SkillCreateAPIView(generics.CreateAPIView): serializer_class = SkillCreateSerializer queryset = Skill.objects.all() class WarriorList(APIView): def get(self, request): warriors = Warrior.objects.all().prefetch_related(\"profession\", \"skill\") serializer = WarriorSerializer(warriors, many=True) return Response(serializer.data) class WarriorDetail(APIView): def get(self, request, pk): warrior = get_object_or_404(Warrior, pk=pk) serializer = WarriorSerializer(warrior) return Response(serializer.data) def delete(self, request, pk): warrior = get_object_or_404(Warrior, pk=pk) warrior.delete() return Response(status=status.HTTP_204_NO_CONTENT) def put(self, request, pk): warrior = get_object_or_404(Warrior, pk=pk) serializer = WarriorSerializer(warrior, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class SkillList(APIView): def get(self, request): skills = Skill.objects.all() serializer = SkillSerializer(skills, many=True) return Response(serializer.data) def post(self, request): serializer = SkillSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"index3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 3.3 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e mkdocs \u0438 swagger \u0411\u044b\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 drf_yasg. \u0412 \u043a\u043e\u0434 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python, \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u0434: from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='Conversion, software version 7.0', description=\"Looking at life through the eyes of a tire hub \", terms_of_service=\"\u041f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435\", contact=openapi.Contact(email=\"\u041d\u0435 \u043f\u0438\u0448\u0438\u0442\u0435, \u043d\u043e \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u043d\u0430\u0447\u0430\u043b\u0438 - \u043d\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0439\u0442\u0435, nick.chaptykov@gmail.com\"), license=openapi.License(name=\"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u0440\u044b\u0431\u043e\u043b\u043e\u0432\u043d\u044b\u0445 \u0441\u043d\u0430\u0441\u0442\u0435\u0439\"), ), public=True, permission_classes=(permissions.AllowAny,), ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430","title":"\u041f\u04203.3"},{"location":"index3/#33","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 3.3"},{"location":"index3/#mkdocs-swagger","text":"\u0411\u044b\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 drf_yasg. \u0412 \u043a\u043e\u0434 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python, \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u0434: from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='Conversion, software version 7.0', description=\"Looking at life through the eyes of a tire hub \", terms_of_service=\"\u041f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435\", contact=openapi.Contact(email=\"\u041d\u0435 \u043f\u0438\u0448\u0438\u0442\u0435, \u043d\u043e \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u043d\u0430\u0447\u0430\u043b\u0438 - \u043d\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0439\u0442\u0435, nick.chaptykov@gmail.com\"), license=openapi.License(name=\"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u0440\u044b\u0431\u043e\u043b\u043e\u0432\u043d\u044b\u0445 \u0441\u043d\u0430\u0441\u0442\u0435\u0439\"), ), public=True, permission_classes=(permissions.AllowAny,), )","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e mkdocs \u0438 swagger"},{"location":"index3/#_1","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430"},{"location":"index4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0425\u043e\u0440\u043e\u0448\u0435\u0439 \u0438\u0434\u0435\u0435\u0439 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0437\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043b\u0435\u043a\u0446\u0438\u0438 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u044d\u0442\u043e \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u043c\u043d\u043e\u0433\u043e \u0431\u0435\u0434 from django.db import models DAYS_OF_WEEK = ( (0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday'), ) class Tutor(models.Model): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) def __str__(self): return f\"{self.name} {self.surname}\" class AcademicGroup(models.Model): group_name = models.CharField(max_length=30) faculty = models.CharField(max_length=30) def __str__(self): return f\"{self.group_name}, {self.faculty}\" class Student(models.Model): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) group = models.ForeignKey(AcademicGroup, on_delete=models.CASCADE) def __str__(self): return f\"{self.name} {self.surname} {self.group}\" \"\"\" Discipline \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0439 \u0437\u0430 \u043d\u0438\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043b\u0435\u043a\u0446\u0438\u0439 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u043c\u0430\u0440\u043a\u0435\u0440\u0430, \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0443\u0442\u043e\u0447\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b: '\u0412\u044b\u0448\u043c\u0430\u0442 \u043b\u0435\u043a\u0446\u0438\u044f' \u0438 '\u0412\u044b\u0448\u043c\u0430\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430' \"\"\" class Discipline(models.Model): lecturer = models.ForeignKey(Tutor, on_delete=models.CASCADE) discipline_name = models.CharField(max_length=30) room = models.CharField(max_length=30, blank=True) def __str__(self): return f\"\u043a\u0430\u0431. {self.room}, {self.discipline_name}, \u0432\u0435\u0434\u0435\u0442 {self.lecturer}\" \"\"\" \u041f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0432\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c Lecture \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \"\"\" class Lecture(models.Model): discipline = models.ForeignKey(Discipline, related_name='lecture', on_delete=models.CASCADE) day = models.IntegerField(choices=DAYS_OF_WEEK, default=0) time = models.TimeField(null=True) def __str__(self): return f\"{DAYS_OF_WEEK[self.day][1]} {self.discipline}\" \"\"\" \u041d\u0430 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043d\u044f\u0442\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u0440\u0443\u043f\u043f, \u0432\u0432\u0435\u0434\u0435\u043c \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u0438 \u0433\u0440\u0443\u043f\u043f\u043e\u0439 \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \"\"\" class AssignedLecture(models.Model): group = models.ForeignKey(AcademicGroup, on_delete=models.CASCADE, primary_key=True) lecture = models.ManyToManyField(Lecture) def __str__(self): return f\"{self.group}\" + f\"{self.lecture}\" class AcademicPerformance(models.Model): student = models.ForeignKey(Student, on_delete=models.CASCADE) subject = models.ForeignKey(Discipline, on_delete=models.CASCADE) grade = models.CharField(max_length=10) \u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b from lab_app.models import * from rest_framework import serializers class LectureSerializer(serializers.ModelSerializer): class Meta: model = Lecture fields = ('time', 'discipline') class AssignedLectureSerializer(serializers.ModelSerializer): lecture = LectureSerializer(many=True, read_only=True) group_str = serializers.StringRelatedField(source='group') class Meta: model = AssignedLecture fields = ('group', 'group_str', 'lecture') class TutorSerializer(serializers.ModelSerializer): class Meta: model = Tutor fields = ('__all__') class StudentSerializer(serializers.ModelSerializer): class Meta: model = Student fields = ['id', 'name', 'surname', 'group'] class StudentCountSerializer(serializers.ModelSerializer): class Meta: model = Student fields = ['id', 'name', 'surname', 'group'] class AcademicPerformanceSerializer(serializers.ModelSerializer): student_str = serializers.StringRelatedField(source='student') subject_str = serializers.StringRelatedField(source='subject') class Meta: model = AcademicPerformance fields = ['student', 'student_str', 'subject', 'subject_str', 'grade'] class GroupSerializer(serializers.ModelSerializer): class Meta: model = AcademicGroup fields = ('__all__') \u0424\u0430\u0439\u043b urls.py \"\"\"laboratory_work_3 URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/3.2/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path('', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path('', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path('blog/', include('blog.urls')) \"\"\" from django.contrib import admin from django.urls import path from lab_app.views import * from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='Conversion, software version 7.0', description=\"Looking at life through the eyes of a tire hub \", terms_of_service=\"\u041f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435\", contact=openapi.Contact(email=\"\u041d\u0435 \u043f\u0438\u0448\u0438\u0442\u0435, \u043d\u043e \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u043d\u0430\u0447\u0430\u043b\u0438 - \u043d\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0439\u0442\u0435, nick.chaptykov@gmail.com\"), license=openapi.License(name=\"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u0440\u044b\u0431\u043e\u043b\u043e\u0432\u043d\u044b\u0445 \u0441\u043d\u0430\u0441\u0442\u0435\u0439\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('group/', GroupList.as_view()), path('group/<int:pk>', GroupDetail.as_view()), path('group/<int:pk1>/<int:pk>', StudentDetail.as_view()), path('tutor/', TutorList.as_view()), path('tutor/<int:pk>', TutorDetail.as_view()), path('group/<int:pk>/tutors', GroupTutorsList.as_view()), path('group/<int:pk>/cnt', CountStudents.as_view()), path('group/timetable/<int:pk1>/<int:pk>', GetTimetable.as_view()), path('group/timetable/<int:pk2>/<int:pk1>/<int:pk>', GetTimetableDeeper.as_view()), path('tutor/groups/<int:pk1>/<int:pk>', GroupByTutor.as_view()), path('group/list_lessons/<int:pk>', ListGroupLessons.as_view()), path('group/list_lessons/<int:pk1>/<int:pk>', GroupLessonDetail.as_view()), path('group/list_lessons/schedule/<int:pk>', ScheduleGroupLesson.as_view()), path('group/list_lessons/create', CreateGroupLesson.as_view()), path('student/performance/<int:pk>', StudentPerformance.as_view()), path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc') ] \u0424\u0430\u0439\u043b View.py from django.shortcuts import render from rest_framework.views import APIView from rest_framework import generics, status from rest_framework.generics import get_object_or_404 from .serializers import * from .models import * from django.contrib.auth.models import User, Group class TutorList(generics.ListCreateAPIView): serializer_class = TutorSerializer queryset = Tutor.objects.all() class TutorDetail(generics.RetrieveUpdateDestroyAPIView): serializer_class = TutorSerializer queryset = Tutor.objects.all() class GroupList(generics.ListCreateAPIView): serializer_class = GroupSerializer def get_queryset(self): queryset = AcademicGroup.objects.all() return queryset class GroupDetail(generics.ListCreateAPIView): serializer_class = StudentSerializer def get_queryset(self): queryset = Student.objects.all().filter(group=self.kwargs['pk']) return queryset class StudentDetail(generics.RetrieveUpdateDestroyAPIView): serializer_class = StudentSerializer def get_queryset(self): queryset = Student.objects.all().filter(group=self.kwargs['pk1'], id=self.kwargs['pk']) return queryset # list of tutors for a group class GroupTutorsList(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk, format=None): user_count = AssignedLecture.objects.filter(group=self.kwargs['pk']).values_list(\"lecture\") user_count = Lecture.objects.filter(pk__in=user_count).values_list(\"discipline\").distinct() user_count = Discipline.objects.filter(pk__in=user_count).values(\"lecturer__name\", \"lecturer__surname\", \"discipline_name\") return Response({\"res\": user_count}) # timetable from day of week class GetTimetable(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk1, pk, format=None): user_count = AssignedLecture.objects.filter(group=pk1).values_list(\"lecture\") user_count = Lecture.objects.filter(pk__in=user_count, day=pk).values(\"discipline__discipline_name\", \"day\", \"time\") return Response({\"res\": user_count}) class GetTimetableDeeper(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk2, pk1, pk, format=None): user_count = AssignedLecture.objects.filter(group=pk1).values_list(\"lecture\") user_count = Lecture.objects.filter(pk__in=user_count, day=pk).order_by(\"time\").values(\"discipline__discipline_name\", \"day\", \"time\") try: return Response({\"res\": user_count[pk2]}) except Exception: return Response({\"res\": \"\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a\"}) class GroupByTutor(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk1, pk, format=None): user_count = AssignedLecture.objects.filter(lecture__discipline__lecturer_id=pk1, lecture__discipline_id=pk).values(\"group__group_name\").distinct() return Response({\"res\": user_count}) from django.db.models import Count from rest_framework import status from rest_framework.response import Response class CountStudents(generics.ListAPIView): queryset = Student.objects.all() serializer_class = StudentCountSerializer def get(self, request, pk, format=None): user_count = Student.objects.filter(group=self.kwargs['pk']).count() content = {'student_count': user_count} return Response(content) class ListGroupLessons(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk, format=None): user_count = AssignedLecture.objects.filter(group=pk).values( \"lecture__id\", \"lecture__discipline__lecturer__name\", \"lecture__discipline__lecturer__surname\", \"lecture__discipline__discipline_name\") return Response({\"res\": user_count}) class GroupLessonDetail(generics.RetrieveUpdateDestroyAPIView): serializer_class = LectureSerializer def get_queryset(self): queryset = Lecture.objects.filter(id=self.kwargs['pk']) # queryset = queryset.values() return queryset class ScheduleGroupLesson(generics.ListCreateAPIView): serializer_class = LectureSerializer def get_queryset(self): queryset = Lecture.objects.filter(id=self.kwargs['pk']) # queryset = queryset.values() return queryset class CreateGroupLesson(generics.ListCreateAPIView): serializer_class = AssignedLectureSerializer def get_queryset(self): queryset = [AssignedLecture.objects.first()] # queryset = queryset.values() return queryset class StudentPerformance(generics.RetrieveUpdateDestroyAPIView): serializer_class = AcademicPerformanceSerializer def get_queryset(self): queryset = AcademicPerformance.objects.filter(student=self.kwargs['pk']) # queryset = queryset.values() return queryset","title":"\u041b\u04203"},{"location":"index4/#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"index4/#_1","text":"\u0425\u043e\u0440\u043e\u0448\u0435\u0439 \u0438\u0434\u0435\u0435\u0439 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0440\u0430\u0437\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043b\u0435\u043a\u0446\u0438\u0438 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u044d\u0442\u043e \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u043c\u043d\u043e\u0433\u043e \u0431\u0435\u0434 from django.db import models DAYS_OF_WEEK = ( (0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday'), ) class Tutor(models.Model): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) def __str__(self): return f\"{self.name} {self.surname}\" class AcademicGroup(models.Model): group_name = models.CharField(max_length=30) faculty = models.CharField(max_length=30) def __str__(self): return f\"{self.group_name}, {self.faculty}\" class Student(models.Model): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) group = models.ForeignKey(AcademicGroup, on_delete=models.CASCADE) def __str__(self): return f\"{self.name} {self.surname} {self.group}\" \"\"\" Discipline \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0439 \u0437\u0430 \u043d\u0438\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043b\u0435\u043a\u0446\u0438\u0439 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u043c\u0430\u0440\u043a\u0435\u0440\u0430, \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0443\u0442\u043e\u0447\u043d\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b: '\u0412\u044b\u0448\u043c\u0430\u0442 \u043b\u0435\u043a\u0446\u0438\u044f' \u0438 '\u0412\u044b\u0448\u043c\u0430\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430' \"\"\" class Discipline(models.Model): lecturer = models.ForeignKey(Tutor, on_delete=models.CASCADE) discipline_name = models.CharField(max_length=30) room = models.CharField(max_length=30, blank=True) def __str__(self): return f\"\u043a\u0430\u0431. {self.room}, {self.discipline_name}, \u0432\u0435\u0434\u0435\u0442 {self.lecturer}\" \"\"\" \u041f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0432\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c Lecture \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \"\"\" class Lecture(models.Model): discipline = models.ForeignKey(Discipline, related_name='lecture', on_delete=models.CASCADE) day = models.IntegerField(choices=DAYS_OF_WEEK, default=0) time = models.TimeField(null=True) def __str__(self): return f\"{DAYS_OF_WEEK[self.day][1]} {self.discipline}\" \"\"\" \u041d\u0430 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043d\u044f\u0442\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u0440\u0443\u043f\u043f, \u0432\u0432\u0435\u0434\u0435\u043c \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u0438 \u0433\u0440\u0443\u043f\u043f\u043e\u0439 \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \"\"\" class AssignedLecture(models.Model): group = models.ForeignKey(AcademicGroup, on_delete=models.CASCADE, primary_key=True) lecture = models.ManyToManyField(Lecture) def __str__(self): return f\"{self.group}\" + f\"{self.lecture}\" class AcademicPerformance(models.Model): student = models.ForeignKey(Student, on_delete=models.CASCADE) subject = models.ForeignKey(Discipline, on_delete=models.CASCADE) grade = models.CharField(max_length=10)","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"index4/#_2","text":"from lab_app.models import * from rest_framework import serializers class LectureSerializer(serializers.ModelSerializer): class Meta: model = Lecture fields = ('time', 'discipline') class AssignedLectureSerializer(serializers.ModelSerializer): lecture = LectureSerializer(many=True, read_only=True) group_str = serializers.StringRelatedField(source='group') class Meta: model = AssignedLecture fields = ('group', 'group_str', 'lecture') class TutorSerializer(serializers.ModelSerializer): class Meta: model = Tutor fields = ('__all__') class StudentSerializer(serializers.ModelSerializer): class Meta: model = Student fields = ['id', 'name', 'surname', 'group'] class StudentCountSerializer(serializers.ModelSerializer): class Meta: model = Student fields = ['id', 'name', 'surname', 'group'] class AcademicPerformanceSerializer(serializers.ModelSerializer): student_str = serializers.StringRelatedField(source='student') subject_str = serializers.StringRelatedField(source='subject') class Meta: model = AcademicPerformance fields = ['student', 'student_str', 'subject', 'subject_str', 'grade'] class GroupSerializer(serializers.ModelSerializer): class Meta: model = AcademicGroup fields = ('__all__')","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"index4/#urlspy","text":"\"\"\"laboratory_work_3 URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/3.2/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path('', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path('', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path('blog/', include('blog.urls')) \"\"\" from django.contrib import admin from django.urls import path from lab_app.views import * from rest_framework import permissions from drf_yasg.views import get_schema_view from drf_yasg import openapi schema_view = get_schema_view( openapi.Info( title=\"API\", default_version='Conversion, software version 7.0', description=\"Looking at life through the eyes of a tire hub \", terms_of_service=\"\u041f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435\", contact=openapi.Contact(email=\"\u041d\u0435 \u043f\u0438\u0448\u0438\u0442\u0435, \u043d\u043e \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u043d\u0430\u0447\u0430\u043b\u0438 - \u043d\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0439\u0442\u0435, nick.chaptykov@gmail.com\"), license=openapi.License(name=\"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u0440\u044b\u0431\u043e\u043b\u043e\u0432\u043d\u044b\u0445 \u0441\u043d\u0430\u0441\u0442\u0435\u0439\"), ), public=True, permission_classes=(permissions.AllowAny,), ) urlpatterns = [ path('admin/', admin.site.urls), path('group/', GroupList.as_view()), path('group/<int:pk>', GroupDetail.as_view()), path('group/<int:pk1>/<int:pk>', StudentDetail.as_view()), path('tutor/', TutorList.as_view()), path('tutor/<int:pk>', TutorDetail.as_view()), path('group/<int:pk>/tutors', GroupTutorsList.as_view()), path('group/<int:pk>/cnt', CountStudents.as_view()), path('group/timetable/<int:pk1>/<int:pk>', GetTimetable.as_view()), path('group/timetable/<int:pk2>/<int:pk1>/<int:pk>', GetTimetableDeeper.as_view()), path('tutor/groups/<int:pk1>/<int:pk>', GroupByTutor.as_view()), path('group/list_lessons/<int:pk>', ListGroupLessons.as_view()), path('group/list_lessons/<int:pk1>/<int:pk>', GroupLessonDetail.as_view()), path('group/list_lessons/schedule/<int:pk>', ScheduleGroupLesson.as_view()), path('group/list_lessons/create', CreateGroupLesson.as_view()), path('student/performance/<int:pk>', StudentPerformance.as_view()), path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc') ]","title":"\u0424\u0430\u0439\u043b urls.py"},{"location":"index4/#viewpy","text":"from django.shortcuts import render from rest_framework.views import APIView from rest_framework import generics, status from rest_framework.generics import get_object_or_404 from .serializers import * from .models import * from django.contrib.auth.models import User, Group class TutorList(generics.ListCreateAPIView): serializer_class = TutorSerializer queryset = Tutor.objects.all() class TutorDetail(generics.RetrieveUpdateDestroyAPIView): serializer_class = TutorSerializer queryset = Tutor.objects.all() class GroupList(generics.ListCreateAPIView): serializer_class = GroupSerializer def get_queryset(self): queryset = AcademicGroup.objects.all() return queryset class GroupDetail(generics.ListCreateAPIView): serializer_class = StudentSerializer def get_queryset(self): queryset = Student.objects.all().filter(group=self.kwargs['pk']) return queryset class StudentDetail(generics.RetrieveUpdateDestroyAPIView): serializer_class = StudentSerializer def get_queryset(self): queryset = Student.objects.all().filter(group=self.kwargs['pk1'], id=self.kwargs['pk']) return queryset # list of tutors for a group class GroupTutorsList(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk, format=None): user_count = AssignedLecture.objects.filter(group=self.kwargs['pk']).values_list(\"lecture\") user_count = Lecture.objects.filter(pk__in=user_count).values_list(\"discipline\").distinct() user_count = Discipline.objects.filter(pk__in=user_count).values(\"lecturer__name\", \"lecturer__surname\", \"discipline_name\") return Response({\"res\": user_count}) # timetable from day of week class GetTimetable(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk1, pk, format=None): user_count = AssignedLecture.objects.filter(group=pk1).values_list(\"lecture\") user_count = Lecture.objects.filter(pk__in=user_count, day=pk).values(\"discipline__discipline_name\", \"day\", \"time\") return Response({\"res\": user_count}) class GetTimetableDeeper(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk2, pk1, pk, format=None): user_count = AssignedLecture.objects.filter(group=pk1).values_list(\"lecture\") user_count = Lecture.objects.filter(pk__in=user_count, day=pk).order_by(\"time\").values(\"discipline__discipline_name\", \"day\", \"time\") try: return Response({\"res\": user_count[pk2]}) except Exception: return Response({\"res\": \"\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a\"}) class GroupByTutor(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk1, pk, format=None): user_count = AssignedLecture.objects.filter(lecture__discipline__lecturer_id=pk1, lecture__discipline_id=pk).values(\"group__group_name\").distinct() return Response({\"res\": user_count}) from django.db.models import Count from rest_framework import status from rest_framework.response import Response class CountStudents(generics.ListAPIView): queryset = Student.objects.all() serializer_class = StudentCountSerializer def get(self, request, pk, format=None): user_count = Student.objects.filter(group=self.kwargs['pk']).count() content = {'student_count': user_count} return Response(content) class ListGroupLessons(generics.ListAPIView): serializer_class = AssignedLectureSerializer def get(self, request, pk, format=None): user_count = AssignedLecture.objects.filter(group=pk).values( \"lecture__id\", \"lecture__discipline__lecturer__name\", \"lecture__discipline__lecturer__surname\", \"lecture__discipline__discipline_name\") return Response({\"res\": user_count}) class GroupLessonDetail(generics.RetrieveUpdateDestroyAPIView): serializer_class = LectureSerializer def get_queryset(self): queryset = Lecture.objects.filter(id=self.kwargs['pk']) # queryset = queryset.values() return queryset class ScheduleGroupLesson(generics.ListCreateAPIView): serializer_class = LectureSerializer def get_queryset(self): queryset = Lecture.objects.filter(id=self.kwargs['pk']) # queryset = queryset.values() return queryset class CreateGroupLesson(generics.ListCreateAPIView): serializer_class = AssignedLectureSerializer def get_queryset(self): queryset = [AssignedLecture.objects.first()] # queryset = queryset.values() return queryset class StudentPerformance(generics.RetrieveUpdateDestroyAPIView): serializer_class = AcademicPerformanceSerializer def get_queryset(self): queryset = AcademicPerformance.objects.filter(student=self.kwargs['pk']) # queryset = queryset.values() return queryset","title":"\u0424\u0430\u0439\u043b View.py"},{"location":"index5/","text":"\u043d\u0435","title":"Index5"},{"location":"index5/#_1","text":"","title":"\u043d\u0435"}]}